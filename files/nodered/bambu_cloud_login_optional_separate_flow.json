[
    {
        "id": "ceb9c7af8ac85208",
        "type": "group",
        "z": "a8bb36f4c96539fb",
        "name": "Cloud Login Flow",
        "style": {
            "stroke": "#ff7f7f",
            "fill": "#b797cf",
            "label": true,
            "color": "#6f2fa0",
            "fill-opacity": "0.08"
        },
        "nodes": [
            "513f7a6c71b056d2",
            "e2d0cff94bf02e27",
            "2926dee3ddcfdc55",
            "5f3335d6cd76a63f",
            "955f493ad09c081d",
            "7a0cfe215e0a7604",
            "3470ef99be2e6022",
            "b42f23c0c54390bc",
            "ca527d3979a0003e",
            "d85c73e5dbb9cf5b",
            "a6fdcf9dea19d6e8",
            "74b588f633523219",
            "96c348b1bb273ffc",
            "057429fab4edf82b",
            "93e032f57a0948d2",
            "d779153e65028f44",
            "801effddad42d6b3",
            "054e84ecfc466c90",
            "c5f80279218f9797",
            "cb4379eb0702a9a1",
            "11321e67d9548108",
            "ffd2bcdad450c945",
            "ce04a5cccd414ce9",
            "63843cea32aaddae",
            "d9b5a771ac892f0d",
            "a18d4e2d60721d7b",
            "9189edba0d449c76",
            "2aeb943e5e96ef41"
        ],
        "x": 14,
        "y": 19,
        "w": 1032,
        "h": 422
    },
    {
        "id": "513f7a6c71b056d2",
        "type": "http request",
        "z": "a8bb36f4c96539fb",
        "g": "ceb9c7af8ac85208",
        "name": "sign in",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.bambulab.com/v1/user-service/user/login",
        "tls": "fc2996321cee14d8",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 630,
        "y": 120,
        "wires": [
            [
                "2926dee3ddcfdc55"
            ]
        ]
    },
    {
        "id": "e2d0cff94bf02e27",
        "type": "function",
        "z": "a8bb36f4c96539fb",
        "g": "ceb9c7af8ac85208",
        "name": "Build header and payload",
        "func": "let send_code = true;\nif (msg['send_code'] != undefined && msg['send_code'] == false) {\n  send_code = false;\n}\nmsg = {};\nmsg.headers = {\n  'Content-Type' : 'application/json'\n};\n\nmsg.payload = {\n  \"account\": flow.get(\"BAMBU_EMAIL\"),\n  //\"password\": flow.get(\"BAMBU_PASSWORD\"),\n  \"code\": flow.get(\"ONETIME_EMAIL_CODE\")\n};\n\nif (!send_code) {\n  delete msg.payload['code'];\n  msg.payload['password'] = flow.get(\"BAMBU_PASSWORD\");\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 120,
        "wires": [
            [
                "513f7a6c71b056d2"
            ]
        ]
    },
    {
        "id": "2926dee3ddcfdc55",
        "type": "json",
        "z": "a8bb36f4c96539fb",
        "g": "ceb9c7af8ac85208",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 410,
        "y": 160,
        "wires": [
            [
                "d779153e65028f44"
            ]
        ]
    },
    {
        "id": "5f3335d6cd76a63f",
        "type": "inject",
        "z": "a8bb36f4c96539fb",
        "g": "ceb9c7af8ac85208",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "86400",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 140,
        "wires": [
            [
                "955f493ad09c081d"
            ]
        ]
    },
    {
        "id": "955f493ad09c081d",
        "type": "change",
        "z": "a8bb36f4c96539fb",
        "g": "ceb9c7af8ac85208",
        "name": "Bambu Account Config",
        "rules": [
            {
                "t": "set",
                "p": "BAMBU_EMAIL",
                "pt": "flow",
                "to": "{BAMBU_ACCOUNT_EMAIL}",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "BAMBU_PASSWORD",
                "pt": "flow",
                "to": "{BAMBU_ACCOUNT_PASSWORD}",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "BAMBU_REGION",
                "pt": "global",
                "to": "us.mqtt.bambulab.com",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "ONETIME_EMAIL_CODE",
                "pt": "flow",
                "to": "111111",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 160,
        "y": 180,
        "wires": [
            [
                "057429fab4edf82b"
            ]
        ]
    },
    {
        "id": "7a0cfe215e0a7604",
        "type": "comment",
        "z": "a8bb36f4c96539fb",
        "g": "ceb9c7af8ac85208",
        "name": "NOTES - READ ME",
        "info": "# YOU ONLY NEED THIS FLOW ONCE NO MATTER HOW MANY PRINTERS YOU HAVE\n# AND HAVE IT IN ITS OWN TAB\n\nChange the following in *Bambu Account Config*\n\nBAMBU_EMAIL: Your bambu account email\nBAMBU_PASSWORD: Your bambu account password\nBAMBU_REGION: \n    If in China or region locked printer, use:     cn.mqtt.bambulab.com\n    Anywhere else, use:                            us.mqtt.bambulab.com\nMAKERWORLD_HANDLE: Your @name for your makerworld account. Should be same as your username (not email)\n\nIf you signed up with a third party such as google, do the following:\n\n1) Go to bambulab website and log out if you are signed in\n2) In sign in page, click on Forgot (Forgot password)\n3) Complete the reset password flow\n\nYou now will have a password for your bambu account \nusing the same email from the third party.\n\nBonus: The third party login STILL WORKS!\n\nIF THIS DOES NOT LOG YOU IN, you will need to input an email verification code into the \n'Bambu Account Config' node. If you did not get an email, hit the request button below \nto request an email code. Once configured with a fresh code, deploy and it should log you in\nfor about a year unless details change.",
        "x": 150,
        "y": 100,
        "wires": []
    },
    {
        "id": "3470ef99be2e6022",
        "type": "function",
        "z": "a8bb36f4c96539fb",
        "g": "ceb9c7af8ac85208",
        "name": "Set Access Token Global",
        "func": "global.set(\"BAMBU_ACCESS_TOKEN\", msg.payload.accessToken);\nglobal.set(\"BAMBU_REFRESH_TOKEN\", msg.payload.refreshToken);\n\nlet now = Date.now();\nlet expiresIn = msg.payload.expiresIn;\nlet expirey = (expiresIn*1000) + now;\nglobal.set(\"BAMBU_TOKEN_EXPIRY\", Math.round(expirey/1000));",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "b42f23c0c54390bc",
        "type": "inject",
        "z": "a8bb36f4c96539fb",
        "g": "ceb9c7af8ac85208",
        "name": "Trigger Token Delete",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 340,
        "wires": [
            [
                "ca527d3979a0003e"
            ]
        ]
    },
    {
        "id": "ca527d3979a0003e",
        "type": "function",
        "z": "a8bb36f4c96539fb",
        "g": "ceb9c7af8ac85208",
        "name": "Delete Access Token",
        "func": "global.set(\"BAMBU_ACCESS_TOKEN\", null);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "d85c73e5dbb9cf5b",
        "type": "function",
        "z": "a8bb36f4c96539fb",
        "g": "ceb9c7af8ac85208",
        "name": "Get jwt half",
        "func": "msg.payload.jwthalf = msg.payload.accessToken.split(\".\")[1]\n\nlet pad = \"=\".repeat(((4 - (msg.payload.jwthalf).length % 4) % 4));\nmsg.payload.jwthalf = msg.payload.jwthalf + pad;\n\nvar payload = Buffer.from(msg.payload.jwthalf, 'base64')\nmsg = {\n    \"payload\": payload.toString()\n}\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 260,
        "wires": [
            [
                "a6fdcf9dea19d6e8"
            ]
        ]
    },
    {
        "id": "a6fdcf9dea19d6e8",
        "type": "json",
        "z": "a8bb36f4c96539fb",
        "g": "ceb9c7af8ac85208",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 950,
        "y": 260,
        "wires": [
            [
                "74b588f633523219"
            ]
        ]
    },
    {
        "id": "74b588f633523219",
        "type": "function",
        "z": "a8bb36f4c96539fb",
        "g": "ceb9c7af8ac85208",
        "name": "Set Bambu MQTT Username Global",
        "func": "global.set(\"BAMBU_MQTT_USER\", msg.payload.username);\nif (msg.payload.exp != undefined) {\n    global.set(\"BAMBU_TOKEN_EXPIRY\", msg.payload.exp);\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "96c348b1bb273ffc",
        "type": "comment",
        "z": "a8bb36f4c96539fb",
        "g": "ceb9c7af8ac85208",
        "name": "Version 2.1.9",
        "info": "Version 2.1.9: 2024-11-22\n- Removed need for handle, found new way to get uid\n\n===\nVersion 2.1.8.1: 2024-11-21\n- Removed refresh token logic, as it no longer works on bambu's end\n- Added in workaround for new access token format\n  - Required input for makerworld user handle in order to fetch uid\n  - Expiry time is now calculated as no jwt splitting exists now\n\n===\nVersion 2.1.8: 2024-11-05\n- Add in logic to check if we do not need to reset access token\n- Add in logic for email code verification\n  - If required, you will need to update the flow with the new value\n\n===\nVersion 2.1.5: 2024-06-17\n- Reset version as new codebase is in a repository now\n- Some cleanup\n- Re-releasing as a global option\n\n===\nRev 46: 2023-05-01\n- Change according to main flow for making the mqtt connections easier when importing/generating\n\n===\nRev 39: 2023-04-26\n- Added extracting of plate_type for each print in ftp+postgres flow\n- Set plate_type sensor on x1c printer based on print details\n\n====\nRev 38: 2023-04-20\n- Increased delay when P1P Cloud in fetch\n\n====\nRev 36: 2023-04-07\n- Modified FTP flow to handle P1P in cloud Mode \nIf p1p cloud is toggled on, instead of FTPS, it will wait for the project file message to printer from mqtt server.\nIt will then do a GET download of the url from bambu's amazon webserver instead.\n- Modified Postgres Table schema, will be automatic upgrade.\n- Added a failsafe for start epoch as p1p cloud mode won't have it, this sets it ONLY for the print for DB purposes\n\n====\nRev 33: 2023-03-11\n- Changed FTP Image fetch logic. No longer do you need to rely on caching of a digital file or exposing nodered to the internet. Now, an image will be sent through MQTT (dashboard has associated update)\n\n====\nRev 31: 2023-03-05\n- General update for syncing\n\n====\nRev 30: 2023-02-25\n- Changed image and weight fetching to be fetch for the currently printed plate instead of default plate 1\n- Added \"Filament Type Setter\" to set filament type of printer based on 3mf file via FTPS, instead of relying on AMS in normal flow\n\n",
        "x": 130,
        "y": 60,
        "wires": []
    },
    {
        "id": "057429fab4edf82b",
        "type": "function",
        "z": "a8bb36f4c96539fb",
        "g": "ceb9c7af8ac85208",
        "name": "Login Choice",
        "func": "if (global.get(\"BAMBU_ACCESS_TOKEN\") != undefined && global.get(\"BAMBU_MQTT_USER\") != undefined \n    && global.get(\"BAMBU_TOKEN_EXPIRY\") != undefined && global.get(\"BAMBU_TOKEN_EXPIRY\")*1000 >= Date.now()) {\n        // We are good, unless we are unable to login elsewhere\n        \n        /*if (global.get(\"BAMBU_REFRESH_TOKEN\") != undefined){\n            msg.payload = {\n                \"refreshToken\": global.get(\"BAMBU_REFRESH_TOKEN\")\n            }\n            node.send([null, msg]);\n        }*/\n\n}\nelse {\n    node.send([msg, null]);\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 220,
        "wires": [
            [
                "e2d0cff94bf02e27"
            ],
            [
                "ffd2bcdad450c945"
            ]
        ]
    },
    {
        "id": "93e032f57a0948d2",
        "type": "catch",
        "z": "a8bb36f4c96539fb",
        "g": "ceb9c7af8ac85208",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 740,
        "y": 340,
        "wires": [
            [
                "11321e67d9548108"
            ]
        ]
    },
    {
        "id": "d779153e65028f44",
        "type": "function",
        "z": "a8bb36f4c96539fb",
        "g": "ceb9c7af8ac85208",
        "name": "If Error",
        "func": "\nif (msg.payload.code != undefined && msg.payload.code == 1 && msg.payload.error != undefined && msg.payload.error.includes(\"request a new verification code\")) {\n    msg[\"send_code\"] = false;\n    node.send([null, msg]);\n    return;\n}\n\nelse if (msg.payload.loginType != undefined && msg.payload.accessToken != undefined && msg.payload.accessToken != \"\") {\n    node.send([msg, null]);\n}\nelse if (msg.payload.accessToken != undefined && msg.payload.accessToken == \"\") {\n    node.warn(\"Cloud Login Error: Could not login or token expired. Please request an Email Verification Code and configure Account Config Node to log in again\");\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 160,
        "wires": [
            [
                "3470ef99be2e6022",
                "63843cea32aaddae"
            ],
            [
                "801effddad42d6b3"
            ]
        ]
    },
    {
        "id": "801effddad42d6b3",
        "type": "delay",
        "z": "a8bb36f4c96539fb",
        "g": "ceb9c7af8ac85208",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 780,
        "y": 160,
        "wires": [
            [
                "e2d0cff94bf02e27"
            ]
        ]
    },
    {
        "id": "054e84ecfc466c90",
        "type": "inject",
        "z": "a8bb36f4c96539fb",
        "g": "ceb9c7af8ac85208",
        "name": "Request",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 400,
        "wires": [
            [
                "c5f80279218f9797"
            ]
        ]
    },
    {
        "id": "c5f80279218f9797",
        "type": "function",
        "z": "a8bb36f4c96539fb",
        "g": "ceb9c7af8ac85208",
        "name": "Request Email Code",
        "func": "msg = {};\nmsg.headers = {\n  'Content-Type' : 'application/json'\n};\n\nmsg.payload = {\n  \"email\": flow.get(\"BAMBU_EMAIL\"),\n  \"type\": \"codeLogin\",\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 400,
        "wires": [
            [
                "cb4379eb0702a9a1"
            ]
        ]
    },
    {
        "id": "cb4379eb0702a9a1",
        "type": "http request",
        "z": "a8bb36f4c96539fb",
        "g": "ceb9c7af8ac85208",
        "name": "req code email",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://bambulab.com/api/v1/user-service/user/sendemail/code",
        "tls": "fc2996321cee14d8",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 500,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "11321e67d9548108",
        "type": "debug",
        "z": "a8bb36f4c96539fb",
        "g": "ceb9c7af8ac85208",
        "name": "Cloud Login Errors ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 340,
        "wires": []
    },
    {
        "id": "ffd2bcdad450c945",
        "type": "http request",
        "z": "a8bb36f4c96539fb",
        "d": true,
        "g": "ceb9c7af8ac85208",
        "name": "Refresh token",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://api.bambulab.com//v1/user-service/user/refreshtoken",
        "tls": "fc2996321cee14d8",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [],
        "x": 240,
        "y": 260,
        "wires": [
            [
                "ce04a5cccd414ce9"
            ]
        ]
    },
    {
        "id": "ce04a5cccd414ce9",
        "type": "switch",
        "z": "a8bb36f4c96539fb",
        "g": "ceb9c7af8ac85208",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 390,
        "y": 200,
        "wires": [
            [
                "2926dee3ddcfdc55"
            ]
        ]
    },
    {
        "id": "63843cea32aaddae",
        "type": "switch",
        "z": "a8bb36f4c96539fb",
        "g": "ceb9c7af8ac85208",
        "name": "Has JWT Half",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": ".",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 560,
        "y": 200,
        "wires": [
            [
                "d85c73e5dbb9cf5b"
            ],
            [
                "2aeb943e5e96ef41"
            ]
        ]
    },
    {
        "id": "d9b5a771ac892f0d",
        "type": "function",
        "z": "a8bb36f4c96539fb",
        "g": "ceb9c7af8ac85208",
        "name": "Users",
        "func": "let url = \"https://makerworld.com/api/v1/design-user-service/my/preference\"; // requires user-agent spoofing, but good backup\nurl = \"https://api.bambulab.com/v1/design-user-service/my/preference\";\nmsg.url = url;\nmsg.access_token = \"Bearer \" + global.get(\"BAMBU_ACCESS_TOKEN\");\nnode.send(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 240,
        "wires": [
            [
                "9189edba0d449c76"
            ]
        ]
    },
    {
        "id": "a18d4e2d60721d7b",
        "type": "function",
        "z": "a8bb36f4c96539fb",
        "g": "ceb9c7af8ac85208",
        "name": "Get UID",
        "func": "\nif (msg.payload == undefined || msg.payload.uid == undefined) {\n    node.warn(`No user id found. Cannot log into cloud mqtt`);\n    return;\n}\n\nlet data = {};\ndata.username = `u_${msg.payload.uid}`;\n\nif (data.username == undefined) {\n    node.warn(`No user id was found. Cannot log into cloud mqtt`);\n    return;\n}\n\nmsg.payload = data;\nnode.send(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 280,
        "wires": [
            [
                "74b588f633523219"
            ]
        ]
    },
    {
        "id": "9189edba0d449c76",
        "type": "http request",
        "z": "a8bb36f4c96539fb",
        "g": "ceb9c7af8ac85208",
        "name": "search users",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "fc2996321cee14d8",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": true,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "msg",
                "valueValue": "access_token"
            }
        ],
        "x": 430,
        "y": 280,
        "wires": [
            [
                "a18d4e2d60721d7b"
            ]
        ]
    },
    {
        "id": "2aeb943e5e96ef41",
        "type": "delay",
        "z": "a8bb36f4c96539fb",
        "g": "ceb9c7af8ac85208",
        "name": "",
        "pauseType": "random",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "2",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 420,
        "y": 240,
        "wires": [
            [
                "d9b5a771ac892f0d"
            ]
        ]
    },
    {
        "id": "fc2996321cee14d8",
        "type": "tls-config",
        "name": "Dummy TLS Config - Cloud",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    }
]