[
    {
        "id": "296274a0d2a6c675",
        "type": "group",
        "z": "fbda6ab16491b918",
        "name": "Basic Flow - Bambu MQTT Relay",
        "style": {
            "stroke": "#92d04f",
            "label": true,
            "color": "#92d04f"
        },
        "nodes": [
            "ba2e021eef1322ea",
            "7258bcda05ea8b85",
            "447d3cc9dac791a2",
            "21f4e96b26230c30",
            "0504d7acd6810522",
            "70091da2e4b669c1",
            "898dd84e912849f7",
            "b45e53e0bd944b43",
            "e00ec6d70ce9ed4e",
            "7ca49c9b3babbf11",
            "2c85ae767fb7b15d",
            "fa96932f13cc3d89",
            "14f23434a23cdae7",
            "7952a4df8f4bb6a4",
            "36af78d3bdf6f143",
            "e424761f7ba242f0",
            "24db277c53bd7477",
            "92735e048f2071c3",
            "346ec007b697e9b4"
        ],
        "x": 28,
        "y": 19,
        "w": 2444,
        "h": 1608
    },
    {
        "id": "ba2e021eef1322ea",
        "type": "comment",
        "z": "fbda6ab16491b918",
        "g": "296274a0d2a6c675",
        "name": "VERSION 2.1.3",
        "info": "Version 2.1.3: 2024-05-15\n- Added more queue data to ignored list for cleanup\n- Added count of currently skipped objects in print\n\n===\nVersion 2.1.2: 2024-04-27\n- Store subtask_id's and print name/filenames for up to 3 days to add extra checks in adv flow\n- Added control for multiple print-options dependign on what's supported \n- Added future fix for missing print start time and possibly workaround for missing in P1 series\n\n===\nVersion 2.1.1: 2024-04-10\n- Added baseline speed_percent sensor\n- Added custom speed percent control\n  - Can adjust a custom speed percent modifier from 30 to 180%.\n    - I initially had down to 10%, but values below 50 and above 166 tend to get weird and not easy to extrapolate.\n    - 30-50 was okay in testing, above 166 not worth it but 180 seemed \"okay\" enough.\n    - Done in steps of 2, as even numbers do math better\n  - Will override speed modes\n  - Setting speed mode will override custom value\n  - Custom values may get rounded off to a slightly different percentage by printer (usually +-3ish)\n  - If you match an exact speed percentage to a preset, it will instead call setting the preset, as values calculated are slightly different.\n  - Thanks Jon!\n- Add retaining for AMS ID's so dashboard yamls can always display them\n- Fixed bed/nozzle set-target options from not having proper state linking to actual target temps\n- More icon changes\n- Made print preview image *only* exist if user has adv flow. Dashboard YAML now has it as conditional if available\n- Added version check. It will only check basic and advanced flows (not bedmesh).\n  - Sensors added for flow versions and flow status.\n\n===\nVersion 2.1.0: 2024-03-13\n- Add support for newer style of HMS errors\n- X1Plus CFW info compatibility\n- Reorganise and reduce MQTT subscriptions. Should help optimize flow a bit more.\n- Made some state values retained and stored in flow\n- Added an optional setting (default false) to allow sending arbitrary gcode to the printer\n  - AT YOUR OWN RISK\n  - To enable, go to \"Set Flow Properties\" and set \"allow_gcode_control\" to true.\n  - This will create a text input sensor called \"gcode command\" in HA, enter in your gcode command here\n  - Then, after it updates (give it a second or two), call the service or press the button \"send gcode\"\n  - Highly recommend to set the gcode_command text to empty when done in your automation or other\n\n===\nVersion 2.0.11: 2024-01-20\n- Added Uptime sensor. counts updatime since nodered deploy/connected to printer.\n- Converted start and end time to proper timestamp sensors!\n- Misc fixes, typos\n\n===\nVersion 2.0.10: 2023-12-30\n- Updated filament dictionary\n- Added A1 support\n- Added Loop-Reconnect logic for cloud mqtt connections\n- Misc edits\n\n===\nVersion 2.0.9: 2023-12-11\n- Added door sensor for X1 series (new firmware only)\n- Added new stages\n- Added some new sensor values found from printer\n\n===\nVersion 2.0.8: 2023-11-05\n- Added 10 new stages from Bambulabs\n- Added sensor for whether the printer is connected to network via wired ethernet or wireless\n- Added sensor for how the printer is homed\n - None, X, Y, Z, XY, XZ, YZ, XYZ\n- Added SSDP*\n - If this does not work for you, you may need to open ports 2021 and 1990 from your nodered instance to the host machine. This will depend on firewalls, network type, deployment type etc. It is non-critical at this stage though.\n - This is *not* used for discovery, but rather to augment existing data\n - For example, getting IP address, Real model info, Series info, Dev name, etc.\n - This unfortunately does not make it possible for me to make a single flow work for multiple printers, as the mqtt nodes for both the printer in/out and homeassistant in can only be to one IP at a time.\n   - There might be some possible way, but it'll be in the far future\n- Added chamber target temperature setting WIP, waiting for X1E\n- Added target temps as standalone sensors, to avoid people relying on attributes for automations\n- Added new diagnostic sensors\n- Experimental A1 Mini support\n- Experimental X1E support\n\n===\nVersion 2.0.7: 2023-10-06\n- Misc fixes and version sync for adv flow\n\n===\nVersion 2.0.6: 2023-09-19\n- Misc fixes and code cleanup\n- Parity for Adv flow\n\n===\nVersion 2.0.5: 2023-09-11\n- Fix for start time being invalid for a few seconds\n- Fixed method to initiate a pushall request on print start\n===\nVersion 2.0.4: 2023-09-09\n\n- Misc bug fixes (minor)\n- Added parsing for AMS Status and AMS RFID Status\n- Added debug capability for full print message if set to temperature\n- Logic to help support plate id for advanced flow in edge case of P1 series not working\n\n===\nVersion 2.0.3: 2023-08-20\n- Added plate_name sensor to support advanced flow changes and P1 series\n\n===\nVersion 2.0.2: 2023-08-19\n- Fixed several bugs regarding start time\n- Fixed issues regarding print real Action\n- Fixed minor bugs surrounding HMS errors not resetting to 0\n- Changed HMS error attributes format\n- Separated HMS notifications to be separate sensors per severity level (unknown, info, common, and then serious and fatal). Existing automations will have the \"sum\" of all HMS messages as expected before.\n- Provided failsafe for if the PING command is killed for unknown reasons resulting in it not being \"reachable\", when ping next succeeds it will shortly force a reset - MQTT stays connected during this, so only a momentary notice of \"offline\". If you have any automations depending on the printer suddenly going offline, please make sure it's offline for at least 60 seconds continuously to be sure.\n- Fixed bug where changing or setting fan speeds was not working anymore\n- Fixed HMS description lookup\n\n===\nVersion 2.0.1: 2023-08-07\n- Minor bug fixes for Set Nozzle/Bed Temperature not working\n- Bug fix for nozzle or bed temp sometimes being unavailable when a target temperature is set\n\n===\nVersion 2.0.0: 2023-08-06\n- Reset version - Very soon it will be moved from gists into a repository instead, with its own github pages to configure off of my site if desired.\n- Some cleanup\n- Added a \"State Change\" select - THIS DOES NOT LET YOU CHANGE STATE. It is purely to auto add the device triggers for print stage, since MQTT Device Trigger does not let me supply a list of values for a custom one.\n    - Note: Stage is very unreliable now with recent firmware and should not be depended on for automations. It is left for older firmwares or if BBL makes it reliable again.\n    - If you want an automation to turn off lights during calibration steps, make it look for print status = RUNNING and layer = 0. Once layer = 1 or higher, it is equivalent to \"printing\" stage, but as 0 it is equiv to any calibration stage\n- Did the same for a \"Print Status Change\" select. Setting an option for it does nothing! Just used for automation triggers with prefilled values.\n- Added button to force FTP fetch if exists in flow\n- Added more error handling regarding MQTT connections (Printer + Your output such as HA). Separated into connection of MQTT to printer and if printer ip is reachable on network via ping. This should present any issues of either MQTT being disconnected when both are online as it will retry on several timers now - unless your IPs have changed.\n- Added some additional controls for toggling video (not timelapse!!!) (only when camera exists)\n- Added Parsing for Print-Real_Action as Print Action. This uses the same IDs as current stage, however it's limited to just stages during printing, such as printing, pause, etc. I also manually inject idle if stg_cur comes back as idle (this is the only reliable stg_cur btw)\n- Added Camera Resolution setting - will only show up after some camera messages populate in. If it shows up but as unavailable, wait 5 minutes or press the reset filter button.\n- Added a few flow-based values to override certain settings based on received data - necessary for new firmwares.\n- Added a bunch of warning and error messages depending on present flows, invalid stuff, etc. Some are ignorable and will be prefixed as [Ignorable]. Please ignore these if you understand the context a bit.\n\n===\nRev 48: 2023-05-01\n- Changed the p1p cloud mqtt connection, even though it should not ever be used except for one older firmware\n\n===\nRev 46/47: 2023-05-01\n- Removing MQTT configs to be external nodes passing in, so importing multiple flows and updating are easier\n- Added a reconnect for when printer comes online with new mqtt flow. Shouldn't be necessary but added as a backup\n- When HA connects in MQTT now, it will reset the filter so no more waiting 5m on setup. Hopefully\n\n===\nRev 45: 2023-04-29\n- Added Filament Unload button which runs the built in unload procedure\n\n===\nRev 42: 2023-04-27\n- Added sensor for storing the last Pressure Advance value from LIDAR calibration for 24 hours\n\n===\nRev 40/41: 2023-04-27\n- Whoops forgot to change this for 40\n- Added new button to \"clear\" external spool\n\n===\nRev 39: 2023-04-26\n- Add support for plate_type sensor (only filled out by advanced flow with FTP)\n- Support for newest firmware release of X1C 01.05.01.00 (20230426)\n- VT_Tray already implemented for P1P, but renamed to External Spool now.\n\n===\nRev 36: 2023-04-07\n- Changed logic of the global connected status to be ping-based\nEvery 30s we will ping the printer to check if it's online or not.\nThis is because the MQTT will be online if P1P cloud mode, even if printer is not.\n\n\n===\nRev 35: 2023-04-05\n- Added in workaround for allowing P1P to connect using Cloud mode\nThis requires an additional setup flow to set a global attribute\nAnd requires a local flow boolean for P1P_CLOUD_MODE\n\n====\nRev 34: 2023-03-14\n- Added fan speed controls for Chamber, Part and Aux fans.\n- Heatbreak fan is read only currently.\n\n====\nRev 33: 2023-03-11\n\n- Fixed EndTime continuing to increment after print ended\n- In progress but not yet activated placeholders for camera entities\n\n====\nRev 31: 2023-03-05\n\n- Added default icons to some more sensors\n- Added Number Boxes to set Bed and Nozzle Temps within ranges (0-100 bed, 0-300 nozzle)\n- General update for syncing\n\n====\nRev 30: 2023-02-25\n\nChanged a bit how filament fetching works.\nNow it will be unknown, none or the sensor unavailable depending on \"how\" it can't get the filament type in use.\nThis is such that the advanced flow fetching filament type can work better\n(i.e., when it's unavailable here, then filament fetch will work)\n\nIT IS OKAY if the filament sensor is not working fully, that's expected due to limitations.\n\n====\nRev 29: 2023-02-23\n\nFixed: Issue with a junction not being in the group of the last update\n\nAdded: \n    - Button to turn on and off nozzle light.\n\n====\nRev 28: 2023-02-23\n\nAdded:\n    - New Filament Sensor. This will attempt to get the *type* of filament in use. Really only works for AMS users. Don't worry if it doesn't show up or is unavailable, it just means it can't make a default one and is not considered an error - I just have no way of handling / finding out.\n    - New buttons to turn on or off the Logo Light via GCODE - these are buttons and not a light or switch, as I cannot poll for the light status.\n I also from now on will not be including the flow page in the exports, but JUST the group, this should make importing easier for replacement.\n\n",
        "x": 200,
        "y": 60,
        "wires": []
    },
    {
        "id": "7258bcda05ea8b85",
        "type": "group",
        "z": "fbda6ab16491b918",
        "g": "296274a0d2a6c675",
        "name": "Printer - General",
        "style": {
            "label": true
        },
        "nodes": [
            "d6e7275cb2c7b336",
            "c31c1f5fc2e64beb",
            "09172d3dc9b72460",
            "ac531818fd0fbec6",
            "8cfb8a0c57391793",
            "17405af3645b5232",
            "83f3f99dcfc9f2d6",
            "f3f51398b681bc7b",
            "c2cdcfe94255e433",
            "a48855ea3c93f55f",
            "873a474de079afc2"
        ],
        "x": 1014,
        "y": 379,
        "w": 592,
        "h": 202
    },
    {
        "id": "d6e7275cb2c7b336",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "7258bcda05ea8b85",
        "name": "Printer - General - {PRINTER_MODEL} {PRINTER_NAME}",
        "links": [],
        "x": 1065,
        "y": 420,
        "wires": [
            [
                "c31c1f5fc2e64beb"
            ]
        ]
    },
    {
        "id": "c31c1f5fc2e64beb",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "7258bcda05ea8b85",
        "name": "Known Filament Translator",
        "func": "var filament_library = flow.get(\"bambu_filament_library\");\nif(filament_library != undefined) {\n    if (msg.payload.print.ams !== undefined && msg.payload.print.ams.ams != undefined) {\n        for (var ams of msg.payload.print.ams.ams) {\n            for (var tray of ams.tray) {\n                if (tray.tray_info_idx !== undefined && tray.tray_info_idx !== \"\") {\n                    if(filament_library.hasOwnProperty(tray.tray_info_idx)) {\n                        var match = filament_library[tray.tray_info_idx];\n                        tray.tray_type = match.tray_type;\n                        tray.tray_sub_brands = match.tray_sub_brands;\n                        if (tray.tray_diameter == \"0.00\") {\n                            tray.tray_diameter = \"1.75\";\n                        }\n                    }\n                }\n            }\n        }\n    }\n    if(msg.payload.print.vt_tray != undefined) {\n        if (msg.payload.print.vt_tray.tray_info_idx != undefined) {\n            if (filament_library.hasOwnProperty(msg.payload.print.vt_tray.tray_info_idx)) {\n                var match = filament_library[msg.payload.print.vt_tray.tray_info_idx];\n                msg.payload.print.vt_tray.tray_type = match.tray_type;\n                msg.payload.print.vt_tray.tray_sub_brands = match.tray_sub_brands;\n                if (msg.payload.print.vt_tray.tray_diameter == \"0.00\") {\n                    msg.payload.print.vt_tray.tray_diameter = \"1.75\";\n                }\n                if(msg.payload.print.vt_tray.tray_type == undefined) {\n                    msg.payload.print.vt_tray.tray_type = \"Empty\";\n                }\n            }\n        }\n    }\n\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 420,
        "wires": [
            [
                "09172d3dc9b72460"
            ]
        ]
    },
    {
        "id": "09172d3dc9b72460",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "7258bcda05ea8b85",
        "name": "Fan Speed Translator",
        "func": "function parsePercent(speed) {\n    let percent = (parseInt(speed) / 15) * 100;\n    return Math.ceil(percent / 10) * 10;\n}\n\n// Overwrite\nif(msg.payload.print.big_fan1_speed != undefined) {\n    msg.payload.print.big_fan1_speed = parsePercent(msg.payload.print.big_fan1_speed);\n}\nif (msg.payload.print.big_fan2_speed != undefined) {\n    msg.payload.print.big_fan2_speed = parsePercent(msg.payload.print.big_fan2_speed);\n}\n\nif (msg.payload.print.heatbreak_fan_speed != undefined) {\n    msg.payload.print.heatbreak_fan_speed = parsePercent(msg.payload.print.heatbreak_fan_speed);\n}\n\nif (msg.payload.print.cooling_fan_speed != undefined) {\n    msg.payload.print.cooling_fan_speed = parsePercent(msg.payload.print.cooling_fan_speed);\n}\n\nnode.send(msg)",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 420,
        "wires": [
            [
                "ac531818fd0fbec6"
            ]
        ]
    },
    {
        "id": "ac531818fd0fbec6",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "7258bcda05ea8b85",
        "name": "Set Tray Statuses",
        "func": "let ams_in_use = false;\nlet virtual_in_use = false;\nlet used_id = undefined;\nif (msg.payload.print.ams != undefined && msg.payload.print.ams.tray_now !== undefined) {\n    used_id = parseInt(msg.payload.print.ams.tray_now);\n    flow.set(\"used_tray_id\", used_id);\n    if (used_id == 255 || used_id < 0) {\n        flow.set(\"current_filament\", \"\");\n    }\n    else if (used_id == 254) {\n        ams_in_use = false;\n        virtual_in_use = true;\n    }\n    if (msg.payload.print.ams.ams != undefined)\n    {\n        for (var ams of msg.payload.print.ams.ams) {\n            for (var tray of ams.tray) {\n                if (tray.tray_type == undefined || tray.tray_type == \"\") {\n                    tray.tray_type = \"Empty\";\n                    tray.tray_color = \"#808080\";\n                } \n                else {\n                    tray.tray_color = \"#\" + tray.tray_color;\n                }\n\n                tray.in_use = false;\n\n                var id = parseInt(tray.id);\n\n                if (used_id == (id + 4* parseInt(ams.id))) {\n                    tray.in_use = true;\n                    ams_in_use = true;\n                    virtual_in_use = false;\n                    if(tray.tray_type != \"Empty\") {\n                        //msg.payload.print.filament = tray.tray_type;\n                        flow.set(\"current_filament\", tray.tray_type);\n                    }\n                    else {\n                        flow.set(\"current_filament\", \"\");\n                    }\n                }\n\n                tray.ams_id = ams.id;\n            }\n        }\n    }\n}\nif(flow.get(\"used_tray_id\") == 254) {\n    virtual_in_use = true;\n    ams_in_use = false;\n}\nif(msg.payload.print.vt_tray != undefined) {\n    //msg.payload.print.filament = \"Unknown\";\n    if(msg.payload.print.vt_tray.tray_type != undefined) {\n        msg.payload.print.vt_tray.type = msg.payload.print.vt_tray.tray_type;\n        delete msg.payload.print.vt_tray.tray_type;\n        msg.payload.print.filament = msg.payload.print.vt_tray.type;\n        if (msg.payload.print.vt_tray.tray_color != undefined) {\n            msg.payload.print.vt_tray.color = msg.payload.print.vt_tray.tray_color;\n            delete msg.payload.print.vt_tray.tray_color;\n        }\n        if (msg.payload.print.vt_tray.color == undefined || msg.payload.print.vt_tray.color == \"\") {\n            msg.payload.print.vt_tray.color  = \"#808080\";\n        }\n        if (msg.payload.print.vt_tray.type == undefined || msg.payload.print.vt_tray.type == \"\") {\n            msg.payload.print.vt_tray.type = \"Empty\";\n            msg.payload.print.vt_tray.color = \"#808080\";\n        }\n\n        //msg.payload.print.filament = msg.payload.print.vt_tray.type;\n        //if(msg.payload.print.filament == \"Empty\") {\n            //msg.payload.print.filament = \"Unknown\";\n        //}\n\n        if (msg.payload.print.vt_tray.color != undefined && !msg.payload.print.vt_tray.color.startsWith(\"#\")) {\n            msg.payload.print.vt_tray.color = \"#\" + msg.payload.print.vt_tray.color;\n        }\n    }\n    if(!ams_in_use && virtual_in_use) {\n        msg.payload.print.vt_tray.in_use = true;\n        if (msg.payload.print.vt_tray.type != undefined && msg.payload.print.vt_tray.type != \"Empty\") { \n            flow.set(\"current_filament\", msg.payload.print.vt_tray.type );\n        }\n        else if (msg.payload.print.vt_tray.type != undefined ) {\n            flow.set(\"current_filament\", \"\");\n        }\n    }\n\n}\n\n/*if(msg.payload.print.filament != undefined && msg.payload.print.filament == \"Unknown\") {\n    delete msg.payload.print.filament;\n}*/\n/*if(msg.payload.print.gcode_state != undefined && \n    msg.payload.print.gcode_state == \"RUNNING\" && \n    msg.payload.print.filament != undefined\n    && msg.payload.print.filament == \"None\") {\n        delete msg.payload.print.filament;\n        //msg.payload.print.filament = \"Unknown\";\n}*/\n\nif (msg.payload.print != undefined) {\n    if(flow.get(\"current_filament\") == \"\") {\n        flow.set(\"current_filament\", \"None\");\n    }\n    msg.payload.print.filament = flow.get(\"current_filament\");\n}\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 460,
        "wires": [
            [
                "8cfb8a0c57391793"
            ]
        ]
    },
    {
        "id": "8cfb8a0c57391793",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "7258bcda05ea8b85",
        "name": "Organize Lights",
        "func": "var lights = {};\nif (msg.payload.print.lights_report !== undefined) {\n    for (var element of msg.payload.print.lights_report) {\n        lights[element.node] = element.mode;\n    }\n    msg.payload.print.lights = lights\n}\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 460,
        "wires": [
            [
                "17405af3645b5232"
            ]
        ]
    },
    {
        "id": "17405af3645b5232",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "7258bcda05ea8b85",
        "name": "Stage Parser",
        "func": "\nlet parseAction = flow.get(\"stageParser\");\n\nif(msg.payload.print.stg_cur != undefined){\n    var current_action = parseAction(msg.payload.print.stg_cur);\n    flow.set(\"stage_override\", msg.payload.print.stg_cur);\n    msg.payload.print.stg_cur = current_action;\n    if (current_action == \"Idle\" && msg.payload.print.print_real_action == undefined) {\n        msg.payload.print.print_action = current_action;\n    }\n}\nvar translated_stages = [];\nif(msg.payload.print.stg  != undefined) {\n    for (var stage of msg.payload.print.stg) {\n        translated_stages.push(parseAction(stage))\n    }\n    msg.payload.print.stg = translated_stages;\n}\n\nif (msg.payload.print.print_real_action != undefined) {\n    if (flow.get(\"stage_override\") <= -1 && msg.payload.print.print_real_action <=0) {\n        msg.payload.print.print_real_action = flow.get(\"stage_override\") ;\n    }\n    msg.payload.print.print_action = parseAction(msg.payload.print.print_real_action);\n}\n\nnode.send(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 460,
        "wires": [
            [
                "83f3f99dcfc9f2d6"
            ]
        ]
    },
    {
        "id": "83f3f99dcfc9f2d6",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "7258bcda05ea8b85",
        "name": "Convert HMS Codes",
        "func": "/*function DecimalHexTwosComplement(decimal) {\n    var size = 8;\n    var hexadecimal;\n    if (decimal >= 0) {\n        hexadecimal = decimal.toString(16);\n\n        while ((hexadecimal.length % size) != 0) {\n            hexadecimal = \"\" + 0 + hexadecimal;\n        }\n\n        return hexadecimal;\n    } else {\n        hexadecimal = Math.abs(decimal).toString(16);\n        while ((hexadecimal.length % size) != 0) {\n            hexadecimal = \"\" + 0 + hexadecimal;\n        }\n\n        var output = '';\n        for (var i = 0; i < hexadecimal.length; i++) {\n            output += (0x0F - parseInt(hexadecimal[i], 16)).toString(16);\n        }\n\n        output = (0x01 + parseInt(output, 16)).toString(16);\n        return output;\n    }\n}*/\nlet longcode_parser = flow.get(\"hms_longcode_parser\");\n\nlet hms_data = {\n    \"HMS_Info\": [],\n    \"HMS_Common\": [],\n    \"HMS_Serious\": [],\n    \"HMS_Fatal\": [],\n    \"HMS_Unknown\": []\n};\n\n\nlet template = []\nlet count = 0;\nlet hms_data_dictionary = undefined;\nif(msg.payload.print.hms != undefined){\n    for (var hms_code of msg.payload.print.hms) {\n        if (hms_code.attr == undefined || hms_code.code == undefined || hms_code.attr == \"\" || hms_code.code == \"\") {\n            continue;\n        }\n        var longcode = longcode_parser(hms_code.attr, hms_code.code);\n        /*var attr = \"\";\n        if(hms_code.attr != undefined && hms_code.attr != \"\") {\n            attr=DecimalHexTwosComplement(hms_code.attr);\n        }\n        var code = \"\";\n        if(hms_code.code != undefined && hms_code.code != \"\") {\n            code = DecimalHexTwosComplement(hms_code.code);\n        }*/\n    \n        let full_code = longcode.replace(/(.{4})/g, \"$1_\");\n        full_code = full_code.substring(0, full_code.length - 1);\n        let url = \"https://wiki.bambulab.com/en/x1/troubleshooting/hmscode/\"+full_code;\n\n        let description = \"\";\n        if (flow.get(\"hms_data\") != undefined && hms_data_dictionary == undefined) {\n            hms_data_dictionary = flow.get(\"hms_data\");\n        };\n        \n        if (hms_data_dictionary.hms[full_code.toLowerCase().replaceAll(\"_\", \"\")] != undefined) {\n            description = hms_data_dictionary.hms[full_code.toLowerCase().replaceAll(\"_\", \"\")];\n        }\n        else if (hms_data_dictionary.error[full_code.toLowerCase().replaceAll(\"_\", \"\")] != undefined) {\n            description = hms_data_dictionary.error[full_code.toLowerCase().replaceAll(\"_\", \"\")];\n        }\n\n        let module = \"\"; let type = \"\";\n        if(flow.get(\"hms_module_parser\") != undefined) {\n            let module_parser = flow.get(\"hms_module_parser\");\n            module = module_parser(parseInt(hms_code.attr));        \n        }\n        if (flow.get(\"hms_level_parser\") != undefined) {\n            let level_parser = flow.get(\"hms_level_parser\");\n            type = level_parser(parseInt(hms_code.code));\n        }\n        if (type == \"\") {\n            type = \"Unknown\";\n        }\n\n        let d = { \"code\": \"HMS_\" + full_code, \"url\": url, \"description\": description, \"short_code\": full_code.replaceAll(\"_\", \"\"),\n            \"module\": module, \"type\": type };\n        \n        hms_data[\"HMS_\"+ type].push(d);\n        count = count + 1;\n        //template.push(d);\n    }\n   // msg.payload.print.hms = hms_data;\n    delete msg.payload.print.hms;\n    msg.payload.print[\"HMS_Unknown\"] = hms_data[\"HMS_Unknown\"];\n    msg.payload.print[\"HMS_Info\"] = hms_data[\"HMS_Info\"];\n    msg.payload.print[\"HMS_Common\"] = hms_data[\"HMS_Common\"];\n    msg.payload.print[\"HMS_Serious\"] = hms_data[\"HMS_Serious\"];\n    msg.payload.print[\"HMS_Fatal\"] = hms_data[\"HMS_Fatal\"];\n    msg.payload.print[\"HMS_Notifications\"] = {\n        \"Unknown\": hms_data[\"HMS_Unknown\"].length,\n        \"Info\": hms_data[\"HMS_Info\"].length,\n        \"Common\": hms_data[\"HMS_Common\"].length,\n        \"Serious\": hms_data[\"HMS_Serious\"].length,\n        \"Fatal\": hms_data[\"HMS_Fatal\"].length,\n        \"Total\": count\n    };\n   //msg.payload.print.hms = template;\n}\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 500,
        "wires": [
            [
                "f3f51398b681bc7b"
            ]
        ]
    },
    {
        "id": "f3f51398b681bc7b",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "7258bcda05ea8b85",
        "name": "Translate Speed Profile",
        "func": "var spd = {}\nif(msg.payload.print.spd_mag != undefined) {\n    spd.modifier = msg.payload.print.spd_mag;\n    msg.payload.print.speed_percent = spd.modifier;\n    if (msg.payload.print.spd_lvl == undefined) {\n        switch (parseInt(spd.modifier)) {\n            case 50:\n                spd.profile = \"Silent\";\n                break;\n            case 100:\n                spd.profile = \"Standard\";\n                break;\n            case 124:\n                spd.profile = \"Sport\";\n                break;\n            case 166:\n                spd.profile = \"Ludicrous\";\n                break;\n            default:\n                spd.profile = \"Custom\";\n                break;\n        }\n    }\n    // need to see if both spd attributes come in always with each other in optimized mode / A1 / P1 series\n}\nif (msg.payload.print.spd_lvl !== undefined) {\n    spd.level = msg.payload.print.spd_lvl;\n    switch (msg.payload.print.spd_lvl) {\n        case 1:\n            spd.profile = \"Silent\";\n            break;\n        case 2:\n            spd.profile = \"Standard\";\n            break;\n        case 3:\n            spd.profile = \"Sport\";\n            break;\n        case 4:\n            spd.profile = \"Ludicrous\";\n            break;\n        default:\n            spd.profile = \"Undefined\";\n            break;\n    }\n    if (msg.payload.print.spd != undefined) {\n        delete msg.payload.print.spd;\n    }\n\n    if (spd.modifier != undefined && parseInt(spd.modifier) != 50\n        && parseInt(spd.modifier) != 100 && parseInt(spd.modifier) != 124 && parseInt(spd.modifier) != 166) {\n        spd.profile = \"Custom\";\n    }\n\n    msg.payload.print.speed = spd;\n\n}\n\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 500,
        "wires": [
            [
                "c2cdcfe94255e433"
            ]
        ]
    },
    {
        "id": "c2cdcfe94255e433",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "7258bcda05ea8b85",
        "name": "Primary Organize",
        "func": "if(msg.payload.print != undefined) {\n    msg.payload.printer = msg.payload.print;\n    delete msg.payload.print;\n}\nif (msg.payload.printer != undefined) {\n    if(msg.payload.printer.ams != undefined) {\n        msg.payload.ams = msg.payload.printer.ams;\n        delete msg.payload.printer.ams;\n\n        if(msg.payload.ams.ams != undefined) {\n            flow.set(\"ams_count\", msg.payload.ams.ams.length);\n        }\n    }\n    if(msg.payload.printer.s_obj != undefined) {\n        msg.payload.printer['skipped_objects'] = msg.payload.printer.s_obj.length;\n        delete msg.payload.printer.s_obj;\n    }\n    if (msg.payload.printer.lights_report != undefined) {\n        delete msg.payload.printer.lights_report;\n    }\n    if (msg.payload.printer.spd_lvl != undefined) {\n        delete msg.payload.printer.spd_lvl;\n    }\n    if (msg.payload.printer.spd_mag != undefined) {\n        delete msg.payload.printer.spd_mag;\n    }\n    if (msg.payload.printer.xcam != undefined) {\n        if (msg.payload.printer.xcam['first_layer_inspector'] != undefined) {\n            msg.payload.printer['first_layer_inspection'] = msg.payload.printer.xcam['first_layer_inspector'] ? \"ON\" : \"OFF\";\n        }\n        if (msg.payload.printer.xcam['buildplate_marker_detector'] != undefined) {\n            msg.payload.printer['buildplate_marker_detection'] = msg.payload.printer.xcam['buildplate_marker_detector'] ? \"ON\" : \"OFF\";\n        }\n    }\n    if (msg.payload.printer.xcam_status != undefined) {\n        if (msg.payload.printer.xcam == undefined) {\n            msg.payload.printer.xcam = {};\n        }\n        msg.payload.printer.xcam.status = msg.payload.printer.xcam_status;\n        delete msg.payload.printer.xcam_status;\n    }\n    if (msg.payload.printer.flag2 != undefined) {\n        let f = parseInt(msg.payload.printer.flag2);\n        let f2func = flow.get(\"flag2Parser\");\n\n        msg.payload.printer['firmware_r'] = f2func(f, \"is_FW_R\");\n        msg.payload.printer['firmware_unlocked'] = f2func(f, \"is_FW_unlocked\");\n        msg.payload.printer['ssh_enabled'] = f2func(f, \"is_SSH_started\");\n        delete msg.payload.printer.flag2;/////////////////////////////////////////////////////////////////\n    }\n    if(msg.payload.printer.home_flag != undefined) {\n        msg.payload.printer[\"is_220_voltage\"] = (((msg.payload.printer.home_flag >> 3) & 0x1) != 0);\n        flow.set(\"is_220_voltage\", msg.payload.printer[\"is_220_voltage\"]);\n\n        msg.payload.printer['network_connection'] = (((msg.payload.printer.home_flag >> 18) & 0x1) != 0 ? \"Wired\" : \"Wireless\");\n\n        let supports_tangle_detect = ((msg.payload.printer.home_flag >> 19) & 0x01) != 0;\n        let filament_tangle_detection = (supports_tangle_detect && ((msg.payload.printer.home_flag >> 20) & 0x1) != 0);\n        msg.payload.printer['filament_tangle_detection'] = filament_tangle_detection ? \"ON\" : \"OFF\";\n        if (!supports_tangle_detect) {\n            msg.payload.printer['filament_tangle_detection'] = \"unsupported\";\n        }\n\n        let ams_track_remaining_enabled = (((msg.payload.printer.home_flag >> 7) & 0x1) != 0);\n        msg.payload.printer['ams_track_filament_enabled'] = ams_track_remaining_enabled;\n        let ams_autoswitch_filament = (((msg.payload.printer.home_flag >> 10) & 0x1) != 0);\n        if (flow.get(\"ams_count\") > 0) {\n            msg.payload.printer['ams_autoswitch_filament_enabled'] = ams_autoswitch_filament ? \"ON\" : \"OFF\";//////////\n        }\n        else {\n            msg.payload.printer['ams_autoswitch_filament_enabled'] = \"unsupported\";\n        }\n\n        let nozzle_blob_detect = (((msg.payload.printer.home_flag >> 25) & 0x1) != 0);\n        let nozzle_blob_enabled = (((msg.payload.printer.home_flag >> 24) & 0x1) != 0);\n        let air_print_detect = (((msg.payload.printer.home_flag >> 29) & 0x1) != 0);\n        let air_print_enabled = (((msg.payload.printer.home_flag >> 28) & 0x1) != 0);\n\n        \n        let prompt_sound_enabled = (((msg.payload.printer.home_flag >> 17) & 0x1) != 0);\n        // TODO\n        \n        let support_user_preset = (((msg.payload.printer.home_flag >> 22) & 0x1) != 0);\n        msg.payload.printer['user_presets_supported'] = support_user_preset;\n\n        let auto_recovery_enabled = (((msg.payload.printer.home_flag >> 4) & 0x1) != 0);\n        msg.payload.printer[\"auto_recovery\"] = auto_recovery_enabled ? \"ON\" : \"OFF\";\n\n\n        if (nozzle_blob_detect) {\n            flow.set(\"nozzle_blob_detection\", true);\n            msg.payload.printer[\"nozzle_blob_detection\"] = nozzle_blob_enabled ? \"ON\" : \"OFF\";\n        }\n        else {\n            flow.set(\"nozzle_blob_detection\", false);\n            msg.payload.printer[\"nozzle_blob_detection\"] = \"unsupported\";\n        }\n\n        if (air_print_detect) {\n            flow.set(\"air_print_detection\", true);\n            msg.payload.printer[\"air_print_detection\"] = air_print_enabled ? \"ON\" : \"OFF\";\n        }\n        else {\n            flow.set(\"air_print_detection\", false);\n            msg.payload.printer[\"air_print_detection\"] = \"unsupported\";\n        }\n\n        msg.payload.printer['Homed'] = \"None\";\n        msg.payload.printer[\"door\"] = ((msg.payload.printer.home_flag >> 23) & 0x1) == 1 ? \"open\" : \"closed\";\n        msg.payload.printer[\"supports_motor_noise_calibration\"] = ((msg.payload.printer.home_flag >> 21) & 0x1) == 1;\n        if (msg.payload.printer.home_flag < 0) {\n            msg.payload.printer['Homed'] = \"XYZ\";\n        }\n        else {\n            let x = \"\";\n            if ((msg.payload.printer.home_flag & 1) == 1) {\n                x += \"X\";\n            }\n            if ((msg.payload.printer.home_flag >> 1 & 1) == 1) {\n                x += \"Y\";\n            }\n            if ((msg.payload.printer.home_flag >> 2 & 1) == 1) {\n                x += \"Z\";\n            }\n            if (x == \"\") {\n                x = \"None\";\n            }\n            msg.payload.printer['Homed'] = x;\n        }\n\n        if (flow.get(\"model\") == \"P1P\") {\n            let supported_upgrade_kit = (((msg.payload.printer.home_flag >> 27) & 0x1) != 0);\n            let has_upgrade_kit = (((msg.payload.printer.home_flag >> 26) & 0x1) != 0);\n\n            msg.payload.printer[\"supports_upgrade_kit\"] = supported_upgrade_kit;\n\n            msg.payload.printer[\"upgrade_kit\"] = has_upgrade_kit ? \"Installed\" : \"None\";\n\n        }\n\n        delete msg.payload.printer.home_flag;\n    }\n\n    if (msg.payload.printer.ipcam != undefined) {\n        if (msg.payload.printer.ipcam.ipcam_dev != undefined) {\n            msg.payload.printer.ipcam.ipcam_dev = msg.payload.printer.ipcam.ipcam_dev == \"1\" ? \"Present\" : \"No Camera\";\n            flow.set(\"has_ipcam\", (msg.payload.printer.ipcam.ipcam_dev == \"Present\"));\n            \n        }\n        if (msg.payload.printer.ipcam.timelapse != undefined) {\n            //node.warn(msg.payload.printer.ipcam.timelapse);\n            msg.payload.printer.ipcam.timelapse = msg.payload.printer.ipcam.timelapse == \"disable\" ? \"OFF\" : \"ON\";\n            msg.payload.printer[\"timelapse_state\"] = msg.payload.printer.ipcam.timelapse;\n        }\n        if (msg.payload.printer.ipcam.ipcam_record != undefined) {\n            msg.payload.printer.ipcam.ipcam_record = msg.payload.printer.ipcam.ipcam_record == \"disable\" ? \"OFF\" : \"ON\";\n            msg.payload.printer[\"recording_state\"] = msg.payload.printer.ipcam.ipcam_record;\n        }\n        if(msg.payload.printer.ipcam.resolution != undefined) {\n            msg.payload.printer.camera_resolution = msg.payload.printer.ipcam.resolution;\n        }\n    }\n    msg.payload.printer.ams_count = flow.get(\"ams_count\");\n}\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 540,
        "wires": [
            [
                "a48855ea3c93f55f"
            ]
        ]
    },
    {
        "id": "a48855ea3c93f55f",
        "type": "split",
        "z": "fbda6ab16491b918",
        "g": "7258bcda05ea8b85",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 1310,
        "y": 540,
        "wires": [
            [
                "873a474de079afc2"
            ]
        ]
    },
    {
        "id": "873a474de079afc2",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "7258bcda05ea8b85",
        "name": "Printer - General - Link Out",
        "mode": "return",
        "links": [],
        "x": 1395,
        "y": 540,
        "wires": []
    },
    {
        "id": "447d3cc9dac791a2",
        "type": "group",
        "z": "fbda6ab16491b918",
        "g": "296274a0d2a6c675",
        "name": "Printer - Printer Parse",
        "style": {
            "label": true
        },
        "nodes": [
            "2e55e7e1a4b5a983",
            "95c79df7110fb57f",
            "127f8bb0e99ebad7",
            "340c8535d2915d62",
            "c841c1f09861c5f1",
            "cc7e08e05b3ccbec",
            "7845a97e0fd1ec66",
            "e86fbc789cead23c",
            "f4e108c25c7c719f",
            "a1fa52af73da9754",
            "c2f9532f01947dbc",
            "cebc72399ca0c643",
            "4d91cd893e27bfb3",
            "5bd800dc4e1b4bca",
            "c0391687bc6674d8",
            "e3632543367cde87",
            "36329bf86f291f67",
            "bfd2f9c2fb504f1c",
            "0eb17a59df4f21da",
            "937e5e2dc76777fa"
        ],
        "x": 54,
        "y": 539,
        "w": 742,
        "h": 282
    },
    {
        "id": "2e55e7e1a4b5a983",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "447d3cc9dac791a2",
        "name": "Printer - Printer Parse - Link Out",
        "mode": "return",
        "links": [],
        "x": 755,
        "y": 760,
        "wires": []
    },
    {
        "id": "95c79df7110fb57f",
        "type": "split",
        "z": "fbda6ab16491b918",
        "g": "447d3cc9dac791a2",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 570,
        "y": 760,
        "wires": [
            [
                "2e55e7e1a4b5a983"
            ]
        ]
    },
    {
        "id": "127f8bb0e99ebad7",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "447d3cc9dac791a2",
        "name": "Fix End Time",
        "func": "if(msg.payload.print_start_time == \"Invalid Date\") {\n    delete msg.payload.print_start_time;\n}\nif(msg.payload.print_end_time != undefined && msg.payload.print_end_time != \"N/A\") {\n    if(msg.payload.print_status != undefined) {\n        if(msg.payload.print_status == \"FINISH\" || msg.payload.print_status == \"FAILED\") {\n            delete msg.payload.print_end_time;\n        }\n    }\n}\n\nif (msg.payload.print_start_time != undefined && msg.payload.print_start_epoch != undefined) {\n    node.send(msg);\n}\nelse if (msg.payload.print_start_time == undefined) {\n    node.send(msg);\n}\nelse if (msg.payload.print_start_epoch == undefined && msg.payload.print_start_time != undefined){\n    delete msg.payload.print_start_time;\n    node.send(msg);\n}\nelse {\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 740,
        "wires": [
            [
                "95c79df7110fb57f",
                "0eb17a59df4f21da"
            ]
        ]
    },
    {
        "id": "340c8535d2915d62",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "447d3cc9dac791a2",
        "name": "Reorder Temps + Bed",
        "func": "\nif (msg.payload.chamber_temper != undefined) {\n    if (msg.payload.chamber_temperature == undefined) {\n        msg.payload.chamber_temperature = {};\n    }\n    msg.payload.chamber_temperature.temperature = msg.payload.chamber_temper;\n    delete msg.payload.chamber_temper;\n}\n\nif (msg.payload.ctt != undefined) {\n    msg.payload.chamber_target_temperature = msg.payload.ctt;\n    delete msg.payload.ctt;\n    if (msg.payload.chamber_temperature == undefined) {\n        msg.payload.chamber_temperature = {};\n    }\n    msg.payload.chamber_temperature.target_temperature = msg.payload.chamber_target_temperature;\n    //delete msg.payload.chamber_target_temper;\n    \n}\n\nif (msg.payload.bed_target_temper != undefined) {\n    if (msg.payload.bed_temperature == undefined) {\n        msg.payload.bed_temperature = {};\n    }\n    msg.payload.bed_temperature.target_temperature = msg.payload.bed_target_temper;\n    msg.payload.bed_target_temperature = msg.payload.bed_target_temper;\n    delete msg.payload.bed_target_temper;\n}\nif (msg.payload.bed_temper != undefined) {\n    if (msg.payload.bed_temperature == undefined) {\n        msg.payload.bed_temperature = {};\n    }\n    msg.payload.bed_temperature.temperature = msg.payload.bed_temper;\n    delete msg.payload.bed_temper;\n}\nif (msg.payload.nozzle_temper != undefined) {\n    if (msg.payload.nozzle_temperature == undefined) {\n        msg.payload.nozzle_temperature = {};\n    }\n    msg.payload.nozzle_temperature.temperature = msg.payload.nozzle_temper;\n    delete msg.payload.nozzle_temper;\n}\nif (msg.payload.nozzle_target_temper != undefined) {\n    if (msg.payload.nozzle_temperature == undefined) {\n        msg.payload.nozzle_temperature = {};\n    }\n    msg.payload.nozzle_temperature.target_temperature = msg.payload.nozzle_target_temper;\n    msg.payload.nozzle_target_temperature = msg.payload.nozzle_target_temper;\n    delete msg.payload.nozzle_target_temper;\n}\n\n\nif (msg.payload.big_fan1_speed != undefined) {\n    if(msg.payload.fans == undefined) {\n        msg.payload.fans = {};\n    }\n    msg.payload.fans.big_fan1 = msg.payload.big_fan1_speed;\n    delete msg.payload.big_fan1_speed;\n}\nif (msg.payload.big_fan2_speed != undefined) {\n    if (msg.payload.fans == undefined) {\n        msg.payload.fans = {};\n    }\n    msg.payload.fans.big_fan2 = msg.payload.big_fan2_speed;\n    delete msg.payload.big_fan2_speed;\n}\nif (msg.payload.heatbreak_fan_speed != undefined) {\n    if (msg.payload.fans == undefined) {\n        msg.payload.fans = {};\n    }\n    msg.payload.fans.heatbreak_fan = msg.payload.heatbreak_fan_speed;\n    delete msg.payload.heatbreak_fan_speed;\n}\nif (msg.payload.cooling_fan_speed != undefined) {\n    if (msg.payload.fans == undefined) {\n        msg.payload.fans = {};\n    }\n    msg.payload.fans.cooling_fan = msg.payload.cooling_fan_speed;\n    delete msg.payload.cooling_fan_speed;\n}\n\n\nif (msg.payload.frame_temper != undefined) {\n    if (msg.payload.frame_temperature == undefined) {\n        msg.payload.frame_temperature = {};\n    }\n    msg.payload.frame_temperature.temperature = msg.payload.frame_temper;\n    delete msg.payload.frame_temper;\n}\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 740,
        "wires": [
            [
                "127f8bb0e99ebad7"
            ]
        ]
    },
    {
        "id": "c841c1f09861c5f1",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "447d3cc9dac791a2",
        "name": "Reorder Other",
        "func": "if (msg.payload.stg_cur != undefined) {\n    if(msg.payload.stage == undefined) {\n        msg.payload.stage = {};\n    }\n    msg.payload.stage.current = msg.payload.stg_cur;\n    delete msg.payload.stg_cur;\n}\nif (msg.payload.stg != undefined) {\n    if (msg.payload.stage == undefined) {\n        msg.payload.stage = {};\n    }\n    msg.payload.stage.prev = msg.payload.stg;\n    delete msg.payload.stg;\n}\n\nif (msg.payload.subtask_id != undefined) {\n    if (msg.payload.subtask == undefined) {\n        msg.payload.subtask = {};\n    }\n    msg.payload.subtask.id = msg.payload.subtask_id;\n    delete msg.payload.subtask_id;\n}\n\nif (msg.payload.subtask_name != undefined) {\n    if (msg.payload.subtask == undefined) {\n        msg.payload.subtask = {};\n    }\n    msg.payload.subtask.name = msg.payload.subtask_name;\n    delete msg.payload.subtask_name;\n}\n\nif(msg.payload.lifecycle != undefined) {\n    if(msg.payload.lifecycle == \"engineer\") {\n        msg.payload.firmware_type = \"engineer\";\n    }\n    else if(msg.payload.lifecycle == \"product\") {\n        msg.payload.firmware_type = \"product\";\n    }\n    delete msg.payload.lifecycle;\n}\n\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 700,
        "wires": [
            [
                "340c8535d2915d62"
            ]
        ]
    },
    {
        "id": "cc7e08e05b3ccbec",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "447d3cc9dac791a2",
        "name": "Reorder Print Info",
        "func": "if (msg.payload.gcode_file != undefined) {\n    if(msg.payload.gcode == undefined) {\n        msg.payload.gcode = {};\n    }\n    msg.payload.gcode.file = msg.payload.gcode_file;\n\n    if(msg.payload.gcode_file != \"\") {\n        let plate_name = msg.payload.gcode_file;\n        plate_name = plate_name.replace(\"/data/Metadata/\", \"\")\n        plate_name = plate_name.replace(\"Metadata/\", \"\")\n        plate_name = plate_name.replace(\".gcode\", \"\")\n        plate_name = plate_name.replace(\".3mf\", \"\");\n        plate_name = plate_name.replace(\"Plate \", \"plate_\");\n        plate_name = plate_name.toLowerCase();\n        let match = plate_name.match(/_?(plate_[1-9][0-9]?[0-9]?)/);\n        if (match != undefined && match.length > 1) {\n            plate_name = match[1];\n        }\n        msg.payload.plate_name = plate_name;\n    }\n    else {\n        msg.payload.plate_name = \"\";\n    }\n    delete msg.payload.gcode_file;\n}\n\nif (msg.payload.gcode_file_prepare_percent != undefined) {\n    if (msg.payload.gcode == undefined) {\n        msg.payload.gcode = {};\n    }\n    msg.payload.gcode.gcode_file_prepare_percent = msg.payload.gcode_file_prepare_percent;\n    delete msg.payload.gcode_file_prepare_percent;\n}\n\nif (msg.payload.gcode_start_time != undefined) {\n\n    msg.payload.print_start_time = msg.payload.gcode_start_time;\n    delete msg.payload.gcode_start_time;\n}\n\nif (msg.payload.gcode_end_time != undefined) {\n\n    msg.payload.print_end_time = msg.payload.gcode_end_time;\n    delete msg.payload.gcode_end_time;\n}\n\nif (msg.payload.gcode_state != undefined) {\n\n    msg.payload.print_status = msg.payload.gcode_state;\n    delete msg.payload.gcode_state;\n}\n\nif (msg.payload.mc_percent != undefined) {\n\n    msg.payload.print_progress = msg.payload.mc_percent;\n    delete msg.payload.mc_percent;\n}\n\nif (msg.payload.mc_print_error_code != undefined) {\n    if(msg.payload.print == undefined) {\n        msg.payload.print = {};\n    }\n    msg.payload.print.error_code = msg.payload.mc_print_error_code;\n    delete msg.payload.mc_print_error_code;\n}\n\nif (msg.payload.mc_print_stage != undefined) {\n    if (msg.payload.print == undefined) {\n        msg.payload.print = {};\n    }\n    msg.payload.print.stage = msg.payload.mc_print_stage;\n    delete msg.payload.mc_print_stage;\n}\n\nif (msg.payload.mc_print_sub_stage != undefined) {\n    if (msg.payload.print == undefined) {\n        msg.payload.print = {};\n    }\n    msg.payload.print.substage = msg.payload.mc_print_sub_stage;\n    delete msg.payload.mc_print_sub_stage;\n}\n\nif (msg.payload.print_error != undefined) {\n    if (msg.payload.print == undefined) {\n        msg.payload.print = {};\n    }\n    msg.payload.print.error = msg.payload.print_error;\n    delete msg.payload.print_error;\n}\n\nif (msg.payload.print_gcode_action != undefined) {\n    if (msg.payload.print == undefined) {\n        msg.payload.print = {};\n    }\n    msg.payload.print.gcode_action = msg.payload.print_gcode_action;\n    delete msg.payload.print_gcode_action;\n}\nif (msg.payload.print_real_action != undefined) {\n    if (msg.payload.print == undefined) {\n        msg.payload.print = {};\n    }\n    msg.payload.print.print_real_action = msg.payload.print_real_action;\n    delete msg.payload.print_real_action;\n}\nif (msg.payload.print_type != undefined) {\n    if (msg.payload.print == undefined) {\n        msg.payload.print = {};\n    }\n    msg.payload.print.type = msg.payload.print_type;\n    delete msg.payload.print_type;\n}\n\nif (msg.payload.profile_id != undefined) {\n    if (msg.payload.print == undefined) {\n        msg.payload.print = {};\n    }\n    msg.payload.print.profile_id = msg.payload.profile_id;\n    delete msg.payload.profile_id;\n}\n\nif (msg.payload.project_id != undefined) {\n    if (msg.payload.print == undefined) {\n        msg.payload.print = {};\n    }\n    msg.payload.print.project_id = msg.payload.project_id;\n    delete msg.payload.project_id;\n}\n\n\nif (msg.payload.project_id != undefined) {\n    if (msg.payload.print == undefined) {\n        msg.payload.print = {};\n    }\n    msg.payload.print.project_id = msg.payload.project_id;\n    delete msg.payload.project_id;\n}\n\nif (msg.payload.subtask_name != undefined) {\n    if(msg.payload.print == undefined) {\n        msg.payload.print = {};\n    }\n    msg.payload.print.task = msg.payload.subtask_name;\n} \n\nif (msg.payload.mc_remaining_time != undefined) {\n\n    msg.payload.print_remaining_time = msg.payload.mc_remaining_time;\n    delete msg.payload.mc_remaining_time;\n}\n\nif (msg.payload.gcode_start_epoch != undefined) {\n    msg.payload.print_start_epoch = msg.payload.gcode_start_epoch;\n    delete msg.payload.gcode_start_epoch;\n    if(msg.payload.print_start_epoch != \"0\" && msg.payload.print_start_epoch != 0) {\n        flow.set(\"print_start_epoch\", msg.payload.print_start_epoch);\n    }\n}\n\nif(msg.payload.ams_status != undefined) {\n    //todo: make into list method for ha\n    if (flow.get(\"amsStatusParser\") != undefined) {\n        let ams_parser = flow.get(\"amsStatusParser\");\n        msg.payload.ams_status = ams_parser(msg.payload.ams_status);      \n    }\n}\n\nif (msg.payload.ams_rfid_status != undefined) {\n    //todo: make into list method for ha\n    if (flow.get(\"RFIDStatusParser\") != undefined) {\n        let rfid_parser = flow.get(\"RFIDStatusParser\");\n        msg.payload.ams_rfid_status = rfid_parser(msg.payload.ams_rfid_status);\n    }\n}\n\n\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 700,
        "wires": [
            [
                "c841c1f09861c5f1"
            ]
        ]
    },
    {
        "id": "7845a97e0fd1ec66",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "447d3cc9dac791a2",
        "name": "Remove Useless",
        "func": "function removeUseless(object, key) {\n    if(object[key] != undefined) {\n        delete object[key];\n    }\n}\n\nlet keys = [\n    \"command\",\n    \"force_upgrade\",\n    \"online\",\n    //\"ams_rfid_status\",\n    //\"ams_status\",\n    \"manufacturer\",\n    \"sequence_id\",\n    \"filam_bak\",\n    \"cali_version\",\n    \"maintain\",\n    \"msg\", //\n    \"fan_gear\",\n    \"mess_production_state\",\n    //\"s_obj\",\n    \"queue_est\",\n    \"queue_sts\",\n    \"queue_number\",\n    \"queue_total\",\n    \"fail_reason\",\n    \"link_th_state\",\n    \"link_ams_state\",\n    \"t_utc\",\n    \"net\",\n    \"queue_number\",\n    \"queue_total\",\n    \"firmware_type\",\n    \"device\"\n];\nif(msg.payload != undefined) {\n    for(var key of keys) {\n        removeUseless(msg.payload, key);\n    }\n}\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 700,
        "wires": [
            [
                "cc7e08e05b3ccbec"
            ]
        ]
    },
    {
        "id": "e86fbc789cead23c",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "447d3cc9dac791a2",
        "x": 100,
        "y": 680,
        "wires": [
            [
                "7845a97e0fd1ec66"
            ]
        ]
    },
    {
        "id": "f4e108c25c7c719f",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "447d3cc9dac791a2",
        "name": "",
        "property": "payload.gcode_end_time",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "N/A",
                "vt": "str"
            },
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 510,
        "y": 640,
        "wires": [
            [
                "e86fbc789cead23c"
            ],
            [
                "cebc72399ca0c643"
            ],
            [
                "e86fbc789cead23c"
            ]
        ]
    },
    {
        "id": "a1fa52af73da9754",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "447d3cc9dac791a2",
        "x": 720,
        "y": 660,
        "wires": [
            [
                "e86fbc789cead23c"
            ]
        ]
    },
    {
        "id": "c2f9532f01947dbc",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "447d3cc9dac791a2",
        "name": "Set EndTime",
        "func": "if(msg.payload.gcode_start_time == undefined) {\n    if(msg.payload.gcode_end_time != undefined && msg.payload.mc_remaining_time == undefined) {\n        delete msg.payload.gcode_end_time;\n    }\n    else if (msg.payload.gcode_end_time != undefined &&\n        msg.payload.mc_remaining_time != undefined) {\n        msg.payload.gcode_end_time = msg.payload.gcode_end_time - (msg.payload.gcode_end_time % 1000);\n        var endTime = msg.payload.gcode_end_time + ((parseInt(msg.payload.mc_remaining_time) * 60) * 1000);\n        endTime = Math.round(endTime / 60000) * 60000;\n        msg.payload.gcode_end_time = endTime;\n    }\n    node.send(msg);\n}\nelse {\n    if (msg.payload.gcode_start_time !== \"N/A\" && msg.payload.gcode_end_time !== undefined && msg.payload.gcode_end_time != \"N/A\"\n        && msg.payload.mc_remaining_time != undefined) {\n        var endTime = msg.payload.gcode_end_time + ((parseInt(msg.payload.mc_remaining_time) * 60) * 1000);\n        endTime = Math.round(endTime / 60000) * 60000;\n        var startSeconds = msg.payload.gcode_start_epoch.toString().slice(0,-5);\n        endTime = endTime + parseInt(startSeconds);\n        msg.payload.gcode_end_time = endTime;\n        msg.payload.gcode_start_time = parseInt(msg.payload.gcode_start_time);\n        node.send(msg);\n    }\n    else if (msg.payload.gcode_end_time == \"N/A\" || msg.payload.gcode_start_time == \"N/A\") {\n        msg.payload.gcode_start_time = \"N/A\";\n        msg.payload.gcode_end_time = \"N/A\";\n        node.send(msg);\n    }\n\n    if (msg.payload.gcode_start_time == \"N/A\" || msg.payload.mc_remaining_time == undefined) {\n        msg.payload.gcode_end_time = \"N/A\";\n        node.send(msg);\n    }\n    else {\n        node.send(msg);\n    }\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 620,
        "wires": [
            [
                "f4e108c25c7c719f"
            ]
        ]
    },
    {
        "id": "cebc72399ca0c643",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "447d3cc9dac791a2",
        "name": "",
        "property": "payload.gcode_start_time",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "N/A",
                "vt": "str"
            },
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 630,
        "y": 640,
        "wires": [
            [
                "a1fa52af73da9754"
            ],
            [
                "a1fa52af73da9754"
            ],
            [
                "e86fbc789cead23c"
            ]
        ]
    },
    {
        "id": "4d91cd893e27bfb3",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "447d3cc9dac791a2",
        "name": "",
        "property": "payload.gcode_start_time",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "N/A",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 580,
        "wires": [
            [
                "5bd800dc4e1b4bca"
            ],
            [
                "c2f9532f01947dbc"
            ]
        ]
    },
    {
        "id": "5bd800dc4e1b4bca",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "447d3cc9dac791a2",
        "name": "Set End Time Init",
        "rules": [
            {
                "t": "set",
                "p": "payload.gcode_end_time",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 170,
        "y": 620,
        "wires": [
            [
                "c2f9532f01947dbc"
            ]
        ]
    },
    {
        "id": "c0391687bc6674d8",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "447d3cc9dac791a2",
        "name": "Fix Start Date",
        "func": "if(msg.payload.gcode_state != undefined && \n   msg.payload.gcode_start_time != undefined) {\n\n    if (msg.payload.gcode_state == \"IDLE\" ||\n        msg.payload.gcode_start_time == \"0\" || msg.payload.gcode_start_time == \"N/A\") {\n        msg.payload.gcode_start_time = \"N/A\";\n        msg.payload.gcode_end_time = \"N/A\";\n    }\n    else {\n        msg.payload.gcode_start_time = msg.payload.gcode_start_time + \"000\";\n    }\n}\nelse if (msg.payload.gcode_start_time != undefined && \n    msg.payload.gcode_start_time != \"0\") {\n    msg.payload.gcode_start_time = msg.payload.gcode_start_time + \"000\"; \n}\n// if override with project_file timestamp, so I need to override gcode_state?\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 580,
        "wires": [
            [
                "4d91cd893e27bfb3"
            ]
        ]
    },
    {
        "id": "e3632543367cde87",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "447d3cc9dac791a2",
        "name": "Start Epoch",
        "func": "if (msg.payload.gcode_start_time != undefined) {\n    msg.payload.gcode_start_epoch = msg.payload.gcode_start_time;\n}\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 580,
        "wires": [
            [
                "c0391687bc6674d8"
            ]
        ]
    },
    {
        "id": "36329bf86f291f67",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "447d3cc9dac791a2",
        "name": "printer",
        "func": "msg.topic = flow.get(\"model\");//_\" + msg.payload.id;\n\nmsg.machine_name = msg.topic + \"_\" + msg.payload.machine_name;\nmsg.model = flow.get(\"model\");\nmsg.payload.fans = {};\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 580,
        "wires": [
            [
                "e3632543367cde87"
            ]
        ]
    },
    {
        "id": "bfd2f9c2fb504f1c",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "447d3cc9dac791a2",
        "name": "Printer - Printer Parse",
        "links": [],
        "x": 105,
        "y": 580,
        "wires": [
            [
                "36329bf86f291f67"
            ]
        ]
    },
    {
        "id": "0eb17a59df4f21da",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "447d3cc9dac791a2",
        "name": "",
        "property": "payload.print_start_time",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 180,
        "y": 780,
        "wires": [
            [
                "937e5e2dc76777fa"
            ],
            [
                "95c79df7110fb57f"
            ]
        ]
    },
    {
        "id": "937e5e2dc76777fa",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "447d3cc9dac791a2",
        "name": "",
        "property": "payload.print_start_time",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "000",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 340,
        "y": 780,
        "wires": [
            [
                "95c79df7110fb57f"
            ],
            [
                "95c79df7110fb57f"
            ]
        ]
    },
    {
        "id": "21f4e96b26230c30",
        "type": "group",
        "z": "fbda6ab16491b918",
        "g": "296274a0d2a6c675",
        "name": "Request Topic - Printer Commands",
        "style": {
            "label": true
        },
        "nodes": [
            "5887c946864f1c2d",
            "8966fc19aafb689e",
            "d62c909774c6823e",
            "f170c14144b3efe2",
            "5c030c48f393ada7",
            "99868b79d856c4bf"
        ],
        "x": 1624,
        "y": 539,
        "w": 542,
        "h": 122
    },
    {
        "id": "5887c946864f1c2d",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "21f4e96b26230c30",
        "name": "Req Topic",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "printer_request_topic",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1940,
        "y": 580,
        "wires": [
            [
                "99868b79d856c4bf"
            ]
        ]
    },
    {
        "id": "8966fc19aafb689e",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "21f4e96b26230c30",
        "name": "Send Gcode",
        "func": "let template = {\n    \"print\": {\n        \"sequence_id\": \"2026\",\n        \"command\": \"gcode_line\",\n        \"param\": \"\\n\"\n    },\n    \"user_id\": \"1234567890\"\n}\n\nif (msg.gcode != undefined && msg.gcode != \"\") {\n\n    template.print.param = msg.gcode;\n    if(!msg.gcode.endsWith(\"\\n\")) {\n        template.print.param = template.print.param + \"\\n\";\n    }\n    msg.payload = template;\n    msg.topic = \"device/\" + flow.get(\"printer_serial\") + \"/request\";\n    if (flow.get(\"is_connected\") == \"true\") {\n        node.send(msg);\n    }\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 580,
        "wires": [
            [
                "5887c946864f1c2d"
            ]
        ]
    },
    {
        "id": "d62c909774c6823e",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "21f4e96b26230c30",
        "name": "Is Gcode?",
        "property": "is_gcode_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1770,
        "y": 620,
        "wires": [
            [
                "8966fc19aafb689e"
            ],
            [
                "5887c946864f1c2d"
            ]
        ]
    },
    {
        "id": "f170c14144b3efe2",
        "type": "mqtt out",
        "z": "fbda6ab16491b918",
        "g": "21f4e96b26230c30",
        "name": "bambu-mqtt-out",
        "topic": "",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "{GENERATED_PRINTER_MQTT_ID}",
        "x": 2040,
        "y": 620,
        "wires": []
    },
    {
        "id": "5c030c48f393ada7",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "21f4e96b26230c30",
        "name": "{PRINTER_MODEL} {PRINTER_NAME} - Request Topic Input",
        "links": [
            "217548f4041499b8",
            "4e46edc8200fcf64",
            "5dd2c8805276d31a",
            "8bf08c882d962917",
            "6fd1f54a93cb3217",
            "ac623386e08e3aed"
        ],
        "x": 1665,
        "y": 620,
        "wires": [
            [
                "d62c909774c6823e"
            ]
        ]
    },
    {
        "id": "99868b79d856c4bf",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "21f4e96b26230c30",
        "name": "can req",
        "property": "can_request",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2080,
        "y": 580,
        "wires": [
            [
                "f170c14144b3efe2"
            ]
        ]
    },
    {
        "id": "{GENERATED_PRINTER_MQTT_ID}",
        "type": "mqtt-broker",
        "name": "Bambu {PRINTER_MODEL} MQTT {PRINTER_NAME}",
        "broker": "{PRINTER_IP}",
        "port": "8883",
        "tls": "",
        "clientid": "",
        "autoConnect": false,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "0504d7acd6810522",
        "type": "group",
        "z": "fbda6ab16491b918",
        "g": "296274a0d2a6c675",
        "name": "Settings",
        "style": {
            "label": true
        },
        "nodes": [
            "eda5a964be293608",
            "7b7e3ccdf769d6fe",
            "e509c1902d9bb186",
            "7bca389f070b9339",
            "71f3cd131ac47b5f",
            "1329a2c45ccca345",
            "916aeaf73814f6aa",
            "d5caf12aaef227ba",
            "4898aba56c4acdcb",
            "f9ebb81f5664f91d",
            "4521e494acb429e6",
            "e9f7f1de7feb3909",
            "6f6a2fd392bda417",
            "663ce1f4df854c21",
            "e249486eaa2c7441",
            "dc24d4cdf93c432a",
            "95e34421706974ea",
            "210ff13bd04781a9",
            "ec8e50e0982150e4",
            "c92643d4572bc979",
            "1b566ebe7def0ebe",
            "e6d41304e7f2f0c0",
            "7f4f417aa006a685",
            "77eb31b0411a8be3",
            "b7269fd12ce204eb"
        ],
        "x": 1714,
        "y": 59,
        "w": 732,
        "h": 462
    },
    {
        "id": "eda5a964be293608",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "0504d7acd6810522",
        "name": "Check Values Error",
        "func": "function testValue(val) {\n    return (val == undefined || val == \"\" || val.startsWith(\"{\"));\n}\n\nif (testValue(flow.get(\"printer_ip\"))) {\n    node.error(\"Printer IP is not set in flow properties\");\n}\nif (testValue(flow.get(\"access_code\"))) {\n    node.error(\"Printer LAN Access Code is not set in flow properties\")\n}\nif (testValue(flow.get(\"model\"))) {\n    node.error(\"Printer model is not set in flow properties\");\n}\nif (testValue(flow.get(\"printer_name\"))) {\n    node.error(\"Printer name is not set in flow properties\");\n}\nif (testValue(flow.get(\"printer_serial\"))) {\n    node.error(\"Printer serialnumber is not set in flow properties\");\n}\nif(testValue(flow.get(\"root_topic\"))) {\n    node.warn(\"Root Topic is not set, defaulting to homeassistant\");\n    flow.set(\"root_topic\", \"homeassistant\");\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "7b7e3ccdf769d6fe",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "0504d7acd6810522",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2120,
        "y": 300,
        "wires": [
            [
                "eda5a964be293608"
            ]
        ]
    },
    {
        "id": "e509c1902d9bb186",
        "type": "inject",
        "z": "fbda6ab16491b918",
        "g": "0504d7acd6810522",
        "name": "StartupSet",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "x": 1830,
        "y": 100,
        "wires": [
            [
                "7bca389f070b9339",
                "7b7e3ccdf769d6fe",
                "1b566ebe7def0ebe"
            ]
        ]
    },
    {
        "id": "7bca389f070b9339",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "0504d7acd6810522",
        "x": 2020,
        "y": 180,
        "wires": [
            [
                "71f3cd131ac47b5f",
                "1329a2c45ccca345",
                "916aeaf73814f6aa",
                "d5caf12aaef227ba",
                "c92643d4572bc979"
            ]
        ]
    },
    {
        "id": "71f3cd131ac47b5f",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "0504d7acd6810522",
        "name": "Set Flow Properties",
        "rules": [
            {
                "t": "set",
                "p": "P1P_CLOUD_MODE",
                "pt": "flow",
                "to": "{P1P_IN_CLOUD_MODE}",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "P1_StartTime_Override",
                "pt": "flow",
                "to": "{IS_P1P}",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "allow_gcode_control",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "has_basic_flow",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "printer_ip",
                "pt": "flow",
                "to": "{PRINTER_IP}",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "printer_name",
                "pt": "flow",
                "to": "{PRINTER_NAME}",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "model",
                "pt": "flow",
                "to": "{PRINTER_MODEL}",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "root_topic",
                "pt": "flow",
                "to": "homeassistant",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "mqtt_user",
                "pt": "flow",
                "to": "{HA_MQTT_BROKER_USER}",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "mqtt_broker",
                "pt": "flow",
                "to": "{HA_MQTT_BROKER_HOST}",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "mqtt_port",
                "pt": "flow",
                "to": "{HA_MQTT_BROKER_PORT}",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "debug_data",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "printer_real_ip",
                "pt": "flow",
                "to": "{PRINTER_IP}",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "can_request",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2150,
        "y": 180,
        "wires": [
            [
                "4898aba56c4acdcb"
            ]
        ]
    },
    {
        "id": "1329a2c45ccca345",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "0504d7acd6810522",
        "name": "Set Filament Translations Flow",
        "func": "// Bambu spools are not needed for translation if they have the rfid tags\n// but this can be used to overwrite them for HA displaying only\n// This only overwrites the tray_type and tray_sub_brands, if you want other fields overwritten you can add them\n// e.g.  tray_diameter, tray_weight, temps etc\n\n// A copy of this script will be available on github, in case a minor version update happens\n// instead of updating the whole flow if it's just filament that needs updating, you can copy paste it here.\n\nvar PolyLite_PLA = {\n    \"tray_info_idx\": \"GFL00\",\n    \"tray_type\": \"PLA\",\n    \"tray_sub_brands\": \"PolyLite PLA\"\n}\n\nvar PolyTerra_PLA = {\n    \"tray_info_idx\": \"GFL01\",\n    \"tray_type\": \"PLA\",\n    \"tray_sub_brands\": \"PolyTerra PLA\"\n}\n\nvar Bambu_ABS = {\n    \"tray_info_idx\": \"GFB00\",\n    \"tray_type\": \"ABS\"\n}\n\nvar Bambu_PACF = {\n    \"tray_info_idx\": \"GFN03\",\n    \"tray_type\": \"PA-CF\"\n}\n\nvar Bambu_PC = {\n    \"tray_info_idx\": \"GFC00\",\n    \"tray_type\": \"PC\"\n}\n\nvar Bambu_PLA_Basic = {\n    \"tray_info_idx\": \"GFA00\",\n    \"tray_type\": \"PLA\",\n    \"tray_sub_brands\": \"PLA Basic\"\n}\nvar Bambu_PLA_Matte = {\n    \"tray_info_idx\": \"GFA01\",\n    \"tray_type\": \"PLA\",\n    \"tray_sub_brands\": \"PLA Matte\"\n}\n\nvar Support_G = {\n    \"tray_info_idx\": \"GFS01\",\n    \"tray_type\": \"Support\",\n    \"tray_sub_brands\": \"Support G\"\n}\n\nvar Support_W = {\n    \"tray_info_idx\": \"GFS00\",\n    \"tray_type\": \"Support\",\n    \"tray_sub_brands\": \"Support W\"\n}\n\nvar Bambu_TPU_95A = {\n    \"tray_info_idx\": \"GFU01\",\n    \"tray_type\": \"TPU\",\n    \"tray_sub_brands\": \"TPU 95A\"\n}\n\nvar Generic_ABS = {\n    \"tray_info_idx\": \"GFB99\",\n    \"tray_type\": \"ABS\",\n    \"tray_sub_brands\": \"ABS\"\n}\n\nvar Generic_ASA = {\n    \"tray_info_idx\": \"GFB98\",\n    \"tray_type\": \"ASA\",\n    \"tray_sub_brands\": \"ASA\"\n}\n\nvar Generic_PA = {\n    \"tray_info_idx\": \"GFN99\",\n    \"tray_type\": \"PA\",\n    \"tray_sub_brands\": \"PA\"\n}\n\nvar Generic_PACF = {\n    \"tray_info_idx\": \"GFN98\",\n    \"tray_type\": \"PA-CF\",\n    \"tray_sub_brands\": \"PA-CF\"\n}\n\nvar Generic_PC = {\n    \"tray_info_idx\": \"GFC99\",\n    \"tray_type\": \"PC\",\n    \"tray_sub_brands\": \"PC\"\n}\n\nvar Generic_PETG = {\n    \"tray_info_idx\": \"GFG99\",\n    \"tray_type\": \"PETG\",\n    \"tray_sub_brands\": \"PETG\"\n}\nvar Generic_PLA = {\n    \"tray_info_idx\": \"GFL99\",\n    \"tray_type\": \"PLA\",\n    \"tray_sub_brands\": \"PLA\"\n}\nvar Generic_PLACF = {\n    \"tray_info_idx\": \"GFL98\",\n    \"tray_type\": \"PLA-CF\",\n    \"tray_sub_brands\": \"PLA-CF\"\n}\nvar Generic_PVA = {\n    \"tray_info_idx\": \"GFS99\",\n    \"tray_type\": \"PVA\",\n    \"tray_sub_brands\": \"PVA\"\n}\nvar Generic_TPU = {\n    \"tray_info_idx\": \"GFU99\",\n    \"tray_type\": \"TPU\",\n    \"tray_sub_brands\": \"TPU\"\n}\n\nvar Bambu_PETCF = {\n    \"tray_info_idx\": \"GFT01\",\n    \"tray_type\": \"PET-CF\",\n    \"tray_sub_brands\": \"PET-CF\"\n}\n\nvar Bambu_PETG_Basic = {\n    \"tray_info_idx\": \"GFG00\",\n    \"tray_type\": \"PETG\",\n    \"tray_sub_brands\": \"PETG Basic\"\n}\nvar Bambu_PETG_CF = {\n    \"tray_info_idx\": \"GFG50\",\n    \"tray_type\": \"PETG-CF\",\n    \"tray_sub_brands\": \"PETG-CF\"\n}\n\nvar Generic_PETG_CF = {\n    \"tray_info_idx\": \"GFG98\",\n    \"tray_type\": \"PETG-CF\",\n    \"tray_sub_brands\": \"PETG-CF\"\n}\n\nvar Bambu_PLA_Impact = {\n    \"tray_info_idx\": \"GFA03\",\n    \"tray_type\": \"PLA\",\n    \"tray_sub_brands\": \"PLA Impact\"\n}\n\nvar Bambu_PLA_Metal = {\n    \"tray_info_idx\": \"GFA02\",\n    \"tray_type\": \"PLA\",\n    \"tray_sub_brands\": \"PLA Metal\"\n}\nvar Bambu_PLA_Marble = {\n    \"tray_info_idx\": \"GFA07\",\n    \"tray_type\": \"PLA\",\n    \"tray_sub_brands\": \"PLA Marble\"\n}\n\n//shares same code as bambu pla silk\nvar Bambu_PLA_Silk = {\n    \"tray_info_idx\": \"GFA05\",\n    \"tray_type\": \"PLA\",\n    \"tray_sub_brands\": \"PLA Silk\"\n}\n\nvar Bambu_PLA_Sparkle = {\n    \"tray_info_idx\": \"GFA08\",\n    \"tray_type\": \"PLA\",\n    \"tray_sub_brands\": \"PLA Sparkle\"\n}\n\nvar Bambu_PLA_Tough = {\n    \"tray_info_idx\": \"GFA09\",\n    \"tray_type\": \"PLA\",\n    \"tray_sub_brands\": \"PLA Tough\"\n}\n\nvar Bambu_PLA_CF = {\n    \"tray_info_idx\": \"GFA50\",\n    \"tray_type\": \"PLA-CF\",\n    \"tray_sub_brands\": \"PLA-CF\"\n}\n\nvar Bambu_PAHT_CF = {\n    \"tray_info_idx\": \"GFN04\",\n    \"tray_type\": \"PAHT-CF\",\n    \"tray_sub_brands\": \"PAHT-CF\"\n}\n\nvar Bambu_TPU_HF = {\n    \"tray_info_idx\": \"GFU00\",\n    \"tray_type\": \"TPU\",\n    \"tray_sub_brands\": \"TPU 95A High Flow\"\n}\n\nvar Generic_PPS_CF = {\n    \"tray_info_idx\": \"GFT98\",\n    \"tray_type\": \"PPS-CF\",\n    \"tray_sub_brands\": \"PPS-CF\"\n}\n\nvar Generic_PPS = {\n    \"tray_info_idx\": \"GFT78\",\n    \"tray_type\": \"PPS\",\n    \"tray_sub_brands\": \"PPS\"\n}\n\nvar Bambu_PLA_Glow = {\n    \"tray_info_idx\": \"GFA12\",\n    \"tray_type\": \"PLA\",\n    \"tray_sub_brands\": \"PLA Glow\"\n}\n\nvar ESUN_PLA_Plus = {\n    \"tray_info_idx\": \"GFL03\",\n    \"tray_type\": \"PLA\",\n    \"tray_sub_brands\": \"PLA+\"\n}\n\nvar Overture_PLA = {\n    \"tray_info_idx\": \"GFL05\",\n    \"tray_type\": \"PLA\",\n    \"tray_sub_brands\": \"PLA\"\n}\n\nvar Overture_PLA_Matte = {\n    \"tray_info_idx\": \"GFL05\",\n    \"tray_type\": \"PLA\",\n    \"tray_sub_brands\": \"PLA Matte\"\n}\n\nvar Generic_PLA_HS = {\n    \"tray_info_idx\": \"GFL95\",\n    \"tray_type\": \"PLA\",\n    \"tray_sub_brands\": \"PLA High Speed\"\n}\n\nvar fils = [\n    PolyLite_PLA, PolyTerra_PLA, Bambu_ABS, Bambu_PACF, Bambu_PC,\n    Bambu_PLA_Basic, Bambu_PLA_Matte, Support_G, Support_W, Bambu_TPU_95A,\n    Generic_ABS, Generic_ASA, Generic_PA, Generic_PACF, Generic_PC, Generic_PETG,\n    Generic_PLA, Generic_PLACF, Generic_PVA, Generic_TPU, Bambu_PETCF, Bambu_PETG_Basic,\n    Bambu_PETG_CF, Generic_PETG_CF, Bambu_PLA_Impact, Bambu_PLA_Metal, Bambu_PLA_Marble,\n    Bambu_PLA_Silk, Bambu_PLA_Sparkle, Bambu_PLA_Tough, Bambu_PLA_CF, Bambu_PAHT_CF,\n    Bambu_TPU_HF, Generic_PPS_CF, Generic_PPS, Bambu_PLA_Glow, ESUN_PLA_Plus, Overture_PLA,\n    Overture_PLA_Matte, Generic_PLA_HS\n];\n\nvar filament_library = {}\nfor (var f of fils) {\n    filament_library[f[\"tray_info_idx\"]] = f;\n}\nflow.set(\"bambu_filament_library\", filament_library);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "916aeaf73814f6aa",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "0504d7acd6810522",
        "name": "Parser Function Store",
        "func": "function parseAction(actionId) {\n    if (actionId === undefined) {\n        return \"\";\n    }\n    switch (actionId) {\n        case -2:\n            return \"Offline\";\n        case -1:\n            return \"Idle\";\n        case 255:\n            return \"Idle\";\n        case 0:\n            return \"Printing\";\n        case 1:\n            return \"Auto bed leveling\";\n        case 2:\n            return \"Heatbed preheating\";\n        case 3:\n            return \"Sweeping XY mech mode\";\n        case 4:\n            return \"Changing filament\";\n        case 5:\n            return \"M400 pause\";\n        case 6:\n            return \"Paused due to filament runout\";\n        case 7:\n            return \"Heating hotend\";\n        case 8:\n            return \"Calibrating extrusion\";\n        case 9:\n            return \"Scanning bed surface\";\n        case 10:\n            return \"Inspecting first layer\";\n        case 11:\n            return \"Identifying build plate type\";\n        case 12:\n            return \"Calibrating Micro Lidar\";\n        case 13:\n            return \"Homing toolhead\";\n        case 14:\n            return \"Cleaning nozzle tip\";\n        case 15:\n            return \"Checking extruder temperature\";\n        case 16:\n            return \"Printing was paused by the user\";\n        case 17:\n            return \"Pause of front cover falling\";\n        case 18:\n            return \"Calibrating the micro lidar\";\n        case 19:\n            return \"Calibrating extrusion flow\";\n        case 20:\n            return \"Paused due to nozzle temperature malfunction\";\n        case 21:\n            return \"Paused due to heat bed temperature malfunction\";\n        case 22:\n            return \"Filament Unloading\";\n        case 23:\n            return \"Paused due to skipped step\";\n        case 24:\n            return \"Filament Loading\";\n        case 25: \n            return \"Motor Noise Calibration\";\n        case 26:\n            return \"Paused due to AMS lost\";\n        case 27:\n            return \"Paused due to low speed of the heat break fan\";\n        case 28:\n            return \"Paused due to chamber temperature control error\";\n        case 29:\n            return \"Cooling chamber\";\n        case 30:\n            return \"Paused by the Gcode inserted by user\"\n        case 31:\n            return \"Motor noise showoff\"\n        case 32:\n            return \"Nozzle filament covered detected pause\"\n        case 33:\n            return \"Cutter error pause\"\n        case 34:\n            return \"First layer error pause\"\n        case 35:\n            return \"Nozzle clog pause\"\n        default:\n            return actionId.toString()\n    }\n}\nlet stages = [];\nfor (var x = -2; x <= 31; x +=1) {\n    stages.push(parseAction(x));\n}\nflow.set(\"stageParser\", parseAction);\nflow.set(\"stages\", stages);\n\nlet statuses = [\"OFFLINE\", \"IDLE\", \"PREPARE\", \"RUNNING\", \"PAUSE\", \"FINISH\", \"FAILED\"];\nflow.set(\"statuses\", statuses);\n\n\nfunction parseAMSStatus(status) {\n    let sub_status = status & 0xFF;\n    let main_status = (status & 0xFF00) >> 8;\n    switch (main_status) {\n        case 0:\n        case 0x00:\n            return \"AMS Idle\";\n        case 1:\n        case 0x01:\n            return \"AMS Filament Change\";\n        case 2:\n        case 0x02:\n            return \"AMS RFID Identifying\";\n        case 3:\n        case 0x03:\n            return \"AMS Assist\";\n        case 4:\n        case 0x04:\n            return \"AMS Calibration\";\n        case 16:\n        case 0x10:\n            return \"AMS Self-Check\";\n        case 32:\n        case 0x20:\n            return \"AMS Debug\";\n        case 255:\n        case 0xFF:\n        default:\n            return \"Unknown\";\n    }\n}\nlet ams_statuses = [\"AMS Idle\", \"AMS Filament Change\", \"AMS RFID Identifying\", \"AMS Assist\", \"AMS Calibration\", \"AMS Self-Check\", \"AMS Debug\", \"Unknown\"];\nflow.set(\"amsStatusParser\", parseAMSStatus);\n\nfunction parseRFIDStatus(status) {\n    //todo: make into list method for ha\n    switch (status) {\n        case 0:\n            return \"RFID Idle\";\n        case 1:\n            return \"RFID Reading\";\n        case 2:\n            return \"GCode Translating\";\n        case 3:\n            return \"GCode Running\";\n        case 4:\n            return \"RFID Assistant\";\n        case 5:\n            return \"Switch Filament\";\n        case 6:\n            return \"Has Filament\";\n        default:\n            return \"Unknown\";\n    }\n} \nflow.set(\"RFIDStatusParser\", parseRFIDStatus);\n\nfunction parseFWRFlag(flag2, key) {\n    if (key == \"is_FW_R\") {\n        return (flag2 & 0x1) != 0;\n    }\n    else if (key == \"is_FW_signed\") {\n        let val = ((flag2 >> 1) & 0x1) // and >> 2?\n        if (val == 0) {\n            return \"unknown\";\n        }\n        else if (val == 1) {\n            return \"signed\";\n        }\n        else if (val == 2){\n            return \"unsigned\";\n        }\n        return \"unknown\";\n    }\n    else if (key == \"is_FW_unlocked\") {\n        return ((flag2 >> 3) & 0x1) != 0;\n    }\n    else if (key == \"is_SSH_started\") {\n        return ((flag2 >> 4) & 0x1) != 0;\n    }\n    return undefined;\n}\nflow.set(\"flag2Parser\", parseFWRFlag);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "d5caf12aaef227ba",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "0504d7acd6810522",
        "name": "Set Sensitive Flow Properties",
        "rules": [
            {
                "t": "set",
                "p": "access_code",
                "pt": "flow",
                "to": "{ACCESS_CODE}",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "printer_serial",
                "pt": "flow",
                "to": "{PRINTER_SERIAL}",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "mqtt_password",
                "pt": "flow",
                "to": "{HA_MQTT_BROKER_PASS}",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2180,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "4898aba56c4acdcb",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "0504d7acd6810522",
        "name": "Set Additional",
        "func": "flow.set(\"basic_flow_version\", \"2.1.3\");\n\nif (flow.get(\"model\") == \"A1 Mini\") {\n    flow.set(\"model\", \"A1Mini\");\n}\n\nflow.set(\"has_humidity_pct\", false);\n\nflow.set(\"is_connected\", \"false\");\nflow.set(\"ha_mqtt_is_connected\", false);\nflow.set(\"is_printer_reachable\", false);\n\nflow.set(\"print_start_epoch\", 0);\n\nflow.set(\"HA_DEVICE\", flow.get(\"model\") + \"_\" + flow.get(\"printer_name\"));\nlet lower = flow.get(\"HA_DEVICE\").toLowerCase();\nlower = lower.replaceAll(\"-\", \"_\");\nflow.set(\"HA_DEVICE_LOWER\", lower);\nflow.set(\"serial_number\", flow.get(\"printer_serial\"));\n\nflow.set(\"printer_report_topic\", \"device/\"+flow.get(\"printer_serial\")+\"/report\");\nflow.set(\"printer_request_topic\", \"device/\" + flow.get(\"printer_serial\") + \"/request\");\n\nflow.set(\"fw_version\", \"\");\nflow.set(\"is_220_voltage\", false);\n\nlet versions = {\n    \"mc_print_versions\": {\n        \"X1\": [\"01.05.01.00\", \"01.04.01.00\"],\n        \"X1C\": [\"01.05.01.00\", \"01.04.01.00\"],\n        \"P1P\": [],\n        \"P1S\": [],\n        \"A1Mini\": [],\n        \"A1\":[],\n        \"X1E\": []\n    }//,\n    //\"non_calib_versions\" : {\n    //    \"X1\": [\"01.05.02.00\", \"01.05.01.00\", \"01.04.01.00\", \"01.04.00.00\", \"01.03.00.00\", \"01.01.01.00\", \"01.01.00.00\", \"01.00.00.07\", \"01.00.00.00\"],\n   //     \"X1C\": [\"01.05.02.00\", \"01.05.01.00\", \"01.04.01.00\", \"01.04.00.00\", \"01.03.00.00\", \"01.01.01.00\", \"01.01.00.00\", \"01.00.00.07\", \"01.00.00.00\"],\n   //     \"P1P\": [\"01.03.00.00\", \"01.02.03.00\", \"01.02.02.00\", \"01.02.01.00\", \"01.01.01.00\", \"01.01.00.00\"],\n //   }\n};\n\nflow.set(\"supports_calibration\", false);\nflow.set(\"mc_print_versions\", versions[\"mc_print_versions\"]);\nflow.set(\"can_bedmesh\", true);\n\nfunction getHMSLevel(code) {\n    let uint_id = (code >> 16);\n    switch (uint_id) {\n        case 1:\n            return \"Fatal\";\n        case 2:\n            return \"Serious\";\n        case 3:\n            return \"Common\";\n        case 4:\n            return \"Info\";\n        default:\n            return \"Unknown\";\n    }\n}\n\nfunction getHMSModule(attr) {\n    let uint_id = ((attr >> 24) & 0xFF);\n    switch (uint_id) {\n        case 0x05:\n            return \"MainBoard\";\n        case 0x0C:\n            return \"XCam\";\n        case 0x07:\n            return \"AMS\";\n        case 0x08:\n            return \"Toolhead\";\n        case 0x03:\n            return \"MC\";\n        default:\n            return \"Unknown - \"+ uint_id.toString();\n    }\n}\n\nfunction toHex(value, min_length) {\n    let hex = value.toString(16);\n    while (hex.length < min_length) {\n        hex = \"0\"+ hex;\n    }\n    return hex;\n}\n\nfunction getHMSLongCode(attr, code) {\n    var module_id = (attr >> 24) & 0xFF;\n    var module_num = (attr >> 16) & 0xFF;\n    var part_id = (attr >> 8) & 0xFF;\n    var reserved = (attr >> 0) & 0xFF;\n\n    var level = code>>16;\n    if (level > 4 || level < 0) {\n        level = 0;\n    }\n\n    var msg_code = code & 0xFFFF;\n\n    var longcode = toHex(module_id,2) + \"\"+toHex(module_num,2) +\"\"+toHex(part_id,2)+\"00000\"+ toHex(parseInt(level),0) +\"\"+ toHex(msg_code, 4);\n    return longcode;\n}\n\nflow.set(\"hms_longcode_parser\", getHMSLongCode);\nflow.set(\"hms_level_parser\", getHMSLevel);\nflow.set(\"hms_module_parser\", getHMSModule);\n\nflow.set(\"has_ipcam\", false);\nflow.set(\"current_filament\", \"\");\nflow.set(\"ams_count\", 0)\nflow.set(\"nozzle_diameter\", \"\");\nflow.set(\"stage_override\", -2);\n\nlet allowed_resolutions = [\"720p\"];\nif(flow.get(\"model\").startsWith(\"X1\")) {\n    allowed_resolutions = [\"720p\", \"1080p\"];\n}\nif(flow.get(\"model\").startsWith(\"A1\")) {\n    allowed_resolutions=[\"1920x1080\", \"1536x1080\"]\n}\nflow.set(\"camera_resolutions\", allowed_resolutions);\n\n\nlet maintenance_wip = {\n    \"3\": \"None\",\n    \"131075\": \"Lead screws may need lubrication\"\n};\n\n\n/*\nSN's\n\n00M : X1C\n00W : X1\n03W : X1E\n01S : P1P\n01P : P1S\n030 : A1\n039 : A1 Mini\n\n\n*/",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2340,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "f9ebb81f5664f91d",
        "type": "inject",
        "z": "fbda6ab16491b918",
        "g": "0504d7acd6810522",
        "name": "Check Printer Online",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "printer_real_ip",
        "payloadType": "flow",
        "x": 1860,
        "y": 480,
        "wires": [
            [
                "4521e494acb429e6"
            ]
        ]
    },
    {
        "id": "4521e494acb429e6",
        "type": "exec",
        "z": "fbda6ab16491b918",
        "g": "0504d7acd6810522",
        "command": "ping -c 1 ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "10",
        "winHide": false,
        "oldrc": false,
        "name": "Ping Local Printer",
        "x": 2070,
        "y": 440,
        "wires": [
            [
                "dc24d4cdf93c432a"
            ],
            [],
            [
                "6f6a2fd392bda417"
            ]
        ]
    },
    {
        "id": "e9f7f1de7feb3909",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "0504d7acd6810522",
        "name": "Set Printer Reachable State Flow",
        "func": "let was_ping_killed = false;\nif (msg.payload !== undefined && msg.payload.code !== undefined\n    && msg.payload.code == 0) {\n    if(!flow.get(\"is_printer_reachable\")) {\n        node.log(\"Printer \" + flow.get(\"printer_name\") + \" is reachable\");\n    }\n    flow.set(\"is_printer_reachable\", true);\n    node.status({ fill: \"green\", shape: \"ring\", text: \"Printer IP is online\" });\n} else {\n    was_ping_killed = false;\n    // TODO IF PING KILLED \n    if(flow.get(\"is_printer_reachable\")) {\n        if (was_ping_killed) {\n            // if ping command killed\n            node.warn(\"Ping command was unexpectedly killed\");\n        }\n        else {\n            node.warn(\"Printer \" + flow.get(\"printer_name\") + \" is not reachable!\");\n        }\n        flow.set(\"warned_for_ip\", false);\n\n    }\n    if (was_ping_killed) {\n        // if ping command killed\n        node.status({fill: \"red\", shape: \"ring\", text: \"Ping command was unexpectedly killed\"});\n        flow.set(\"warned_for_ip\", false);\n    }\n    else {\n        flow.set(\"is_printer_reachable\", false);\n        node.status({ fill: \"red\", shape: \"ring\", text: \"Printer is not reachable\" });\n        flow.set(\"warned_for_ip\", false);\n    }\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "6f6a2fd392bda417",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "0504d7acd6810522",
        "x": 2200,
        "y": 440,
        "wires": [
            [
                "e9f7f1de7feb3909"
            ]
        ]
    },
    {
        "id": "663ce1f4df854c21",
        "type": "http request",
        "z": "fbda6ab16491b918",
        "g": "0504d7acd6810522",
        "name": "Fetch HMS File",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://e.bambulab.com/query.php?lang=en",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "User-Agent",
                "valueType": "other",
                "valueValue": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36 OPR/102.0.0.0"
            }
        ],
        "x": 2000,
        "y": 360,
        "wires": [
            [
                "95e34421706974ea"
            ]
        ]
    },
    {
        "id": "e249486eaa2c7441",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "0504d7acd6810522",
        "name": "Reorder HMS Data",
        "func": "let hms_codes = {\n    \"hms\": {},\n    \"error\": {},\n    \"has_data\": false\n};\nif(msg.payload != undefined &&  msg.statusCode == 200 && msg.payload.data != undefined) {\n    if(msg.payload.data.device_hms != undefined && msg.payload.data.device_hms.en != undefined) {\n        for (var entry of msg.payload.data.device_hms.en) {\n            hms_codes[\"hms\"][(entry.ecode).toString().toLowerCase()] = entry.intro;\n        }\n        hms_codes[\"has_data\"] = true;\n    }\n    if (msg.payload.data.device_error != undefined && msg.payload.data.device_error.en != undefined) {\n        for (var entry of msg.payload.data.device_error.en) {\n            hms_codes[\"error\"][(entry.ecode).toString().toLowerCase()] = entry.intro;\n        }\n        hms_codes[\"has_data\"] = true;\n    }\n}\nflow.set(\"hms_data\", hms_codes);\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "dc24d4cdf93c432a",
        "type": "function",
        "z": "fbda6ab16491b918",
        "d": true,
        "g": "0504d7acd6810522",
        "name": "Compare IP",
        "func": "if (flow.get(\"warned_for_ip\") || !flow.get(\"is_printer_reachable\")) {\n    return;\n}\n\nlet message = msg.payload.split(\"\\n\")[0];\n\nlet ipv4 = message.match(\"(?:[0-9]{1,3}\\.){3}[0-9]{1,3}\")\nlet ipv6 = message.match(\"\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(\\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])){3}))|:)))(%.+)?\\s*/[0-9]{1,3}\");\n\nlet ip = \"\"\nif (ipv4 != undefined && ipv4.length == 1) {\n    ip = ipv4[0];\n}\nelse if (ipv6 != undefined && ipv6.length == 1) {\n    ip = ipv6[0];\n}\nelse {\n    // not found\n    return;\n}\n\nif (ip != \"\") {\n    let name = \"wws_bambu_\" + flow.get(\"printer_serial\");\n    if(flow.get(name) != undefined && flow.get(name) != \"\") {\n        let ip_addr = flow.get(name)[\"IP Address\"];\n        if (ip_addr != undefined && ip_addr != \"\" && ip_addr.trim() != ip.trim()) {\n            node.warn(\"Warning - Provided IP [\"+ip + \" | \" + flow.get(\"printer_ip\") +\"] does not match scanned IP [\" + ip_addr+\"] from network for SN \"+flow.get(\"printer_serial\")+ \".\\nThis may be expected if you are using Bambu-SmartHub or similar MQTT Hub/Repeater. In this case, this warning can be ignored.\");\n            flow.set(\"warned_for_ip\", true)\n        }\n    }\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "95e34421706974ea",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "0504d7acd6810522",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "403",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2150,
        "y": 360,
        "wires": [
            [
                "ec8e50e0982150e4"
            ],
            [
                "e249486eaa2c7441"
            ]
        ]
    },
    {
        "id": "210ff13bd04781a9",
        "type": "http request",
        "z": "fbda6ab16491b918",
        "g": "0504d7acd6810522",
        "name": "Fetch Backup File",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://raw.githubusercontent.com/WolfwithSword/Bambu-HomeAssistant-Flows/main/files/nodered/resources/HMS%20Data%20-%20English/hms_en.json",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "User-Agent",
                "valueType": "other",
                "valueValue": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36 OPR/102.0.0.0"
            }
        ],
        "x": 2010,
        "y": 400,
        "wires": [
            [
                "e249486eaa2c7441"
            ]
        ]
    },
    {
        "id": "ec8e50e0982150e4",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "0504d7acd6810522",
        "name": "Notice",
        "func": "node.warn(\"If you have just seen a 'JSON parse error' from 'Fetch HMS File' node, this is an OK error. It is regarding the HMS data-file, a backup solution is in effect\");\nnode.send(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2270,
        "y": 360,
        "wires": [
            [
                "210ff13bd04781a9"
            ]
        ]
    },
    {
        "id": "c92643d4572bc979",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "0504d7acd6810522",
        "name": "CFW X1Plus Settings",
        "rules": [
            {
                "t": "set",
                "p": "x1plus_installed",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "x1plus_active",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2160,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "1b566ebe7def0ebe",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "0504d7acd6810522",
        "x": 2020,
        "y": 320,
        "wires": [
            [
                "663ce1f4df854c21"
            ]
        ]
    },
    {
        "id": "e6d41304e7f2f0c0",
        "type": "http request",
        "z": "fbda6ab16491b918",
        "g": "0504d7acd6810522",
        "name": "Is Current?",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://raw.githubusercontent.com/WolfwithSword/Bambu-HomeAssistant-Flows/main/files/nodered/resources/versions.json",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1830,
        "y": 220,
        "wires": [
            [
                "b7269fd12ce204eb"
            ]
        ]
    },
    {
        "id": "7f4f417aa006a685",
        "type": "inject",
        "z": "fbda6ab16491b918",
        "g": "0504d7acd6810522",
        "name": "Check Update",
        "props": [],
        "repeat": "86400",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "x": 1840,
        "y": 140,
        "wires": [
            [
                "77eb31b0411a8be3"
            ]
        ]
    },
    {
        "id": "77eb31b0411a8be3",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "0504d7acd6810522",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1820,
        "y": 180,
        "wires": [
            [
                "e6d41304e7f2f0c0"
            ]
        ]
    },
    {
        "id": "b7269fd12ce204eb",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "0504d7acd6810522",
        "name": "Compare Flow Version",
        "func": "let ver = \"?\";\nlet status = \"\"\nif (msg.payload != undefined && !(msg.payload instanceof String) && msg.payload.basic_flow != undefined) {\n\n    ver = msg.payload.basic_flow;\n    if (flow.get(\"basic_flow_version\") != ver) {\n        flow.set(\"basic_is_latest_flow\", false);\n    }\n    else {\n        flow.set(\"basic_is_latest_flow\", true);\n    }\n    if (flow.get(\"basic_is_latest_flow\") != undefined) {\n        if (flow.get(\"basic_is_latest_flow\")) {\n            node.status({ fill: \"green\", shape: \"ring\", text: \"Up to Date: \" + flow.get(\"basic_flow_version\")});\n        }\n        else {\n            node.warn(\"[INFO] Update Available. Basic Flow version is not latest. [\" + flow.get(\"basic_flow_version\") + \" -> \" + ver + \"]\");\n            status = \"Basic [\" + flow.get(\"basic_flow_version\") + \" -> \" + ver + \"]\";\n            node.status({ fill: \"red\", shape: \"ring\", text: status });\n        }\n    }\n\n}\n\nif (flow.get(\"has_adv_flow\") && flow.get(\"advanced_flow_version\") != undefined) {\n    if (msg.payload != undefined && msg.payload.advanced_flow != undefined) {\n\n        ver = msg.payload.advanced_flow;\n        if (flow.get(\"advanced_flow_version\") != ver) {\n            flow.set(\"advanced_is_latest_flow\", false);\n        }\n        else {\n            flow.set(\"advanced_is_latest_flow\", true);\n        }\n        if (flow.get(\"advanced_is_latest_flow\") != undefined) {\n            if (flow.get(\"advanced_is_latest_flow\")) {\n                if (status == \"\") {\n                    node.status({ fill: \"green\", shape: \"ring\", text: \"Up to Date: Basic & Adv\" });\n                }\n            }\n            else {\n                node.warn(\"[INFO] Update Available. Advanced Flow version is not latest. [\" + flow.get(\"advanced_flow_version\") + \" -> \" + ver + \"]\");\n                status = status + \" | \" + \"Adv [\" + flow.get(\"advanced_flow_version\") + \" -> \" + ver + \"]\";\n                node.status({ fill: \"red\", shape: \"ring\", text: status });\n            }\n        }\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "70091da2e4b669c1",
        "type": "group",
        "z": "fbda6ab16491b918",
        "g": "296274a0d2a6c675",
        "name": "Printer - Gcode commands",
        "style": {
            "label": true
        },
        "nodes": [
            "15f1d2104c14b32d",
            "236eb62e785fa16a",
            "a57684202aa2160e",
            "c8e2eab0fad37985",
            "2250e65775ee5fba",
            "0db02154b69078d5",
            "e59529e8f4f2b4d7",
            "5c7aac3c3657ba24",
            "70d2024d191a082e",
            "a822737d7b64e447",
            "615fa8b6a8f75f59",
            "31ac438c18177570",
            "5dd2c8805276d31a",
            "f1a328459d02685b",
            "248ebd30cb6cf901",
            "67a6fefd2fe7e87b",
            "52488654017051f0",
            "d0562f428dc4d8c9",
            "eee67c75e63f7aa7",
            "fb269e9e043d5ea6",
            "3b162510581bc9ba",
            "cc89b3cbb8a1244b",
            "831d48a1b0a66697",
            "42bd4cbe7ff9c3ed",
            "43c1eb8931e6fa42",
            "787c4ae530890d37",
            "958d73f2195069bc",
            "69b782c777a418e1",
            "db1fc75f86cc5405",
            "1525167bc5eb4a5d",
            "32ebce8c137c4746",
            "6645ea410f0ea388"
        ],
        "x": 54,
        "y": 1099,
        "w": 672,
        "h": 502
    },
    {
        "id": "15f1d2104c14b32d",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "name": "Turn Logo On",
        "rules": [
            {
                "t": "set",
                "p": "gcode",
                "pt": "msg",
                "to": "M960 S5 P1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 1140,
        "wires": [
            [
                "67a6fefd2fe7e87b"
            ]
        ]
    },
    {
        "id": "236eb62e785fa16a",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "name": "Turn Logo Off",
        "rules": [
            {
                "t": "set",
                "p": "gcode",
                "pt": "msg",
                "to": "M960 S5 P0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 1180,
        "wires": [
            [
                "67a6fefd2fe7e87b"
            ]
        ]
    },
    {
        "id": "a57684202aa2160e",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "name": "Turn Nozzle Light On",
        "rules": [
            {
                "t": "set",
                "p": "gcode",
                "pt": "msg",
                "to": "M960 S4 P1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 1220,
        "wires": [
            [
                "67a6fefd2fe7e87b"
            ]
        ]
    },
    {
        "id": "c8e2eab0fad37985",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "name": "Turn Nozzle Light Off",
        "rules": [
            {
                "t": "set",
                "p": "gcode",
                "pt": "msg",
                "to": "M960 S4 P0",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 1260,
        "wires": [
            [
                "67a6fefd2fe7e87b"
            ]
        ]
    },
    {
        "id": "2250e65775ee5fba",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "name": "Set Bed Target",
        "func": "let max = 110;\nif(flow.get(\"is_220_voltage\")) {\n    max = 120;\n}\n\nif (msg.payload == undefined || isNaN(msg.payload || \nmsg.payload < 0 || msg.payload > max)) {\n    return;\n}\n\nmsg.gcode = \"M140 S\"+ msg.payload.toString();\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1460,
        "wires": [
            [
                "d0562f428dc4d8c9"
            ]
        ]
    },
    {
        "id": "0db02154b69078d5",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "name": "Set Nozzle Target",
        "func": "if (msg.payload == undefined || isNaN(msg.payload || \nmsg.payload < 0 || msg.payload > 300)) {\n    return;\n}\n\nmsg.gcode = \"M104 S\"+ msg.payload.toString();\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1500,
        "wires": [
            [
                "d0562f428dc4d8c9"
            ]
        ]
    },
    {
        "id": "e59529e8f4f2b4d7",
        "type": "mqtt in",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "name": "MQTT In",
        "topic": "",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "489094618c340eef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 220,
        "y": 1480,
        "wires": [
            [
                "db1fc75f86cc5405"
            ]
        ]
    },
    {
        "id": "5c7aac3c3657ba24",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "name": "Toggle Fans",
        "func": "let fan = \"\";\nif(msg.topic.includes(\"big_fan2\")) {\n    fan = \"P3\";// chamber\n}\nelse if (msg.topic.includes(\"big_fan1\")) {\n    fan = \"P2\";// aux\n}\nelse if (msg.topic.includes(\"cooling_fan\")){\n    fan = \"P1\"; // part\n}\nelse {\n    return;\n}\n\nlet amt = 0;\nif(msg.payload == \"ON\") {\n    amt = 51;//20\n}\nelse if (msg.payload == \"OFF\") {\n    amt = 0;\n}\nelse {\n    return;\n}\n\nmsg.gcode = \"M106 \"+ fan + \" S\"+amt.toString();\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1420,
        "wires": [
            [
                "d0562f428dc4d8c9"
            ]
        ]
    },
    {
        "id": "70d2024d191a082e",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "name": "Change Fan Speeds",
        "func": "let fan = \"\";\nif(msg.topic.includes(\"big_fan2\")) {\n    fan = \"P3\";// chamber\n}\nelse if (msg.topic.includes(\"big_fan1\")) {\n    fan = \"P2\";// aux\n}\nelse if (msg.topic.includes(\"cooling_fan\")){\n    fan = \"P1\"; // part\n}\nelse {\n    return;\n}\n\nlet amt = 0;\nswitch (msg.payload) {\n    case 0: \n        amt = 0;\n        break;\n    case 1: \n        amt = 30;\n        break;\n    case 2: \n        amt = 51;\n        break;\n    case 3:\n        amt = 80;\n        break;\n    case 4:\n        amt = 102;\n        break;\n    case 5:\n        amt = 127;\n        break;\n    case 6:\n        amt = 153;\n        break;\n    case 7:\n        amt = 179;\n        break;\n    case 8:\n        amt = 204;\n        break;\n    case 9:\n        amt = 230;\n        break;\n    case 10:\n        amt = 255;\n        break;\n    default:\n        amt = 51;\n        break;\n}\n\nmsg.gcode = \"M106 \"+ fan + \" S\"+amt.toString();\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1380,
        "wires": [
            [
                "d0562f428dc4d8c9"
            ]
        ]
    },
    {
        "id": "a822737d7b64e447",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "name": "Sub",
        "func": "if (!flow.get(\"can_request\")) {\n    return;\n}\nlet topic = flow.get(\"root_topic\");\nlet device = flow.get(\"HA_DEVICE\");\nlet config1 = {\n    \"action\": \"subscribe\",\n    \"topic\": {\n        \"topic\": topic + \"/number/\" + device + \"/+/set\",\n        \"qos\": 2\n    }\n}\n\nnode.send(config1);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1440,
        "wires": [
            [
                "e59529e8f4f2b4d7"
            ]
        ]
    },
    {
        "id": "615fa8b6a8f75f59",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "name": "MQTT Init - In",
        "links": [
            "123228b4999f2d36"
        ],
        "x": 95,
        "y": 1180,
        "wires": [
            [
                "eee67c75e63f7aa7",
                "3b162510581bc9ba"
            ]
        ]
    },
    {
        "id": "31ac438c18177570",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "name": "Is Gcode",
        "rules": [
            {
                "t": "set",
                "p": "is_gcode_type",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 1560,
        "wires": [
            [
                "5dd2c8805276d31a"
            ]
        ]
    },
    {
        "id": "5dd2c8805276d31a",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "name": "Request Out",
        "mode": "link",
        "links": [
            "5c030c48f393ada7"
        ],
        "x": 685,
        "y": 1560,
        "wires": []
    },
    {
        "id": "f1a328459d02685b",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "x": 420,
        "y": 1420,
        "wires": [
            [
                "5c7aac3c3657ba24"
            ]
        ]
    },
    {
        "id": "248ebd30cb6cf901",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "x": 420,
        "y": 1380,
        "wires": [
            [
                "70d2024d191a082e"
            ]
        ]
    },
    {
        "id": "67a6fefd2fe7e87b",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "x": 700,
        "y": 1260,
        "wires": [
            [
                "d0562f428dc4d8c9"
            ]
        ]
    },
    {
        "id": "52488654017051f0",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "x": 680,
        "y": 1520,
        "wires": [
            [
                "31ac438c18177570"
            ]
        ]
    },
    {
        "id": "d0562f428dc4d8c9",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "x": 680,
        "y": 1440,
        "wires": [
            [
                "52488654017051f0"
            ]
        ]
    },
    {
        "id": "eee67c75e63f7aa7",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "name": "delay",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 210,
        "y": 1280,
        "wires": [
            [
                "69b782c777a418e1"
            ]
        ]
    },
    {
        "id": "fb269e9e043d5ea6",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "name": "Home Printer",
        "rules": [
            {
                "t": "set",
                "p": "gcode",
                "pt": "msg",
                "to": "G28 ",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 1300,
        "wires": [
            [
                "67a6fefd2fe7e87b"
            ]
        ]
    },
    {
        "id": "3b162510581bc9ba",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "name": "Sub",
        "func": "if (!flow.get(\"can_request\")) {\n    return;\n}\n\nlet topic = flow.get(\"root_topic\");\nlet device = flow.get(\"HA_DEVICE\");\n\nlet config = {\n    \"action\": \"subscribe\",\n    \"topic\": {\n        \"topic\": topic + \"/button/\" + device + \"/+\",\n        \"qos\": 2\n    }\n}\nnode.send(config);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1140,
        "wires": [
            [
                "cc89b3cbb8a1244b"
            ]
        ]
    },
    {
        "id": "cc89b3cbb8a1244b",
        "type": "mqtt in",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "name": "MQTT In",
        "topic": "",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "489094618c340eef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 220,
        "y": 1180,
        "wires": [
            [
                "831d48a1b0a66697"
            ]
        ]
    },
    {
        "id": "831d48a1b0a66697",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "name": "Button",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "/logo_light_on",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/logo_light_off",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/nozzle_light_on",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/nozzle_light_off",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/home",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/send_gcode",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 350,
        "y": 1200,
        "wires": [
            [
                "15f1d2104c14b32d"
            ],
            [
                "236eb62e785fa16a"
            ],
            [
                "a57684202aa2160e"
            ],
            [
                "c8e2eab0fad37985"
            ],
            [
                "fb269e9e043d5ea6"
            ],
            [
                "1525167bc5eb4a5d"
            ]
        ]
    },
    {
        "id": "42bd4cbe7ff9c3ed",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "name": "Sub",
        "func": "if (!flow.get(\"can_request\")) {\n    return;\n}\n\nlet topic = flow.get(\"root_topic\");\nlet device = flow.get(\"HA_DEVICE\");\n\nlet config3 = {\n    \"action\": \"subscribe\",\n    \"topic\": {\n        \"topic\": topic + \"/fan/\" + device + \"/big_fan1/percent/set\",\n        \"qos\": 2\n    }\n}\n\nlet config4 = {\n    \"action\": \"subscribe\",\n    \"topic\": {\n        \"topic\": topic + \"/fan/\" + device + \"/big_fan2/percent/set\",\n        \"qos\": 2\n    }\n}\n\nlet config5 = {\n    \"action\": \"subscribe\",\n    \"topic\": {\n        \"topic\": topic + \"/fan/\" + device + \"/cooling_fan/percent/set\",\n        \"qos\": 2\n    }\n}\n\nlet config6 = {\n    \"action\": \"subscribe\",\n    \"topic\": {\n        \"topic\": topic + \"/fan/\" + device + \"/big_fan1/set\",\n        \"qos\": 2\n    }\n}\n\nlet config7 = {\n    \"action\": \"subscribe\",\n    \"topic\": {\n        \"topic\": topic + \"/fan/\" + device + \"/big_fan2/set\",\n        \"qos\": 2\n    }\n}\n\nlet config8 = {\n    \"action\": \"subscribe\",\n    \"topic\": {\n        \"topic\": topic + \"/fan/\" + device + \"/cooling_fan/set\",\n        \"qos\": 2\n    }\n}\n\nlet config = {\n    \"action\": \"subscribe\",\n    \"topic\": {\n        \"topic\": topic + \"/fan/\" + device + \"/+/set\",\n        \"qos\": 2\n    }\n}\nlet config2 = {\n    \"action\": \"subscribe\",\n    \"topic\": {\n        \"topic\": topic + \"/fan/\" + device + \"/+/percent/set\",\n        \"qos\": 2\n    }\n}\nnode.send([config, config2]);",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1320,
        "wires": [
            [
                "43c1eb8931e6fa42"
            ],
            [
                "787c4ae530890d37"
            ]
        ]
    },
    {
        "id": "43c1eb8931e6fa42",
        "type": "mqtt in",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "name": "MQTT In",
        "topic": "",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "489094618c340eef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 220,
        "y": 1360,
        "wires": [
            [
                "958d73f2195069bc"
            ]
        ]
    },
    {
        "id": "787c4ae530890d37",
        "type": "mqtt in",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "name": "MQTT In",
        "topic": "",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "489094618c340eef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 220,
        "y": 1400,
        "wires": [
            [
                "958d73f2195069bc"
            ]
        ]
    },
    {
        "id": "958d73f2195069bc",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "name": "Fan",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "/big_fan1/percent/set",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/big_fan2/percent/set",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/cooling_fan/percent/set",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/big_fan1/set",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/big_fan2/set",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/cooling_fan/set",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 350,
        "y": 1400,
        "wires": [
            [
                "248ebd30cb6cf901"
            ],
            [
                "248ebd30cb6cf901"
            ],
            [
                "248ebd30cb6cf901"
            ],
            [
                "f1a328459d02685b"
            ],
            [
                "f1a328459d02685b"
            ],
            [
                "f1a328459d02685b"
            ]
        ]
    },
    {
        "id": "69b782c777a418e1",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "x": 100,
        "y": 1320,
        "wires": [
            [
                "42bd4cbe7ff9c3ed",
                "a822737d7b64e447"
            ]
        ]
    },
    {
        "id": "db1fc75f86cc5405",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "name": "Number",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "/set_bed_temp/set",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/set_nozzle_temp/set",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/set_speed_percent/set",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 360,
        "y": 1500,
        "wires": [
            [
                "2250e65775ee5fba"
            ],
            [
                "0db02154b69078d5"
            ],
            [
                "32ebce8c137c4746"
            ]
        ]
    },
    {
        "id": "1525167bc5eb4a5d",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "name": "GCode Control",
        "func": "let command = flow.get(\"gcode_command_req\");\n\nif (command != undefined && command != \"\" && flow.get(\"allow_gcode_control\")) {\n    msg.gcode = command;\n}\n\nif (msg.gcode != \"unknown\") {\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1340,
        "wires": [
            [
                "67a6fefd2fe7e87b"
            ]
        ]
    },
    {
        "id": "32ebce8c137c4746",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "name": "Set Custom Speed",
        "func": "if (msg.payload == undefined || isNaN(msg.payload || \nmsg.payload < 30 || msg.payload > 180)) {\n    return;\n}\n\nif (msg.payload == 50) {\n    msg.payload = \"Silent\";\n    node.send([null, msg]);\n    return;\n}\n\nif (msg.payload == 100) {\n    msg.payload = \"Standard\";\n    node.send([null, msg]);\n    return;\n}\n\nif (msg.payload == 124) {\n    msg.payload = \"Sport\";\n    node.send([null, msg]);\n    return;\n}\n\nif (msg.payload == 166) {\n    msg.payload = \"Ludicrous\"\n    node.send([null, msg]);\n    return;\n}\n\n\nlet speed_frac = Math.floor(10000 / parseInt(msg.payload))/100;\nlet accel_mag = Math.exp((speed_frac - 1.0191) / -0.814);\n/*\nlet feed_rate = (2.1645 * (accel_mag ** 3) - 5.3247 * (accel_mag ** 2) + 4.342 * accel_mag - 0.1818);\n*/\nlet feed_rate = (0.00006426) * msg.payload ** 2 + (-0.002484) * msg.payload + 0.654;\nlet lvl = 1.549 * (accel_mag ** 2) - 0.7032 * accel_mag + 4.0834;\n\n\nlet cmd = `M204.2 K${accel_mag.toFixed(2)} \\nM220 K${feed_rate.toFixed(2)} \\nM73.2 R${speed_frac.toFixed(2)} \\nM1002 set_gcode_claim_speed_level ${Math.round(lvl)}\\n`;\nmsg.gcode = cmd;\nnode.send([msg, null]);",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1540,
        "wires": [
            [
                "52488654017051f0"
            ],
            [
                "6645ea410f0ea388"
            ]
        ]
    },
    {
        "id": "6645ea410f0ea388",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "70091da2e4b669c1",
        "name": "Set Speed Profile Out",
        "mode": "link",
        "links": [
            "67e0bd5d1bfcfea6"
        ],
        "x": 455,
        "y": 1560,
        "wires": []
    },
    {
        "id": "489094618c340eef",
        "type": "mqtt-broker",
        "name": "homeassistant",
        "broker": "{HA_MQTT_BROKER_HOST}",
        "port": "{HA_MQTT_BROKER_PORT}",
        "clientid": "",
        "autoConnect": false,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "898dd84e912849f7",
        "type": "group",
        "z": "fbda6ab16491b918",
        "g": "296274a0d2a6c675",
        "name": "Printer - Misc Commands",
        "style": {
            "label": true
        },
        "nodes": [
            "f0bcc0434d35f8db",
            "2a0268a55eadf72f",
            "c93c3bb2cc88b9dc",
            "a4d29254d471acd7",
            "d20b02ea37dbdddf",
            "8959434b99b38bdd",
            "ec6f548a5bc948b2",
            "b4eef9bbefd37b47",
            "1e92fa493eba35e5",
            "43a363db881ad67d",
            "8d932b10ba1a9ae6",
            "8bf08c882d962917",
            "8eea69a76cf784bf",
            "e34f034bed456673",
            "064800d33ec35e0a",
            "f00fd783bad0e3d7",
            "5aa39146def9575b",
            "a49df521f46fc751",
            "dd09cb99c169d139",
            "152f2aeb30a1082f",
            "9cc47e1371edce04",
            "6cf7aa99654f021c",
            "4516a624c7338854",
            "4e5d0e780f6fde79",
            "06b41595e510d71f",
            "097fbc5e089e1502",
            "c4c11e4f3bbb2b8b",
            "46788feec6a79963",
            "d05bfadd27350709",
            "6c3952bd983b3ce8",
            "325a80bde015fd7b",
            "e25fd29f68e5e91c",
            "3ebc9dbc1331e7d9",
            "d6bc33b26e81afb1",
            "17a33be3cb810dc8",
            "4caad12ee9b3773c",
            "8ccfff70ac6a9595",
            "67e0bd5d1bfcfea6",
            "5503e93fd90f460a",
            "12c46c6f3f58f59b",
            "49b8f72cb8a26ce2"
        ],
        "x": 794,
        "y": 1059,
        "w": 812,
        "h": 522
    },
    {
        "id": "f0bcc0434d35f8db",
        "type": "mqtt in",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "MQTT In",
        "topic": "",
        "qos": "2",
        "datatype": "utf8",
        "broker": "489094618c340eef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 1060,
        "y": 1460,
        "wires": [
            [
                "2a0268a55eadf72f"
            ]
        ]
    },
    {
        "id": "2a0268a55eadf72f",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "Toggle Chamber Light",
        "func": "var on = { \"system\": { \"sequence_id\": \"2003\", \"command\": \"ledctrl\", \"led_node\": \"chamber_light\", \"led_mode\": \"on\", \"led_on_time\": 500, \"led_off_time\": 500, \"loop_times\": 0, \"interval_time\": 0 }, \"user_id\": \"123456789\" }\nvar off = { \"system\": { \"sequence_id\": \"2003\", \"command\": \"ledctrl\", \"led_node\": \"chamber_light\", \"led_mode\": \"off\", \"led_on_time\": 500, \"led_off_time\": 500, \"loop_times\": 0, \"interval_time\": 0 }, \"user_id\": \"123456789\" }\n\nif(flow.get(\"is_connected\")== \"true\"){\n    if(msg.payload == \"ON\") {\n        node.send({ \"payload\": on, \"topic\": \"device/\" + flow.get(\"printer_serial\") + \"/request\" });\n    }\n    else if (msg.payload == \"OFF\") {\n        node.send({ \"payload\": off, \"topic\": \"device/\" + flow.get(\"printer_serial\") + \"/request\" });\n    }\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 1460,
        "wires": [
            [
                "dd09cb99c169d139"
            ]
        ]
    },
    {
        "id": "c93c3bb2cc88b9dc",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "Set Speed Profile",
        "func": "var template = { \n    \"print\": {\n        \"sequence_id\": \"2004\", \n        \"command\": \"print_speed\",\n        \"param\": \"2\" \n    },\n    \"user_id\": \"1234567890\"\n}\n\n// In case you want to send a string message\nif (msg.payload !== undefined) {\n    switch (msg.payload) {\n        case \"Silent\":\n            template.print.param= \"1\";\n            break;\n        case \"Standard\":\n            template.print.param = \"2\";\n            break;\n        case \"Sport\":\n            template.print.param = \"3\";\n            break;\n        case \"Ludicrous\":\n            template.print.param = \"4\";\n            break;\n        default:\n            return;\n    }\n}\nif (flow.get(\"is_connected\") == \"true\") {\n    node.send({ \"payload\": template, \"topic\": \"device/\" + flow.get(\"printer_serial\") + \"/request\" });\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 1300,
        "wires": [
            [
                "e34f034bed456673"
            ]
        ]
    },
    {
        "id": "a4d29254d471acd7",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "Control",
        "func": "var pause = { \"print\": { \"sequence_id\": \"2008\", \"command\": \"pause\" }, \"user_id\": \"123456789\" }\nvar resume = { \"print\": { \"sequence_id\": \"2009\", \"command\": \"resume\"}, \"user_id\": \"123456789\" }\nvar stop = { \"print\": { \"sequence_id\": \"2010\", \"command\": \"stop\" }, \"user_id\": \"123456789\" }\nif(flow.get(\"is_connected\") == \"true\") {\n    if(msg.payload == \"PAUSE\") {\n        node.send({ \"payload\": pause, \"topic\": \"device/\" + flow.get(\"printer_serial\") + \"/request\" });\n    }\n    else if (msg.payload == \"RESUME\") {\n        node.send({ \"payload\": resume, \"topic\": \"device/\" + flow.get(\"printer_serial\") + \"/request\" });\n    }\n    else if(msg.payload == \"STOP\") {\n        node.send({ \"payload\": stop, \"topic\": \"device/\" + flow.get(\"printer_serial\") + \"/request\" })\n    }\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 1140,
        "wires": [
            [
                "8d932b10ba1a9ae6"
            ]
        ]
    },
    {
        "id": "d20b02ea37dbdddf",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "pause",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "PAUSE",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1210,
        "y": 1100,
        "wires": [
            [
                "a4d29254d471acd7"
            ]
        ]
    },
    {
        "id": "8959434b99b38bdd",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "resume",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "RESUME",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 1140,
        "wires": [
            [
                "a4d29254d471acd7"
            ]
        ]
    },
    {
        "id": "ec6f548a5bc948b2",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "stop",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "STOP",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1210,
        "y": 1180,
        "wires": [
            [
                "a4d29254d471acd7"
            ]
        ]
    },
    {
        "id": "b4eef9bbefd37b47",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "Clear Virtual Tray",
        "func": "let payload = {\n    \"print\": {\n        \"command\": \"ams_filament_setting\",\n        \"sequence_id\": \"2030\",\n        \"ams_id\": 255,\n        \"tray_id\": 254,\n        \"tray_info_idx\": \"\",\n        \"setting_id\": \"\",\n        \"tray_color\": \"00000000\",\n        \"nozzle_temp_min\": 0,\n        \"nozzle_temp_max\": 0,\n        \"tray_type\": \"\"\n    }\n}\nmsg.payload = payload;\nmsg.topic = \"device/\" + flow.get(\"printer_serial\") + \"/request\";\nif(flow.get(\"is_connected\") == \"true\")\n    node.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 1220,
        "wires": [
            [
                "06b41595e510d71f"
            ]
        ]
    },
    {
        "id": "1e92fa493eba35e5",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "Unload Filament",
        "func": "let payload = {\n     \"print\": {\n          \"sequence_id\": \"2027\", \n          \"command\": \"gcode_file\",\n           \"param\": \"/usr/etc/print/filament_unload.gcode\" \n    },\n    \"user_id\": \"1234567890\"\n };\nmsg.payload = payload;\nmsg.topic = \"device/\" + flow.get(\"printer_serial\") + \"/request\";\nif(flow.get(\"is_connected\") == \"true\")\n     node.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 1260,
        "wires": [
            [
                "06b41595e510d71f"
            ]
        ]
    },
    {
        "id": "43a363db881ad67d",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "Sub",
        "func": "if (!flow.get(\"can_request\")) {\n    return;\n}\n\nlet topic = flow.get(\"root_topic\");\nlet device = flow.get(\"HA_DEVICE\");\nlet config1 = {\n    \"action\": \"subscribe\",\n    \"topic\": {\n        \"topic\": topic + \"/light/\" + device + \"/chamber_light/set\",\n        \"qos\": 2\n    }\n}\nlet config11 = {\n    \"action\": \"subscribe\",\n    \"topic\": {\n        \"topic\": topic + \"/number/\" + device + \"/set_chamber_temp/set\",\n        \"qos\": 2\n    }\n}\nnode.send([config1, config11]);",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1500,
        "wires": [
            [
                "f0bcc0434d35f8db"
            ],
            [
                "152f2aeb30a1082f"
            ]
        ]
    },
    {
        "id": "8d932b10ba1a9ae6",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "Not Gcode",
        "rules": [
            {
                "t": "set",
                "p": "is_gcode_type",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1490,
        "y": 1220,
        "wires": [
            [
                "8bf08c882d962917"
            ]
        ]
    },
    {
        "id": "8bf08c882d962917",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "Request Out",
        "mode": "link",
        "links": [
            "5c030c48f393ada7"
        ],
        "x": 1535,
        "y": 1260,
        "wires": []
    },
    {
        "id": "8eea69a76cf784bf",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "MQTT Init - In",
        "links": [
            "123228b4999f2d36"
        ],
        "x": 835,
        "y": 1240,
        "wires": [
            [
                "43a363db881ad67d",
                "6cf7aa99654f021c",
                "097fbc5e089e1502",
                "d05bfadd27350709",
                "e25fd29f68e5e91c"
            ]
        ]
    },
    {
        "id": "e34f034bed456673",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "x": 1440,
        "y": 1300,
        "wires": [
            [
                "06b41595e510d71f"
            ]
        ]
    },
    {
        "id": "064800d33ec35e0a",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "Toggle Actions",
        "func": "let message = { \"payload\": \"\", \"topic\": \"device/\" + flow.get(\"printer_serial\") + \"/request\" }\nvar recording = {\n    \"camera\": {\n        \"sequence_id\": \"0\",\n        \"command\": \"ipcam_record_set\",\n        \"control\": \"\"\n    }\n};\nvar timelapse = {\n    \"camera\": {\n        \"sequence_id\": \"0\",\n        \"command\": \"ipcam_timelapse\",\n        \"control\": \"\"\n    }\n};\n\nvar xcam = {\n    \"xcam\": {\n        \"sequence_id\": \"0\",\n        \"command\": \"xcam_control_set\",\n        \"module_name\": \"\", \n        \"control\": null,\n        \"enable\": null,\n        \"print_halt\": true\n    }\n}\n// buildplate_marker_detector\n// first_layer_inspector\n\n// resolutions are 1080p and 720p for X1's and P1's are just 720p?\n\nif(flow.get(\"is_connected\") == \"true\") {\n    let val = \"\";\n    if(msg.payload == \"ON\") {\n        val = \"enable\";\n    }\n    else if (msg.payload == \"OFF\") {\n        val = \"disable\"\n    }\n\n    if(val != \"\") {\n        if (msg.camera_service != undefined) {\n            if (msg.camera_service == \"RECORD\") {\n                message.payload = recording;\n            }\n            else if (msg.camera_service == \"TIMELAPSE\") {\n                node.warn(\"Cannot toggle timelapse setting of printer. This functionality is disabled due to inconsistencies\");\n                return;\n                //message.payload = timelapse;\n            }\n            message.payload.camera.control = val;\n        }\n        else {\n            if (msg.topic.includes(\"buildplate\")) {\n                xcam['xcam']['module_name'] = \"buildplate_marker_detector\";\n\n            }\n            else if (msg.topic.includes(\"layer_inspection\")) {\n                xcam['xcam']['module_name'] = \"first_layer_inspector\";\n            }\n            else {\n                return;\n            }\n            xcam['xcam']['control'] = msg.payload == \"ON\";\n            xcam['xcam']['enable'] = msg.payload == \"ON\";\n            message.payload = xcam;\n\n        }\n        node.send(message);\n    }\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 1380,
        "wires": [
            [
                "dd09cb99c169d139"
            ]
        ]
    },
    {
        "id": "f00fd783bad0e3d7",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "Recording",
        "rules": [
            {
                "t": "set",
                "p": "camera_service",
                "pt": "msg",
                "to": "RECORD",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 1340,
        "wires": [
            [
                "064800d33ec35e0a"
            ]
        ]
    },
    {
        "id": "5aa39146def9575b",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "Timelapse",
        "rules": [
            {
                "t": "set",
                "p": "camera_service",
                "pt": "msg",
                "to": "TIMELAPSE",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 1380,
        "wires": [
            [
                "064800d33ec35e0a"
            ]
        ]
    },
    {
        "id": "a49df521f46fc751",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "Set Camera Resolution",
        "func": "if(!(flow.get(\"camera_resolutions\").includes(msg.payload))) {\n    return;\n}\nif(!flow.get(\"has_ipcam\")) {\n    node.warn(\"Cannot change camera resolution. Printer does not have a camera\");\n    return;\n}\nvar template = { \n    \"camera\": {\n        \"sequence_id\": \"2004\", \n        \"command\": \"ipcam_resolution_set\",\n        \"resolution\": msg.payload\n    },\n    \"user_id\": \"1234567890\"\n}\n\nif (flow.get(\"is_connected\") == \"true\") {\n    node.send({ \"payload\": template, \"topic\": \"device/\" + flow.get(\"printer_serial\") + \"/request\" });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 1340,
        "wires": [
            [
                "dd09cb99c169d139"
            ]
        ]
    },
    {
        "id": "dd09cb99c169d139",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "x": 1460,
        "y": 1400,
        "wires": [
            [
                "e34f034bed456673"
            ]
        ]
    },
    {
        "id": "152f2aeb30a1082f",
        "type": "mqtt in",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "MQTT In",
        "topic": "",
        "qos": "2",
        "datatype": "utf8",
        "broker": "489094618c340eef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 1060,
        "y": 1500,
        "wires": [
            [
                "9cc47e1371edce04"
            ]
        ]
    },
    {
        "id": "9cc47e1371edce04",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "Set Chamber Target",
        "func": "let has_chamber_heat_possible = (flow.get(\"model\") == \"X1E\"); // will need to change if they add retro-support\nlet max = 60;\nlet fila = flow.get(\"current_filament\");\nif(fila == \"TPU\" || fila == \"PLA\" || fila == \"PETG\") {\n    max = 45;\n}\n\nmsg.payload = parseInt(msg.payload);\nif (msg.payload == undefined || isNaN(msg.payload || \nmsg.payload < 0 || msg.payload > max)) {\n    return;\n}\nif(msg.payload < 40) {\n    msg.payload = 0;\n}\n\nvar template = {\n    \"print\": {\n        \"sequence_id\": \"2004\",\n        \"command\": \"set_ctt\",\n        \"ctt_val\": msg.payload\n    },\n    \"user_id\": \"1234567890\"\n}\n\n\nif (flow.get(\"is_connected\") == \"true\" && has_chamber_heat_possible) {\n    node.send({ \"payload\": template, \"topic\": \"device/\" + flow.get(\"printer_serial\") + \"/request\" });\n}\n\n\n/*\nLow temperature filament(PLA/PETG/TPU) is loaded in the extruder.In order to avoid extruder clogging,it is not allowed to set the chamber temperature above 45\\u2103.\n\nWhen you set the chamber temperature below 40\\u2103, the chamber temperature control will not be activated. And the target chamber temperature will automatically be set to 0\\u2103.\n\n*/",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 1500,
        "wires": [
            [
                "dd09cb99c169d139"
            ]
        ]
    },
    {
        "id": "6cf7aa99654f021c",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "Sub",
        "func": "if (!flow.get(\"can_request\")) {\n    return;\n}\n\nlet topic = flow.get(\"root_topic\");\nlet device = flow.get(\"HA_DEVICE\");\n\nlet config = {\n    \"action\": \"subscribe\",\n    \"topic\": {\n        \"topic\": topic + \"/button/\" + device + \"/+\",\n        \"qos\": 2\n    }\n}\nnode.send(config);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1100,
        "wires": [
            [
                "4516a624c7338854"
            ]
        ]
    },
    {
        "id": "4516a624c7338854",
        "type": "mqtt in",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "MQTT In",
        "topic": "",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "489094618c340eef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 960,
        "y": 1140,
        "wires": [
            [
                "4e5d0e780f6fde79"
            ]
        ]
    },
    {
        "id": "4e5d0e780f6fde79",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "Button",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "/pause_print",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/resume_print",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/stop_print",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/clear_external_spool",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/unload_filament",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 1090,
        "y": 1180,
        "wires": [
            [
                "d20b02ea37dbdddf"
            ],
            [
                "8959434b99b38bdd"
            ],
            [
                "ec6f548a5bc948b2"
            ],
            [
                "b4eef9bbefd37b47"
            ],
            [
                "1e92fa493eba35e5"
            ]
        ]
    },
    {
        "id": "06b41595e510d71f",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "x": 1400,
        "y": 1260,
        "wires": [
            [
                "8d932b10ba1a9ae6"
            ]
        ]
    },
    {
        "id": "097fbc5e089e1502",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "Sub",
        "func": "if (!flow.get(\"can_request\")) {\n    return;\n}\n\nlet topic = flow.get(\"root_topic\");\nlet device = flow.get(\"HA_DEVICE\");\n\nlet config = {\n    \"action\": \"subscribe\",\n    \"topic\": {\n        \"topic\": topic + \"/select/\" + device + \"/+/set\",\n        \"qos\": 2\n    }\n}\nnode.send(config);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1180,
        "wires": [
            [
                "c4c11e4f3bbb2b8b"
            ]
        ]
    },
    {
        "id": "c4c11e4f3bbb2b8b",
        "type": "mqtt in",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "MQTT In",
        "topic": "",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "489094618c340eef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 960,
        "y": 1220,
        "wires": [
            [
                "46788feec6a79963"
            ]
        ]
    },
    {
        "id": "46788feec6a79963",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "Select",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "/speed/set",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/camera_resolution/set",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 950,
        "y": 1260,
        "wires": [
            [
                "5503e93fd90f460a"
            ],
            [
                "a49df521f46fc751"
            ]
        ]
    },
    {
        "id": "d05bfadd27350709",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "Sub",
        "func": "if (!flow.get(\"can_request\")) {\n    return;\n}\n\nlet topic = flow.get(\"root_topic\");\nlet device = flow.get(\"HA_DEVICE\");\n\nlet config = {\n    \"action\": \"subscribe\",\n    \"topic\": {\n        \"topic\": topic + \"/switch/\" + device + \"/+/set\",\n        \"qos\": 2\n    }\n}\nnode.send(config);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1300,
        "wires": [
            [
                "6c3952bd983b3ce8"
            ]
        ]
    },
    {
        "id": "6c3952bd983b3ce8",
        "type": "mqtt in",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "MQTT In",
        "topic": "",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "489094618c340eef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 1020,
        "y": 1300,
        "wires": [
            [
                "325a80bde015fd7b"
            ]
        ]
    },
    {
        "id": "325a80bde015fd7b",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "Switch",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "/toggle_recording/set",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/toggle_timelapse/set",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/toggle_air_print_detection/set",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/toggle_nozzle_blob_detection/set",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/toggle_sound_prompt/set",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/toggle_auto_recovery/set",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/toggle_filament_tangle/set",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/toggle_auto_switch/set",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/toggle_buildplate_detection/set",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/toggle_first_layer_inspection/set",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 10,
        "x": 910,
        "y": 1400,
        "wires": [
            [
                "f00fd783bad0e3d7"
            ],
            [
                "5aa39146def9575b"
            ],
            [
                "49b8f72cb8a26ce2"
            ],
            [
                "49b8f72cb8a26ce2"
            ],
            [
                "49b8f72cb8a26ce2"
            ],
            [
                "49b8f72cb8a26ce2"
            ],
            [
                "49b8f72cb8a26ce2"
            ],
            [
                "49b8f72cb8a26ce2"
            ],
            [
                "064800d33ec35e0a"
            ],
            [
                "064800d33ec35e0a"
            ]
        ]
    },
    {
        "id": "e25fd29f68e5e91c",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "Sub",
        "func": "if (!flow.get(\"can_request\")) {\n    return;\n}\nlet topic = flow.get(\"root_topic\");\nlet device = flow.get(\"HA_DEVICE\");\nlet config1 = {\n    \"action\": \"subscribe\",\n    \"topic\": {\n        \"topic\": topic + \"/text/\" + device + \"/+/set\",\n        \"qos\": 2\n    }\n}\n\nnode.send(config1);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1540,
        "wires": [
            [
                "3ebc9dbc1331e7d9"
            ]
        ]
    },
    {
        "id": "3ebc9dbc1331e7d9",
        "type": "mqtt in",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "MQTT In",
        "topic": "",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "489094618c340eef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 1060,
        "y": 1540,
        "wires": [
            [
                "d6bc33b26e81afb1"
            ]
        ]
    },
    {
        "id": "d6bc33b26e81afb1",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "Text",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "/gcode_command/set",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1190,
        "y": 1540,
        "wires": [
            [
                "17a33be3cb810dc8"
            ]
        ]
    },
    {
        "id": "17a33be3cb810dc8",
        "type": "rbe",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1310,
        "y": 1540,
        "wires": [
            [
                "4caad12ee9b3773c"
            ]
        ]
    },
    {
        "id": "4caad12ee9b3773c",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "GCode Cmd",
        "func": "if (msg.payload == \"unknown\") {\n    msg.payload = \"\";\n}\nif (msg.payload != undefined && msg.payload != \"unknown\"){\n    flow.set(\"gcode_command_req\", msg.payload);\n    let trim = msg.payload;\n    if (trim != undefined && trim.length > 10) {\n        trim = trim.slice(0, 10) + \"...\";\n    }\n    node.status({ fill: \"orange\", shape: \"ring\", text: trim });\n\n    msg.topic = \"gcode_command\";\n    function sendNonEmpty(message) {\n        if (message.topic.includes(\"/uptime\")) {\n            node.send(message);\n            return;\n        }\n        if(message.payload == 0 || (message.payload != undefined && (message.payload != \"\" || \n            (Object.keys(message.payload) != undefined && Object.keys(message.payload).length != 0)))) {\n            node.send(message);\n        }\n    }\n\n    let retained = flow.get(\"retained_mqtt\");\n    for (var r of retained) {\n        if (msg.topic.endsWith(r)) {\n            msg.retain = true;\n            msg.qos = 2;\n            break;\n        }\n    }\n    let hasAttr = false;\n    let entity_type = \"text\";\n    if (msg.payload == undefined && msg.topic != \"uptime\") {\n        return;\n    }\n    let root_topic = flow.get(\"root_topic\");\n    let ha_device_name = flow.get(\"HA_DEVICE\");\n\n    msg.topic = root_topic + \"/\" + entity_type + \"/\" + ha_device_name + \"/\" + msg.topic + \"/set\";\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 1540,
        "wires": [
            [
                "8ccfff70ac6a9595"
            ]
        ]
    },
    {
        "id": "8ccfff70ac6a9595",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "Data Filter Out",
        "mode": "link",
        "links": [
            "45db6c3763eeabfe"
        ],
        "x": 1565,
        "y": 1540,
        "wires": []
    },
    {
        "id": "67e0bd5d1bfcfea6",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "Set Speed Prof In",
        "links": [
            "5503e93fd90f460a",
            "6645ea410f0ea388"
        ],
        "x": 1175,
        "y": 1300,
        "wires": [
            [
                "c93c3bb2cc88b9dc"
            ]
        ]
    },
    {
        "id": "5503e93fd90f460a",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "Set Speed Profile Out",
        "mode": "link",
        "links": [
            "67e0bd5d1bfcfea6"
        ],
        "x": 1055,
        "y": 1260,
        "wires": []
    },
    {
        "id": "12c46c6f3f58f59b",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "name": "Toggle Options",
        "func": "let message = { \"payload\": \"\", \"topic\": \"device/\" + flow.get(\"printer_serial\") + \"/request\" }\nif (msg.payload != \"ON\" && msg.payload != \"OFF\") {\n    return;\n}\n\nvar payload = {\n    \"print\": {\n        \"sequence_id\": \"0\",\n        \"command\": \"print_option\"\n    }\n};\n\nif (msg.topic.includes(\"air_print\")) {\n    payload.print['air_print_detect'] = msg.payload == \"ON\";\n}\nelse if (msg.topic.includes(\"nozzle_blob\")) {\n    payload.print[\"nozzle_blob_detect\"] = msg.payload == \"ON\";\n}\nelse if (msg.topic.includes(\"auto_recovery\")) {\n\n    let PRINT_OP_AUTO_RECOVERY = 0;\n    payload.print[\"option\"] = parseInt(msg.payload == \"ON\" ? 1 : 0) << PRINT_OP_AUTO_RECOVERY;\n    payload.print[\"auto_recovery\"] = msg.payload == \"ON\";\n}\nelse if (msg.topic.includes(\"prompt_sound\")) {\n    payload.print[\"sound_enable\"] = msg.payload == \"ON\";\n}\nelse if (msg.topic.includes(\"filament_tangle\")) {\n    payload.print[\"filament_tangle_detect\"] = msg.payload == \"ON\";\n}\nelse if (msg.topic.includes(\"auto_switch\")) {\n    payload.print[\"auto_switch_filament\"] = msg.payload == \"ON\";\n}\nelse {\n    return;\n}\n\nif(flow.get(\"is_connected\") == \"true\") {\n    message.payload = payload;\n    node.send(message);\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 1420,
        "wires": [
            [
                "dd09cb99c169d139"
            ]
        ]
    },
    {
        "id": "49b8f72cb8a26ce2",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "898dd84e912849f7",
        "x": 1160,
        "y": 1420,
        "wires": [
            [
                "12c46c6f3f58f59b"
            ]
        ]
    },
    {
        "id": "b45e53e0bd944b43",
        "type": "group",
        "z": "fbda6ab16491b918",
        "g": "296274a0d2a6c675",
        "name": "Printer - MC Print Msgs",
        "style": {
            "label": true
        },
        "nodes": [
            "b5232b827fbef671",
            "4a696bec52ae5acb",
            "962c0c56346e023a",
            "8548eff7812ded96",
            "f3cfc302c5969a27",
            "637a201f855cd23f",
            "ef76b3bf9e0b275d",
            "03130ce05f9324be"
        ],
        "x": 1054,
        "y": 599,
        "w": 562,
        "h": 122
    },
    {
        "id": "b5232b827fbef671",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "b45e53e0bd944b43",
        "name": "AMS Humidity",
        "func": "if (msg.payload.mc_print != undefined && msg.payload.mc_print.command == \"push_info\") {\n    if (msg.payload.mc_print.param != undefined && msg.payload.mc_print.param.startsWith(\"[AMS][TASK]\")) {\n        if(msg.payload.mc_print.param.includes(\"humidity\")) {\n            let param = msg.payload.mc_print.param;\n            let amsId = param.match(/ams(\\d+) /)[1];\n            let humidity = param.match(/humidity:(\\d+)%/)[1];\n\n            msg.topic = \"AMS\";\n\n            msg.machine_name = msg.topic + \"_\" + amsId + \"_\" + msg.payload.mc_print.machine_name;\n            \n            msg.payload = {\n                \"humidity\": humidity\n            }\n            flow.set(\"has_humidity_pct\", true);\n            node.send(msg);\n        }\n    }\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 680,
        "wires": [
            [
                "4a696bec52ae5acb"
            ]
        ]
    },
    {
        "id": "4a696bec52ae5acb",
        "type": "split",
        "z": "fbda6ab16491b918",
        "g": "b45e53e0bd944b43",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 1490,
        "y": 680,
        "wires": [
            [
                "f3cfc302c5969a27"
            ]
        ]
    },
    {
        "id": "962c0c56346e023a",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "b45e53e0bd944b43",
        "name": "",
        "property": "payload.mc_print.param",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "[BMC] M900",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "humidity",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1190,
        "y": 660,
        "wires": [
            [
                "8548eff7812ded96"
            ],
            [
                "b5232b827fbef671"
            ],
            []
        ]
    },
    {
        "id": "8548eff7812ded96",
        "type": "function",
        "z": "fbda6ab16491b918",
        "d": true,
        "g": "b45e53e0bd944b43",
        "name": "PA Cal",
        "func": "if (msg.payload.mc_print != undefined && msg.payload.mc_print.command == \"push_info\") {\n    if (msg.payload.mc_print.param != undefined && msg.payload.mc_print.param.startsWith(\"[BMC] M900 K\")) {\n\n            let param = msg.payload.mc_print.param;\n            let calib_value = param.match(/K(\\d+\\.\\d+)/)[1];\n\n            msg.topic = \"last_calibrated_pa\";\n\n            msg.machine_name = flow.get(\"model\") +\"_\" + msg.payload.mc_print.machine_name;\n\n            msg.payload = {\n                \"last_calibrated_pa\": calib_value\n            };\n\n            node.send(msg);   \n    }\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 640,
        "wires": [
            [
                "637a201f855cd23f"
            ]
        ]
    },
    {
        "id": "f3cfc302c5969a27",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "b45e53e0bd944b43",
        "name": "AMS-Payloads-Out",
        "mode": "link",
        "links": [
            "aec55e8cba8dc837"
        ],
        "x": 1575,
        "y": 680,
        "wires": []
    },
    {
        "id": "637a201f855cd23f",
        "type": "split",
        "z": "fbda6ab16491b918",
        "g": "b45e53e0bd944b43",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 1430,
        "y": 640,
        "wires": [
            [
                "ef76b3bf9e0b275d"
            ]
        ]
    },
    {
        "id": "ef76b3bf9e0b275d",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "b45e53e0bd944b43",
        "name": "Printer-Payloads-Out",
        "mode": "link",
        "links": [
            "270186a0ec06877a"
        ],
        "x": 1515,
        "y": 640,
        "wires": []
    },
    {
        "id": "03130ce05f9324be",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "b45e53e0bd944b43",
        "name": "Printer-MC_Print_In",
        "links": [
            "b21b873582a6bd25"
        ],
        "x": 1095,
        "y": 660,
        "wires": [
            [
                "962c0c56346e023a"
            ]
        ]
    },
    {
        "id": "e00ec6d70ce9ed4e",
        "type": "group",
        "z": "fbda6ab16491b918",
        "g": "296274a0d2a6c675",
        "name": "Printer - Info Msgs",
        "style": {
            "label": true
        },
        "nodes": [
            "97e117e5e3b6b2ac",
            "574efe9bef59bfe8",
            "dff0a7bcab99db34",
            "17dc50ac469fdac7",
            "51c3cfdad1576d27",
            "2dcd252aec842a4b",
            "0539d7216c7abb63",
            "dae563cbc58f46bd",
            "f8cc5047319b9229",
            "42610a7dcf4be785",
            "32e2a8977a42b521"
        ],
        "x": 1614,
        "y": 1159,
        "w": 412,
        "h": 202
    },
    {
        "id": "97e117e5e3b6b2ac",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "e00ec6d70ce9ed4e",
        "name": "",
        "property": "payload.info.command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "get_version",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1750,
        "y": 1200,
        "wires": [
            [
                "574efe9bef59bfe8"
            ],
            []
        ]
    },
    {
        "id": "574efe9bef59bfe8",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "e00ec6d70ce9ed4e",
        "name": "Parse Versions",
        "func": "let data = {\n    \"printer\": {}\n};\n\nif(msg.payload.info.module !== undefined) {\n    for(var m of msg.payload.info.module) {\n\n        if (m.name.includes(\"ams/\")) {\n            let n = \"AMS\"+ m.name.replace(\"ams/\", \"_\");\n            data[n] = {};\n            data[n].SW_version = m.sw_ver;\n            data[n].serial_number = m.sn;\n            data[n].HW_version = m.hw_ver;\n            continue;\n        }\n        else if (m.name.includes(\"ams_f1/\")){\n            let n = \"AMS\"+ m.name.replace(\"ams_f1/\", \"_\");\n            data[n] = {};\n            data[n].SW_version = m.sw_ver;\n            data[n].serial_number = m.sn;\n            data[n].HW_version = m.hw_ver;\n            continue;\n        }\n        else {\n            switch(m.name) {\n                case \"ota\":\n                    data.printer.SW_version = m.sw_ver;\n                    break;\n                case \"rv1126\":\n                    data.printer.serial_number = m.sn;\n                    data.printer.HW_version = m.hw_ver;\n                    break;\n                case \"esp32\":\n                    data.printer.serial_number = m.sn;\n                    data.printer.HW_version = m.hw_ver;\n                    break;\n            }\n            continue;\n        }\n    }\n    msg.payload = data;\n    if (msg.payload.printer != undefined && msg.payload.printer.SW_version != undefined && msg.payload.printer.SW_version != \"\"\n        && flow.get(\"x1plus_installed\") != undefined && flow.get(\"x1plus_installed\") == true) {\n            if(msg.payload.printer.SW_version.startsWith(\"99\")) {\n                if(flow.get(\"x1plus_active\") == undefined || flow.get(\"x1plus_active\") == false) {\n                    node.warn(\"[INFO] X1Plus CFW is currently Active\");\n                }\n                flow.set(\"x1plus_active\", true);\n                flow.set(\"can_bedmesh\", true);\n            }\n            else{\n                if(flow.get(\"x1plus_active\") == undefined || flow.get(\"x1plus_active\") == true){\n                    node.warn(\"[INFO] X1Plus CFW is currently Not Active\");\n                }\n                flow.set(\"x1plus_active\", false); \n            }\n        }\n    \n    node.send(msg);\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 1200,
        "wires": [
            [
                "dff0a7bcab99db34"
            ]
        ]
    },
    {
        "id": "dff0a7bcab99db34",
        "type": "split",
        "z": "fbda6ab16491b918",
        "g": "e00ec6d70ce9ed4e",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 1690,
        "y": 1240,
        "wires": [
            [
                "2dcd252aec842a4b"
            ]
        ]
    },
    {
        "id": "17dc50ac469fdac7",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "e00ec6d70ce9ed4e",
        "name": "ams",
        "func": "let name = msg.topic;//.replace(\"AMS\", \"AMS_\");\nmsg.machine_name = name + \"_\" + flow.get(\"printer_name\");\nmsg.topic = \"AMS\";\nmsg.model = \"AMS\";\nmsg.printer_serial = msg.machine_serial;\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 1240,
        "wires": [
            [
                "0539d7216c7abb63"
            ]
        ]
    },
    {
        "id": "51c3cfdad1576d27",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "e00ec6d70ce9ed4e",
        "name": "printer",
        "func": "msg.topic = flow.get(\"model\");//_\" + msg.payload.id;\n\nmsg.machine_name = msg.topic + \"_\" + msg.printer_name;\nmsg.model = flow.get(\"model\");\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 1280,
        "wires": [
            [
                "dae563cbc58f46bd"
            ]
        ]
    },
    {
        "id": "2dcd252aec842a4b",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "e00ec6d70ce9ed4e",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "AMS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1810,
        "y": 1240,
        "wires": [
            [
                "17dc50ac469fdac7"
            ],
            [
                "51c3cfdad1576d27"
            ]
        ]
    },
    {
        "id": "0539d7216c7abb63",
        "type": "split",
        "z": "fbda6ab16491b918",
        "g": "e00ec6d70ce9ed4e",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 1950,
        "y": 1280,
        "wires": [
            [
                "f8cc5047319b9229"
            ]
        ]
    },
    {
        "id": "dae563cbc58f46bd",
        "type": "split",
        "z": "fbda6ab16491b918",
        "g": "e00ec6d70ce9ed4e",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 1810,
        "y": 1280,
        "wires": [
            [
                "42610a7dcf4be785"
            ]
        ]
    },
    {
        "id": "f8cc5047319b9229",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "e00ec6d70ce9ed4e",
        "name": "AMS-Payloads-Out",
        "mode": "link",
        "links": [
            "aec55e8cba8dc837"
        ],
        "x": 1955,
        "y": 1320,
        "wires": []
    },
    {
        "id": "42610a7dcf4be785",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "e00ec6d70ce9ed4e",
        "name": "Printer-Payloads-Out",
        "mode": "link",
        "links": [
            "270186a0ec06877a"
        ],
        "x": 1885,
        "y": 1320,
        "wires": []
    },
    {
        "id": "32e2a8977a42b521",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "e00ec6d70ce9ed4e",
        "name": "Printer-Info_In",
        "links": [
            "5fb6dc8d8d5ee7ab"
        ],
        "x": 1665,
        "y": 1200,
        "wires": [
            [
                "97e117e5e3b6b2ac"
            ]
        ]
    },
    {
        "id": "7ca49c9b3babbf11",
        "type": "group",
        "z": "fbda6ab16491b918",
        "g": "296274a0d2a6c675",
        "name": "Printer - System Msgs",
        "style": {
            "label": true
        },
        "nodes": [
            "bc142c175c0f9fb0",
            "6a38ae324bf53fef",
            "8f67e32d267423ea",
            "bf966f083683f4da"
        ],
        "x": 2184,
        "y": 559,
        "w": 262,
        "h": 122
    },
    {
        "id": "bc142c175c0f9fb0",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "7ca49c9b3babbf11",
        "name": "Get Accessories",
        "func": "if(msg.payload.system != undefined &&\nmsg.payload.system.command != undefined &&\n msg.payload.system.command == \"get_accessories\") {\n    delete msg.payload.system.command;\n    delete msg.payload.system.sequence_id;\n    delete msg.payload.system.accessory_type;\n    delete msg.payload.system.aux_part_fan;\n    delete msg.payload.system.result;\n    delete msg.payload.system.nozzle_diameter;\n\n    msg.payload = msg.payload.system;\n    node.send(msg);\n }",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2340,
        "y": 600,
        "wires": [
            [
                "8f67e32d267423ea"
            ]
        ]
    },
    {
        "id": "6a38ae324bf53fef",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "7ca49c9b3babbf11",
        "name": "Printer-System_In",
        "links": [
            "4f076de3fb5b0359"
        ],
        "x": 2225,
        "y": 600,
        "wires": [
            [
                "bc142c175c0f9fb0"
            ]
        ]
    },
    {
        "id": "8f67e32d267423ea",
        "type": "split",
        "z": "fbda6ab16491b918",
        "g": "7ca49c9b3babbf11",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 2310,
        "y": 640,
        "wires": [
            [
                "bf966f083683f4da"
            ]
        ]
    },
    {
        "id": "bf966f083683f4da",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "7ca49c9b3babbf11",
        "name": "Printer-Payloads-Out",
        "mode": "link",
        "links": [
            "270186a0ec06877a"
        ],
        "x": 2405,
        "y": 640,
        "wires": []
    },
    {
        "id": "2c85ae767fb7b15d",
        "type": "group",
        "z": "fbda6ab16491b918",
        "g": "296274a0d2a6c675",
        "name": "AMS - General",
        "style": {
            "label": true
        },
        "nodes": [
            "ff09ef39735c8dd8",
            "07ff86f3cd404e2d",
            "3412b5c7efd1d41e",
            "1f0305e93eed961a",
            "2a60f3818c07cead",
            "bf872cba7b8d4a63",
            "2f77cb6feca03746",
            "69cba2483fe68056",
            "a0317478d3f43ecf",
            "080745c0307e0218",
            "ceef34fb1803fabb",
            "3e88e7f16efe9866",
            "aec55e8cba8dc837",
            "d4985928203ea691",
            "82aa9f4491e3400c",
            "a8eb2272dd38dd3e",
            "ecf4cb43eed20ca0",
            "b3ee63836831ea89",
            "735003dd7602e7dc",
            "9693988d17d6b075",
            "7ec4f5ae5c5f4a57"
        ],
        "x": 1084,
        "y": 739,
        "w": 522,
        "h": 302
    },
    {
        "id": "ff09ef39735c8dd8",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "2c85ae767fb7b15d",
        "name": "AMS Config",
        "func": "let data = {};\nlet payload = {};\nlet device = {};\nlet root_topic = flow.get(\"root_topic\");\nvar printer_name = flow.get(\"model\") + \"_\";\nprinter_name = printer_name + msg.machine_name.match(/AMS_\\d+_(.*)/)[1];\n\nlet hasMCPrint = false;\nlet versions = flow.get(\"mc_print_versions\");\nif (versions[flow.get(\"model\")] != undefined) {\n    let valid_versions = versions[flow.get(\"model\")];\n    if (valid_versions.length > 0 && valid_versions.includes(flow.get(\"fw_version\"))) {\n        hasMCPrint = true;\n    }\n}\n\n// Inject config\nif (msg.topic.match(/temper/)) {\n    msg.device_class = \"temperature\";\n}\nif (msg.topic.match(/temp/)) {\n    msg.device_class = \"temperature\";\n}\n\nif(msg.topic == \"humidity\") {\n    if(hasMCPrint || flow.get(\"has_humidity_pct\")) {\n        msg.device_class = \"humidity\";\n        msg.unit_of_measurement = \"%\";\n    }\n}\n\nif(msg.topic == \"HW_version\") {\n    device.hw_version = msg.payload;\n}\nif(msg.topic == \"SW_version\") {\n    device.sw_version = msg.payload;\n}\n\n\nfunction getFriendlyName(str) {\n    var i, word = str.split('_');\n    for (i = 0; i < word.length; i++) {\n        word[i] = word[i].charAt(0).toUpperCase() + word[i].slice(1);\n    }\n    return word.join(' ');\n}\n\nlet base_topic = root_topic + \"/sensor/\" + msg.machine_name + \"/\" + msg.topic;\ndata.topic = base_topic + \"/config\";\npayload.name = getFriendlyName(msg.topic);\n\n\nif (flow.get(\"ams_serials\") == undefined) {\n    flow.set(\"ams_serials\", {});\n}\ndevice.identifiers = [];\ndevice.identifiers[0] = { \"bambu_lab\": msg.machine_name, \"type\": \"AMS\", \"model\": \"AMS\" };\ndevice.identifiers[1] = msg.machine_name;\nif (msg.topic == \"serial_number\") {\n    msg.entity_category = \"diagnostic\";\n    device.identifiers[2] = msg.payload;\n    device.identifiers[0][\"serial\"] = msg.payload;\n    let serials = flow.get(\"ams_serials\");\n    serials[msg.machine_name] = msg.payload;\n    flow.set(\"ams_serials\", serials);\n}\n\nelse if (flow.get(\"ams_serials\")[msg.machine_name] != undefined) {\n    device.identifiers[0][\"serial\"] = flow.get(\"ams_serials\")[msg.machine_name];\n    device.identifiers[2] = device.identifiers[0][\"serial\"];\n}\n\n\ndevice.identifiers[0] = JSON.stringify(device.identifiers[0]);\n\ndevice.manufacturer = \"Bambu Labs\";\ndevice.model = \"AMS\";\nif(flow.get(\"model\").startsWith(\"A1\")){\n    device.model = \"AMS Lite\";\n    device.identifiers[0][\"model\"] = \"AMS Lite\";\n}\ndevice.name = msg.machine_name;\n\ndevice.via_device = printer_name;\n\n\npayload.device = device;\npayload.unique_id = msg.machine_name + \"_\" + msg.topic;\npayload.object_id = payload.unique_id;\npayload.has_entity_name = false;\n\n//payload.force_update = true;\n\nif (!msg.topic.includes(\"tray\")){\n    //payload.expire_after = 3600;\n}\nelse {\n    payload.icon = \"mdi:printer-3d-nozzle\";\n}\n\nif(msg.topic.match(/serial/)) {\n    payload.icon = \"mdi:barcode\";\n}\nif (msg.topic == \"printer_name\") {\n    payload.icon = \"mdi:printer-3d\";\n}\nif (msg.device_class != undefined)\n    payload.device_class = msg.device_class;\n\nif (msg.unit_of_measurement != undefined)\n    payload.unit_of_measurement = msg.unit_of_measurement;\n\nif (payload.device_class == \"temperature\") {\n    payload.unit_of_measurement = \"°C\";\n    payload.temperature_unit = \"°C\";\n}\n\nif (!msg.topic.includes(\"tray\") && msg.topic != \"id\") {\n    payload.availability_topic = root_topic + \"/\" + \"sensor\" + \"/\" + printer_name + \"/\" + \"status\" + \"/state\";\n}\n\npayload.state_topic = base_topic + \"/state\";\npayload.json_attributes_topic = base_topic + \"/attr\";\ndata.payload = payload;\n\ndata.qos = 1;\ndata.retain = true;\nnode.send(data);\n/*\nif (msg.topic == \"humidity_level\" && !hasMCPrint) {\n    msg.topic = \"humidity\";\n    base_topic = root_topic + \"/sensor/\" + msg.machine_name + \"/\" + msg.topic;\n    data.topic = base_topic + \"/config\";\n\n    payload.state_topic = base_topic + \"/state\";\n    payload.json_attributes_topic = base_topic + \"/attr\";\n    payload.name = \"Humidity\";\n    data.payload = payload;\n\n    data.qos = 1;\n    data.retain = true;\n    node.send(data);\n}*/",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 900,
        "wires": [
            [
                "b3ee63836831ea89"
            ]
        ]
    },
    {
        "id": "07ff86f3cd404e2d",
        "type": "split",
        "z": "fbda6ab16491b918",
        "g": "2c85ae767fb7b15d",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 1390,
        "y": 780,
        "wires": [
            [
                "3412b5c7efd1d41e"
            ]
        ]
    },
    {
        "id": "3412b5c7efd1d41e",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "2c85ae767fb7b15d",
        "name": "ams",
        "func": "msg.topic = \"AMS\";//_\" + msg.payload.id;\n\nmsg.machine_name = msg.topic + \"_\" + msg.payload.id + \"_\" + flow.get(\"printer_name\");\nnode.send(msg);\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 780,
        "wires": [
            [
                "3e88e7f16efe9866"
            ]
        ]
    },
    {
        "id": "1f0305e93eed961a",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "2c85ae767fb7b15d",
        "name": "AMS State",
        "func": "// Filter UoM from payload\nlet root_topic = flow.get(\"root_topic\");\n\nif (msg.topic.match(/tray_\\d+/)) {\n    var oldTopic = msg.topic;\n    if(msg.payload.color != undefined\n        && !msg.payload.color.startsWith(\"#\")) {\n        msg.payload.color = \"#\" + msg.payload.color;\n    }\n    if(msg.payload.type == undefined) {\n        msg.payload.type = \"Empty\";\n        msg.payload.color = \"#808080\";\n        msg.payload.in_use = false;\n    }\n    msg.topic = root_topic+\"/sensor/\" + msg.machine_name + \"/\" + msg.topic + \"/attr\";\n    node.send(msg);\n    msg.topic = oldTopic;\n    msg.payload = msg.payload.type;\n}\nlet hasMCPrint = false;\nlet versions = flow.get(\"mc_print_versions\");\nif (versions[flow.get(\"model\")] != undefined) {\n    let valid_versions = versions[flow.get(\"model\")];\n    if (valid_versions.length > 0 && valid_versions.includes(flow.get(\"fw_version\"))) {\n        hasMCPrint = true;\n    }\n}\n/*if (msg.topic == \"humidity_level\" && !hasMCPrint && flow.get(\"fw_version\") != \"\") {\n    msg.topic = root_topic + \"/sensor/\" + msg.machine_name + \"/\" + \"humidity\" + \"/state\";\n\n    node.send(msg);\n    msg.topic = \"humidity_level\";\n}*/\n\nmsg.topic = root_topic+\"/sensor/\" + msg.machine_name + \"/\" + msg.topic + \"/state\";\n\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 860,
        "wires": [
            [
                "b3ee63836831ea89"
            ]
        ]
    },
    {
        "id": "2a60f3818c07cead",
        "type": "split",
        "z": "fbda6ab16491b918",
        "g": "2c85ae767fb7b15d",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 1190,
        "y": 920,
        "wires": [
            [
                "bf872cba7b8d4a63"
            ]
        ]
    },
    {
        "id": "bf872cba7b8d4a63",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "2c85ae767fb7b15d",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "tray",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1310,
        "y": 920,
        "wires": [
            [
                "d4985928203ea691"
            ],
            [
                "2f77cb6feca03746"
            ]
        ]
    },
    {
        "id": "2f77cb6feca03746",
        "type": "split",
        "z": "fbda6ab16491b918",
        "g": "2c85ae767fb7b15d",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 1190,
        "y": 960,
        "wires": [
            [
                "69cba2483fe68056"
            ]
        ]
    },
    {
        "id": "69cba2483fe68056",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "2c85ae767fb7b15d",
        "name": "tray",
        "func": "msg.topic = msg.topic + \"_\" + msg.payload.id;\nnode.send(msg);\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 960,
        "wires": [
            [
                "080745c0307e0218"
            ]
        ]
    },
    {
        "id": "a0317478d3f43ecf",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "2c85ae767fb7b15d",
        "name": "Set Status",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "online",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1510,
        "y": 820,
        "wires": [
            [
                "1f0305e93eed961a"
            ]
        ]
    },
    {
        "id": "080745c0307e0218",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "2c85ae767fb7b15d",
        "name": "Change Attribute Names",
        "rules": [
            {
                "t": "move",
                "p": "payload.tray_type",
                "pt": "msg",
                "to": "payload.type",
                "tot": "msg"
            },
            {
                "t": "move",
                "p": "payload.tray_color",
                "pt": "msg",
                "to": "payload.color",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1250,
        "y": 1000,
        "wires": [
            [
                "d4985928203ea691"
            ]
        ]
    },
    {
        "id": "ceef34fb1803fabb",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "2c85ae767fb7b15d",
        "name": "Organize AMS",
        "func": "if(msg.payload.ams != undefined) {\n    msg.ams = msg.payload.ams;\n    delete msg.payload;\n    msg.payload = msg.ams;\n    delete msg.ams;\n    // only send if there's actually ams data\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 780,
        "wires": [
            [
                "07ff86f3cd404e2d"
            ]
        ]
    },
    {
        "id": "3e88e7f16efe9866",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "2c85ae767fb7b15d",
        "name": "Change Humidity Name",
        "func": "if (msg.payload.humidity != undefined) {\n    msg.payload.humidity_level = msg.payload.humidity;\n    let hasMCPrint = false;\n    let versions = flow.get(\"mc_print_versions\");\n    if (versions[flow.get(\"model\")] != undefined) {\n        let valid_versions = versions[flow.get(\"model\")];\n        if (valid_versions.length > 0 && valid_versions.includes(flow.get(\"fw_version\"))) {\n            hasMCPrint = true;\n        }\n    }\n    if(hasMCPrint || flow.get(\"has_humidity_pct\")) {\n        delete msg.payload.humidity;\n    }\n}\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 820,
        "wires": [
            [
                "9693988d17d6b075"
            ]
        ]
    },
    {
        "id": "aec55e8cba8dc837",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "2c85ae767fb7b15d",
        "name": "AMS-Payloads-In",
        "links": [
            "d4985928203ea691",
            "f3cfc302c5969a27",
            "f8cc5047319b9229"
        ],
        "x": 1285,
        "y": 860,
        "wires": [
            [
                "735003dd7602e7dc"
            ]
        ]
    },
    {
        "id": "d4985928203ea691",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "2c85ae767fb7b15d",
        "name": "AMS-Payloads-Out",
        "mode": "link",
        "links": [
            "aec55e8cba8dc837"
        ],
        "x": 1455,
        "y": 960,
        "wires": []
    },
    {
        "id": "82aa9f4491e3400c",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "2c85ae767fb7b15d",
        "name": "AMS General In",
        "links": [
            "f9c82d849c6f74a1"
        ],
        "x": 1125,
        "y": 780,
        "wires": [
            [
                "ceef34fb1803fabb"
            ]
        ]
    },
    {
        "id": "a8eb2272dd38dd3e",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "2c85ae767fb7b15d",
        "name": "Data Filter Out",
        "mode": "link",
        "links": [
            "45db6c3763eeabfe"
        ],
        "x": 1545,
        "y": 960,
        "wires": []
    },
    {
        "id": "ecf4cb43eed20ca0",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "2c85ae767fb7b15d",
        "x": 1140,
        "y": 860,
        "wires": [
            [
                "2a60f3818c07cead",
                "7ec4f5ae5c5f4a57"
            ]
        ]
    },
    {
        "id": "b3ee63836831ea89",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "2c85ae767fb7b15d",
        "x": 1580,
        "y": 880,
        "wires": [
            [
                "a8eb2272dd38dd3e"
            ]
        ]
    },
    {
        "id": "735003dd7602e7dc",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "2c85ae767fb7b15d",
        "x": 1340,
        "y": 860,
        "wires": [
            [
                "1f0305e93eed961a",
                "ff09ef39735c8dd8"
            ]
        ]
    },
    {
        "id": "9693988d17d6b075",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "2c85ae767fb7b15d",
        "x": 1380,
        "y": 820,
        "wires": [
            [
                "a0317478d3f43ecf",
                "ecf4cb43eed20ca0"
            ]
        ]
    },
    {
        "id": "7ec4f5ae5c5f4a57",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "2c85ae767fb7b15d",
        "x": 1240,
        "y": 900,
        "wires": [
            [
                "ff09ef39735c8dd8"
            ]
        ]
    },
    {
        "id": "fa96932f13cc3d89",
        "type": "group",
        "z": "fbda6ab16491b918",
        "g": "296274a0d2a6c675",
        "name": "Printer - General + Parse",
        "style": {
            "label": true
        },
        "nodes": [
            "d5e7799961b2eb4f",
            "472a15482a731de8",
            "86e9caa98fa51352",
            "41797ced12627146",
            "b2881b8ed28a467c",
            "8a61805ce8145c12",
            "39beda93a319856c",
            "29339232d219ddb1",
            "8e378e4216c736c1",
            "270186a0ec06877a",
            "d1220a3ae60b4c1a",
            "f9c82d849c6f74a1",
            "720e8084d4453e96",
            "1d07107071cbf004",
            "135e57a801b6e9bf",
            "1c3c6f7e25faaa58",
            "b5a43b74bb8f1e16",
            "5a60a09ca1cb3f82"
        ],
        "x": 1014,
        "y": 71.5,
        "w": 692,
        "h": 289.5
    },
    {
        "id": "d5e7799961b2eb4f",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "fa96932f13cc3d89",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ams",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "printer",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1590,
        "y": 160,
        "wires": [
            [
                "f9c82d849c6f74a1"
            ],
            [
                "8e378e4216c736c1"
            ]
        ]
    },
    {
        "id": "472a15482a731de8",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "fa96932f13cc3d89",
        "name": "Printer Config",
        "func": "let data = {};\n\nlet payload = {};\nlet device = {};\nlet root_topic = flow.get(\"root_topic\");\nlet ha_device_name = flow.get(\"HA_DEVICE\");\nif(msg.payload == undefined && !msg.topic.includes(\"reset\")|| msg.topic == \"msg\") {\n    if(msg.topic != \"print_start_epoch\") {\n        return;\n    }\n}\nlet type = \"sensor\";\n\nlet diagnostic_topics = [\"IP_Address\", \"Device_Dev_Name\", \"Connection_Type\", \"Series\", \"SSDP_Model\",\"wifi_signal\", \"sdcard\", \"SW_version\", \"HW_version\", \"nozzle_diameter\", \"nozzle_type\",\n    \"ams_count\", \"upload\", \"work_light\", \"upgrade_state\", \"model\", \"machine_name\", \"mess_production_state\", \"xcam\", \"mqtt_connection_type\",\n    \"ipcam\", \"serial_number\", \"timelapse_state\", \"recording_state\", \"is_220_voltage\", \"firmware_type\", \"network_connection\", \"supports_motor_noise_calibration\",\n    \"supports_upgrade_kit\", \"upgrade_kit\", \"active_print_time\", \"filament_printed\", \"uptime\", \"x1plus\", \"filament_tangle_detection\", \"ams_track_filament_enabled\",\n    \"ams_autoswitch_filament_enabled\", \"firmware_r\", \"firmware_unlocked\", \"ssh_enabled\", \"aux_part_fan\", \"air_print_detection\", \"nozzle_blob_detection\",\n    \"ams_rfid_status\", \"ams_status\", \"nodered_flow_status\", \"nodered_flow_version\", \"user_presets_supported\", \"auto_recovery\", \"buildplate_marker_detection\", \"first_layer_inspection\",\n    \"nodered_advanced_flow_status\", \"nodered_advanced_flow_version\", \"camera_rtsp\"];\n\nlet config_topics = [\"toggle_nozzle_blob_detection\", \"toggle_air_print_detection\", \"toggle_recording\", \"toggle_timelapse\", \"toggle_auto_recovery\",\n    \"toggle_prompt_sound\", \"toggle_filament_tangle\", \"toggle_auto_switch\", \"toggle_buildplate_detection\", \"toggle_first_layer_inspection\"];\nlet switch_topics = [\"toggle_nozzle_blob_detection\", \"toggle_air_print_detection\", \"toggle_recording\", \"toggle_timelapse\", \"toggle_auto_recovery\",\n    \"toggle_prompt_sound\", \"toggle_filament_tangle\", \"toggle_auto_switch\", \"toggle_buildplate_detection\", \"toggle_first_layer_inspection\"];\n\nlet icon_helper = {\n    \"nodered_flow_status\": \"mdi:server-network\",\n    \"nodered_flow_version\": \"mdi:server-network\",\n    \"nodered_advanced_flow_status\": \"mdi:server-network\",\n    \"nodered_advanced_flow_version\": \"mdi:server-network\",\n    \"subtask\": \"mdi:clipboard-text\",\n    \"print\": \"mdi:dots-horizontal\",\n    \"print_progress\": \"mdi:progress-helper\",\n    \"IP_Address\": \"mdi:ip\",\n    \"Homed\": \"mdi:axis-arrow\",\n    \"status\": \"mdi:printer-3d\",\n    \"print_state\": \"mdi:printer-3d\",\n    \"active_print_time\": \"mdi:clock\",\n    \"filament_printed\": \"mdi:weight-kilogram\",\n    \"sdcard\": \"mdi:sd\",\n    \"speed\": \"mdi:speedometer\",\n    \"set_speed_percent\":\"mdi:speedometer\",\n    \"pause_print\": \"mdi:pause\",\n    \"x1plus\": \"mdi:chip\",\n    \"resume_print\": \"mdi:play\",\n    \"camera_rtsp\": \"mdi:camera\",\n    \"stop_print\": \"mdi:cancel\",\n    \"stage\": \"mdi:state-machine\",\n    \"print_action\": \"mdi:state-machine\",\n    \"nozzle_diameter\": \"mdi:printer-3d-nozzle\",\n    \"nozzle_type\": \"mdi:printer-3d-nozzle\",\n    \"timelapse_state\": \"mdi:record-rec\",\n    \"recording_state\": \"mdi:record-rec\",\n    \"ssh_enabled\": \"mdi:ssh\",\n    \"settings\": \"mdi:cog\",\n    \"series\": \"mdi:3d-printer\",\n    \"set_nozzle_temp\": \"mdi:printer-3d-nozzle-heat\",\n    \"set_bed_temp\": \"mdi:radiator\",\n    \"set_chamber_temp\": \"mdi:heat-wave\",\n    \"filament\": \"mdi:printer-3d-nozzle\",\n    \"ams_track_filament_enabled\": \"mdi:wrench\",\n    \"ams_autoswitch_filament_enabled\": \"mdi:wrench\",\n    \"filament_tangle_detection\": \"mdi:wrench\",\n    \"supports_motor_noise_calibration\": \"mdi:wrench\",\n    \"ipcam\": \"mdi:wrench\",\n    \"is_220_voltage\": \"mdi:lightning-bolt-circle\",\n    \"connection_type\": \"mdi:connection\",\n    \"mqtt_connection_type\": \"mdi:connection\",\n    \"ip_address\": \"mdi:ip\",\n    \"vt_tray\": \"mdi:printer-3d-nozzle\",\n    \"extruder_loaded\": \"mdi:printer-3d-nozzle\"\n}\n\nif (msg.topic in icon_helper) {\n    msg.icon = icon_helper[msg.topic];\n}\n\nif (diagnostic_topics.includes(msg.topic)) {\n    msg.entity_category = \"diagnostic\";\n}\nelse if (config_topics.includes(msg.topic)) {\n    msg.entity_category = \"config\";\n}\n\nif (switch_topics.includes(msg.topic)) {\n    type = \"switch\";\n}\n\nif (msg.topic == \"wifi_signal\") {\n    msg.payload = msg.payload.match(/^-?\\d+/)[0];\n    msg.device_class = \"signal_strength\"\n    msg.unit_of_measurement = \"dBm\";\n}\nelse if (msg.topic == \"speed_percent\") {\n    msg.icon =  \"mdi:speedometer-medium\";\n    if (msg.payload <= 80) {\n        msg.icon = \"mdi:speedometer-slow\";\n    }\n    else if (msg.payload >= 124) {\n        msg.icon = \"mdi:speedometer\";\n    }\n}\n\nelse if(msg.topic.includes(\"layer\")){\n    msg.icon = \"mdi:layers\";\n}\nelse if (msg.topic == \"door\") {\n    msg.icon = \"mdi:door-closed\"\n    if(msg.payload == \"open\") {\n        msg.icon = \"mdi:door-open\"\n    }\n}\nelse if (msg.topic == \"network_connection\") {\n    if(msg.payload == \"Wired\") {\n        msg.icon = \"mdi:lan\";\n    }\n    else {\n        msg.icon = \"mdi:signal-variant\";\n    }\n}\nelse if (msg.topic == \"hw_switch_state\") {\n    msg.topic = \"extruder_loaded\";\n}\nelse if (msg.topic.match(/temperature/)) {\n    msg.device_class = \"temperature\";\n}\nelse if (msg.topic.includes(\"HMS\")) {\n    msg.icon = \"mdi:message-alert-outline\"\n    if(msg.topic.includes(\"Notifications\")) {\n        msg.topic = \"HMS\";\n    }\n}\nelse if (msg.topic.match(/(.*)fan(.*)/) && msg.topic !== \"fan_gear\") {\n    msg.unit_of_measurement = \"%\";\n    type = \"fan\";\n    if(msg.topic == \"heatbreak_fan\") {\n        type = \"sensor\";\n    }\n    msg.icon = \"mdi:fan\"\n    if (msg.topic == \"aux_part_fan\") {\n        delete msg.unit_of_measurement;\n        type = \"sensor\";\n    }\n}\nelse if (msg.topic.match(/serial/)) {\n    msg.icon = \"mdi:barcode\";\n    msg.entity_category = \"diagnostic\";\n}\n\nelse if (msg.topic == \"active_print_time\") {\n    msg.unit_of_measurement = \"h\";\n    msg.device_class = \"duration\";\n    msg.state_class = \"measurement\";\n    msg.entity_category = \"diagnostic\";\n}\nelse if (msg.topic == \"filament_printed\") {\n    msg.unit_of_measurement = \"kg\";\n    msg.device_class = \"weight\";\n    msg.state_class = \"measurement\";\n    msg.entity_category = \"diagnostic\";\n}\nelse if (msg.topic == \"print_progress\") {\n    msg.unit_of_measurement = \"%\";\n}\nelse if(msg.topic == \"print_remaining_time\") {\n    msg.unit_of_measurement = \"min\";\n    msg.device_class = \"duration\";\n    msg.state_class = \"measurement\";\n}\nelse if (msg.topic.match(/time/) && msg.topic != \"timelapse_state\") {\n    msg.icon = \"mdi:clock\";\n    if (msg.topic.endsWith(\"_time2\")) {\n        return;\n    }\n    if(msg.topic.includes(\"_start_time\")){\n        if(msg.payload != undefined && msg.payload != \"N/A\") {\n            msg.device_class = \"timestamp\";\n        }\n        msg.icon = \"mdi:clock-start\";\n    } \n    else if (msg.topic.includes(\"_end_time\")) {\n        if(msg.payload != undefined && msg.payload != \"N/A\") {\n            msg.device_class = \"timestamp\";\n        }\n        msg.icon = \"mdi:clock-end\";\n    }\n    else if (msg.topic == \"uptime\") {\n        msg.unit_of_measurement = \"s\";\n        msg.device_class = \"duration\";\n        msg.state_class = \"measurement\";\n        msg.expire_after = 60;\n        payload.state_class = \"measurement\";\n        payload.expire_after = msg.expire_after;\n    }\n}\n\nelse if (msg.topic == \"SW_version\") {\n    device.sw_version = msg.payload;\n    flow.set(\"fw_version\", msg.payload);\n}\nelse if (msg.topic == \"HW_version\") {\n    device.hw_version = msg.payload;\n}\n\n\nfunction getFriendlyName(str) {\n    var i, word = str.split('_');\n    for (i = 0; i < word.length; i++) {\n        word[i] = word[i].charAt(0).toUpperCase() + word[i].slice(1);\n    }\n    let final_word = word.join(' ');\n    final_word.replace(\"Ams\", \"AMS\");\n    final_word.replace(\"Rfid\", \"RFID\")\n    final_word.replace(\"Mqtt\", \"MQTT\");\n    return final_word;\n}\n/*if(msg.topic == \"door\") {\n    type = \"event\"\n    payload.event_types = [\"open\", \"closed\"] // only stuff like hold or press is valid :(\n}\nelse */if(msg.topic == \"chamber_light\") {\n    type = \"light\";\n} \nelse if (msg.topic == \"print_preview\") {\n    type = \"image\";\n    payload.image_encoding = \"b64\";\n}\nlet button_topics = [\"home\",\"reset_filter\", \"unload_filament\", \"pause_print\", \"resume_print\", \"stop_print\",\n     \"force_update\", \"logo_light_on\", \"logo_light_off\", \"clear_external_spool\", \"force_ftp_fetch\", \"send_gcode\"];\nif (button_topics.includes(msg.topic) || msg.topic.includes(\"nozzle_light\")) {\n    type = \"button\";\n}\nelse if (msg.topic == \"gcode_command\") {\n    type = \"text\";\n}\n\nif(msg.topic == \"speed\") {\n    type = \"select\";\n    //msg.entity_category = \"config\";\n}\nelse if(msg.topic == \"camera_resolution\") {\n    type = \"select\";\n    \n}\nelse if (msg.topic.startsWith(\"set_\") && msg.topic.endsWith(\"_temp\")) {\n    type = \"number\";\n    payload.min = 0;\n\n    if (msg.topic.includes(\"bed\")) {\n        payload.max = 110;\n        if (flow.get(\"is_220_voltage\")) {\n            payload.max = 120;\n        }\n    }\n    else if (msg.topic.includes(\"nozzle\")) {\n        payload.max = 300;\n    }\n    else if (msg.topic.includes(\"chamber\")) {\n        payload.max = 60 //\n        switch (flow.get(\"current_filament\")) {\n            case \"TPU\":\n            case \"PLA\":\n            case \"PETG\":\n                payload.max = 45;\n                return;\n            default:\n                payload.max = 60; //\n                return;\n        }\n    }\n    payload.mode = \"box\";\n    //msg.entity_category = \"config\";\n}\nelse if (msg.topic.startsWith(\"set_\") && msg.topic.endsWith(\"_speed_percent\")) {\n    type = \"number\";\n    payload.min = 30;\n    payload.mode = \"slider\";\n    payload.max = 180;\n    payload.step = 2;\n}\n\nlet base_topic = root_topic + \"/\"+ type + \"/\" + ha_device_name + \"/\" + msg.topic;\ndata.topic = base_topic + \"/config\";\npayload.name = getFriendlyName(msg.topic);\n\nlet rename_helper = {\n    \"big_fan2\": \"Chamber Fan\",\n    \"mqtt_connection_type\": \"MQTT Connection Type\",\n    \"Homed\": \"Homed Axes\",\n    \"ams_status\": \"AMS Status\",\n    \"ssh_enabled\": \"SSH Enabled\",\n    \"ams_rfid_status\": \"AMS RFID Status\",\n    \"ams_track_filament_enabled\": \"AMS Tracking Filament\",\n    \"ams_autoswitch_filament_enabled\": \"AMS Autoswitching Filament\",\n    \"big_fan1\": \"Auxilliary Fan\",\n    \"cooling_fan\": \"Part Cooling Fan\",\n    \"vt_tray\": \"External Spool\",\n    \"camera_rtsp\": \"LAN Camera\",\n    \"x1plus\": \"X1Plus\",\n    \"aux_part_fan\": \"Aux Fan Installed\",\n    \"last_calibrated_pa\": \"Last Calibrated PA\",\n    \"xcam\": \"Settings\",\n    \"HMS\": \"HMS Notifications\"\n}\n\nif (msg.topic in rename_helper) {\n    payload.name = rename_helper[msg.topic];\n}\n\nif(msg.topic == \"chamber_light\" && flow.get(\"model\").startsWith(\"A1\")) {\n    payload.name = \"Camera Light\"\n}\n\n\ndevice.identifiers = [];\ndevice.identifiers[0] = {\"bambu_lab\": ha_device_name, \"type\": \"printer\", \"serial\": flow.get(\"printer_serial\"), \"model\": flow.get(\"model\")};\ndevice.identifiers[1] = ha_device_name;\ndevice.identifiers[2] = flow.get(\"printer_serial\");\nif (msg.topic == \"serial_number\") {\n    msg.entity_category = \"diagnostic\";\n}\ndevice.identifiers[0] = JSON.stringify(device.identifiers[0]);\n\ndevice.manufacturer = \"Bambu Labs\";\ndevice.model = flow.get(\"model\");\nif (device.model == \"A1Mini\") {\n    device.model = \"A1 Mini\";\n}\ndevice.name =ha_device_name;\n\nif( msg.icon != undefined) {\n    payload.icon = msg.icon\n}\nif(msg.entity_category != undefined) {\n    payload.entity_category = msg.entity_category;\n}\n\npayload.device = device;\npayload.unique_id = ha_device_name + \"_\" + msg.topic;\npayload.object_id = payload.unique_id;\npayload.has_entity_name = false;\n\nif (msg.device_class != undefined)\n    payload.device_class = msg.device_class;\n\nif (msg.unit_of_measurement != undefined)\n    payload.unit_of_measurement = msg.unit_of_measurement;\n\nif (payload.device_class == \"temperature\") {\n    payload.unit_of_measurement = \"°C\";\n    payload.temperature_unit = \"°C\";\n}\n\nif (msg.topic == \"machine_serial\") {\n    return;\n}\npayload.state_topic = base_topic + \"/state\";\npayload.json_attributes_topic = base_topic + \"/attr\";\nif (type == \"image\") {\n    payload.image_topic = base_topic + \"/image\";\n}\nif(type == \"fan\") {\n    payload.command_topic = root_topic + \"/\" + type + \"/\" + ha_device_name + \"/\" + msg.topic + \"/set\";\n    delete payload.json_attributes_topic;\n    payload.percentage_command_topic = root_topic + \"/\" + type + \"/\" + ha_device_name + \"/\" + msg.topic + \"/percent/set\";\n    payload.percentage_state_topic = root_topic + \"/\"  + type + \"/\" + ha_device_name + \"/\" + msg.topic + \"/percent/state\";\n    payload.speed_range_max = 10;\n    payload.speed_range_min = 1;\n}\nelse if (type == \"light\") {\n    payload.command_topic = base_topic + \"/set\";\n    delete payload.json_attributes_topic;\n}\nelse if(type == \"number\" || type == \"text\") {\n    delete payload.json_attributes_topic;\n    payload.command_topic = base_topic + \"/set\";\n    payload.state_topic = base_topic + \"/set\";\n    if (msg.topic == \"set_speed_percent\"){\n        payload.state_topic = root_topic + \"/\" + \"sensor\" + \"/\" + ha_device_name + \"/\" + \"speed_percent\" + \"/state\";\n    } \n    else if (msg.topic == \"set_bed_temp\") {\n        payload.state_topic = root_topic + \"/\" + \"sensor\" + \"/\" + ha_device_name + \"/\" + \"bed_target_temperature\" + \"/state\";\n    }\n    else if (msg.topic == \"set_nozzle_temp\") {\n        payload.state_topic = root_topic + \"/\" + \"sensor\" + \"/\" + ha_device_name + \"/\" + \"nozzle_target_temperature\" + \"/state\";\n    }\n    else if (msg.topic == \"set_chamber_temp\") {\n        payload.state_topic = root_topic + \"/\" + \"sensor\" + \"/\" + ha_device_name + \"/\" + \"chamber_target_temperature\" + \"/state\";\n    }\n}\nelse if(type == \"switch\") {\n    payload.command_topic = root_topic + \"/\" + type + \"/\" + ha_device_name + \"/\" + msg.topic + \"/set\";\n    delete payload.json_attributes_topic;\n    /*delete payload.availability_topic;\n    payload.availability = [];\n    let a1 = {};\n    a1.topic = root_topic + \"/\" + \"sensor\" + \"/\" + ha_device_name + \"/\" + \"ipcam\" + \"/state\";\n    a1.payload_available = \"Present\";\n    a1.payload_not_available = \"No Camera\";\n    payload.availability.push(a1);*/\n    \n    if(msg.topic == \"toggle_timelapse\") {\n        payload.icon = \"mdi:record-rec\";\n        payload.state_topic = root_topic + \"/\" + \"sensor\" + \"/\" + ha_device_name + \"/\" + \"timelapse_state\" + \"/state\";\n    }\n    else if (msg.topic == \"toggle_recording\") {\n        payload.icon = \"mdi:record-rec\";\n        payload.state_topic = root_topic + \"/\" + \"sensor\" + \"/\" + ha_device_name + \"/\" + \"recording_state\" + \"/state\";\n    }\n    else if (msg.topic == \"toggle_air_print_detection\") {\n        payload.icon = \"mdi:printer-3d-nozzle\";\n        payload.state_topic = root_topic + \"/\" + \"sensor\" + \"/\" + ha_device_name + \"/\" + \"air_print_detection\" + \"/state\";\n    }\n    else if (msg.topic == \"toggle_nozzle_blob_detection\") {\n        payload.icon = \"mdi:printer-3d-nozzle\";\n        payload.state_topic = root_topic + \"/\" + \"sensor\" + \"/\" + ha_device_name + \"/\" + \"nozzle_blob_detection\" + \"/state\";\n    }\n    else if (msg.topic == \"toggle_auto_recovery\") {\n        payload.icon = \"mdi:wrench\";\n        payload.state_topic = root_topic + \"/\" + \"sensor\" + \"/\" + ha_device_name + \"/\" + \"auto_recovery\" + \"/state\";\n    }\n    else if (msg.topic == \"toggle_prompt_sound\") {\n        payload.icon = \"mdi:wrench\";\n        payload.state_topic = root_topic + \"/\" + \"sensor\" + \"/\" + ha_device_name + \"/\" + \"prompt_sound\" + \"/state\";\n    }\n    else if (msg.topic == \"toggle_filament_tangle\") {\n        payload.icon = \"mdi:wrench\";\n        payload.state_topic = root_topic + \"/\" + \"sensor\" + \"/\" + ha_device_name + \"/\" + \"filament_tangle_detection\" + \"/state\";\n    }\n    else if (msg.topic == \"toggle_auto_switch\") {\n        payload.icon = \"mdi:wrench\";\n        payload.state_topic = root_topic + \"/\" + \"sensor\" + \"/\" + ha_device_name + \"/\" + \"ams_autoswitch_filament_enabled\" + \"/state\";\n    }\n    else if (msg.topic == \"toggle_buildplate_detection\") {\n        payload.icon = \"mdi:wrench\";\n        payload.state_topic = root_topic + \"/\" + \"sensor\" + \"/\" + ha_device_name + \"/\" + \"buildplate_marker_detection\" + \"/state\";\n    }\n    else if (msg.topic == \"toggle_first_layer_inspection\") {\n        payload.icon = \"mdi:wrench\";\n        payload.state_topic = root_topic + \"/\" + \"sensor\" + \"/\" + ha_device_name + \"/\" + \"first_layer_inspection\" + \"/state\";\n    }\n}\nif (type == \"button\" &&  msg.topic.includes(\"reset_filter\")) {\n    delete payload.state_topic;\n    delete payload.json_attributes_topic;\n    payload.command_topic = root_topic + \"/\"  + \"button\" + \"/\" + ha_device_name + \"/\" + msg.topic;\n    payload.entity_category = \"config\";\n}\nif (type == \"button\" && (msg.topic.includes(\"logo_light\") || msg.topic.includes(\"nozzle_light\"))) {\n    //payload.entity_category = \"config\";\n    delete payload.state_topic;\n    delete payload.json_attributes_topic;\n    payload.command_topic = root_topic + \"/\"  + \"button\" + \"/\" + ha_device_name + \"/\" + msg.topic;\n    payload.availability_topic = root_topic + \"/\"  + \"sensor\" + \"/\" + ha_device_name + \"/\" + \"status\" + \"/state\";\n}\nif (type == \"button\" && (msg.topic.includes(\"clear_external_spool\")\n    || msg.topic == \"unload_filament\" || msg.topic == \"force_ftp_fetch\")) {\n    payload.command_topic = root_topic + \"/\"  + \"button\" + \"/\" + ha_device_name + \"/\" + msg.topic;\n    payload.availability_topic = root_topic + \"/\" + \"sensor\" + \"/\" + ha_device_name + \"/\" + \"status\" + \"/state\";\n    if( msg.topic == \"force_ftp_fetch\") {\n        delete payload.json_attributes_topic;\n        payload.entity_category = \"config\";\n    }\n}\nelse if (type == \"button\") {\n    delete payload.state_topic;\n    delete payload.json_attributes_topic;\n    payload.command_topic = root_topic + \"/\"  + \"button\" + \"/\" + ha_device_name + \"/\" + msg.topic;\n    if(msg.topic.includes(\"_print\")) {\n      let available = \"\";\n      if(msg.topic.includes(\"pause\")) {\n          available = \"RUNNING\";\n      }\n      else if(msg.topic.includes(\"resume\")) {\n          available = \"PAUSE\";\n      }\n      else if(msg.topic.includes(\"stop\")) {\n          available = \"IS_RUNNING\"\n      }\n      else {\n          return;\n      }\n      payload.availability = [];\n      let a1 = {};\n      a1.topic = root_topic + \"/\" + \"sensor\" + \"/\" + ha_device_name + \"/\" + \"print_status\" + \"/state\";\n      a1.payload_available = available;\n      a1.payload_not_available = \"N/A\";\n      delete payload.availability_topic;\n      if(msg.topic.includes(\"stop\")) {\n        a1.value_template = '{{ \"' + available + '\" if value == \"RUNNING\" or value == \"PAUSE\" else \"N/A\" }}'\n      } else {\n        a1.value_template = '{{ \"'+available+'\" if value == \"'+available+'\" else \"N/A\" }}'\n      }\n      payload.availability.push(a1);\n    }\n    else if (msg.topic == \"force_update\") {\n        payload.availability_topic = root_topic + \"/\"  + \"sensor\" + \"/\" + ha_device_name + \"/\" + \"status\" + \"/state\";\n        payload.entity_category = \"config\";\n        payload.name = \"Force Sensor Updates\";\n    }\n    else if (msg.topic == \"send_gcode\") {\n        payload.availability_topic = root_topic + \"/\"  + \"sensor\" + \"/\" + ha_device_name + \"/\" + \"status\" + \"/state\";\n    }\n    else if (msg.topic == \"home\"){\n        payload.availability = [];\n        let available = \"IS_IDLE\";\n        let a1 = {};\n        a1.topic = root_topic + \"/\" + \"sensor\" + \"/\" + ha_device_name + \"/\" + \"print_status\" + \"/state\";\n        a1.payload_available = available;\n        a1.payload_not_available = \"N/A\";\n\n        a1.value_template = '{{ \"' + available + '\" if value == \"IDLE\" or value == \"FINISH\" or value == \"FAILED\" else \"N/A\" }}'\n        \n        payload.availability.push(a1);\n        \n        delete payload.availability_topic;\n    }\n}\nif (type == \"camera\" && !msg.topic.includes(\"rtsp\")) {\n    payload.topic = base_topic + \"/image\";\n    payload.json_attributes_topic = base_topic + \"/attr\";\n    payload.availability_topic = root_topic + \"/\"  + \"sensor\" + \"/\" + ha_device_name + \"/\" + \"status\" + \"/state\";\n    delete payload.state_topic;\n}\nelse if (msg.topic == \"stage\" || msg.topic == \"print_action\" || msg.topic.includes(\"nodered\")) {\n    delete payload.availability_topic;\n}\nelse if(msg.topic == \"serial_number\" || (msg.topic.includes(\"version\") && !msg.topic.includes(\"nodered\"))) {\n    payload.availability_topic = root_topic + \"/\" + \"sensor\" + \"/\" + ha_device_name + \"/\" + \"status\" + \"/state\";\n}\n\nelse if (msg.topic == \"speed\") {\n    payload.command_topic = root_topic + \"/\"  + \"select\" + \"/\" + ha_device_name + \"/\" + msg.topic + \"/set\";\n    payload.state_topic = root_topic + \"/\"  + \"select\" + \"/\" + ha_device_name + \"/\" + msg.topic + \"/state\";\n    payload.json_attributes_topic = root_topic + \"/\" + \"select\" + \"/\" + ha_device_name + \"/\" + msg.topic + \"/attr\";\n    payload.availability_topic = root_topic + \"/\"  + \"sensor\" + \"/\" + ha_device_name + \"/\" + \"status\" + \"/state\";\n    payload.options = [\"Silent\", \"Standard\", \"Sport\", \"Ludicrous\"];   \n    //if (flow.get(\"x1plus_active\") != undefined && flow.get(\"x1plus_active\") == true) {\n    payload.options.push(\"Custom\");\n    //}\n}\nelse if (msg.topic == \"camera_resolution\") {\n    if (!flow.get(\"has_ipcam\")) {\n        return;\n    }\n    let resolutions = flow.get(\"camera_resolutions\");\n    payload.icon = \"mdi:high-definition-box\";\n    payload.entity_category = \"config\";\n    payload.command_topic = root_topic + \"/\" + \"select\" + \"/\" + ha_device_name + \"/\" + msg.topic + \"/set\";\n    payload.state_topic = root_topic + \"/\" + \"select\" + \"/\" + ha_device_name + \"/\" + msg.topic + \"/state\";\n    payload.json_attributes_topic = root_topic + \"/\" + \"select\" + \"/\" + ha_device_name + \"/\" + msg.topic + \"/attr\";\n    payload.availability_topic = root_topic + \"/\" + \"sensor\" + \"/\" + ha_device_name + \"/\" + \"status\" + \"/state\";\n    payload.options = resolutions;\n}\nif (msg.topic != \"status\" && msg.topic != \"print_status\"\n    && msg.topic != \"vt_tray\"\n    && msg.topic != \"resume_print\" && msg.topic != \"pause_print\" && msg.topic != \"stop_print\"\n    && msg.topic != \"machine_name\" && msg.topic != \"machine_serial\" && msg.topic != \"home\"\n    && msg.topic != \"active_print_time\" && msg.topic != \"filament_printed\") {\n    payload.availability_topic = root_topic + \"/\" + \"sensor\" + \"/\" + ha_device_name + \"/\" + \"status\" + \"/state\";\n\n}\nif (msg.topic == \"reset_filter\") {\n    payload.name = \"Debug Reset NR Filter\";\n}\n\nif (msg.topic.includes(\"nodered\") && payload.availability_topic != undefined) {\n    delete payload.availability_topic;\n}\n\ndata.payload = payload;\n\ndata.qos = 1;\ndata.retain = true;\n\nif (data.topic.startsWith(root_topic)) {\n    if (!flow.get(\"can_request\")) {\n        if ((type == \"select\" || type == \"switch\" || type == \"fan\")) {\n            if (data.payload.command_topic) {\n                delete data.payload.command_topic;////?\n            }\n            if (data.payload.percentage_command_topic) {\n                delete data.payload.percentage_command_topic;\n            }\n        }\n        if (type != \"select\") {\n            node.send(data);\n        }\n    }\n    else {\n        node.send(data);\n    }\n}\nif (msg.topic == \"stage\" || msg.topic == \"print_action\") {\n    payload.availability_topic = root_topic + \"/\" + \"sensor\" + \"/\" + ha_device_name + \"/\" + \"status\" + \"/state\";\n}\npayload.name = getFriendlyName(msg.topic);\n\npayload.unique_id = ha_device_name + \"_\" + msg.topic;\npayload.object_id = payload.unique_id;\ndelete payload.command_topic;\ndelete payload.options;\ndelete payload.json_attributes_topic;\ndelete payload.state_topic;\npayload.availability_topic = root_topic + \"/\" + \"sensor\" + \"/\" + ha_device_name + \"/\" + \"status\" + \"/state\";    \ndata.qos = 1;\ndata.retain = true;\n\nif (msg.topic == \"big_fan2\") {\n    payload.name = \"Chamber Fan\";\n}\nelse if (msg.topic == \"big_fan1\") {\n    payload.name = \"Auxilliary Fan\";\n}\nelse if (msg.topic == \"cooling_fan\") {\n    payload.name = \"Part Cooling Fan\";\n}\n\npayload.state_topic = base_topic + \"/state\";\npayload.json_attributes_topic = base_topic + \"/attr\";\nif (type == \"fan\") {\n    delete payload.entity_category;\n    delete payload.json_attributes_topic;\n    delete payload.percentage_command_topic;\n    delete payload.percentage_state_topic;\n    payload.state_topic = root_topic + \"/\" + \"sensor\" + \"/\" + ha_device_name + \"/\" + msg.topic + \"/state\";\n    delete payload.speed_range_max;\n    delete payload.speed_range_min;\n    data.topic = root_topic + \"/\"  + \"sensor\" + \"/\" + ha_device_name + \"/\" + msg.topic + \"/config\";\n    data.payload = payload;\n    data.qos = 1;\n    data.retain = true;\n    if (data.topic.startsWith(root_topic)) {\n        node.send(data);\n    }\n}\n\nif (msg.topic == \"speed\") {\n    msg.topic = \"speed_info\";\n    type = \"sensor\";\n    let base_topic = root_topic + \"/\"  + \"sensor\" + \"/\" + ha_device_name + \"/\" + msg.topic;\n    \n    payload.state_topic = base_topic + \"/state\";\n    payload.json_attributes_topic = base_topic + \"/attr\";\n    data.topic = base_topic + \"/config\";\n    data.payload = payload;\n    data.qos = 1;\n    data.retain = true;\n\n    if (data.topic.startsWith(root_topic)) {\n        node.send(data);\n    }\n\n}\n\nif (msg.topic == \"stage\" || msg.topic == \"print_action\") {\n    if(msg.topic == \"stage\") {\n        payload.name = \"Lidar Usage\";\n        payload.unique_id = ha_device_name + \"_\" + \"lidar_usage\";\n        payload.object_id = payload.unique_id;\n        type = \"device_automation\"\n        let base_topic = root_topic + \"/\"  + type + \"/\" + ha_device_name + \"/\" + \"lidar_on\";\n\n        payload.topic = root_topic + \"/\" + \"sensor\" + \"/\" + ha_device_name + \"/\" + msg.topic + \"/state\";\n        payload.value_template = '{{ \"on\" if \"lidar\" in value|lower else \"off\" }}';\n        payload.payload = \"on\";\n\n        payload.type = \"in use\";\n        payload.automation_type = \"trigger\";\n\n        payload.subtype = \"Lidar\";\n        data.topic = base_topic + \"/config\";\n        \n        data.payload = payload;\n        data.qos = 1;\n        data.retain = true;\n        if (data.topic.startsWith(root_topic)) {\n            node.send(data);\n        }\n        base_topic = root_topic + \"/\" + type + \"/\" + ha_device_name + \"/\" + \"lidar_off\";\n        payload.payload = \"off\";\n\n        payload.automation_type = \"trigger\";\n\n        payload.type = \"not in use\";\n        data.topic = base_topic + \"/config\";\n\n        data.payload = payload;\n        if (data.topic.startsWith(root_topic)) {\n            node.send(data);\n        }\n    }\n\n    /////////////////////////\n    delete payload.value_template;\n    delete payload.payload;\n    delete payload.type;\n    delete payload.subtype;\n    delete payload.automation_type;\n    delete payload.availability_topic;\n    if(msg.topic == \"stage\")\n        payload.name = \"Stage Change\";\n    else if (msg.topic == \"print_action\")\n        payload.name = \"Print Action Change\";\n    payload.unique_id = ha_device_name + \"_\" + msg.topic +\"_change\";\n    payload.object_id = payload.unique_id;\n    base_topic = root_topic + \"/\" + \"select\" + \"/\" + ha_device_name + \"/\" + msg.topic +\"_change\";\n    payload.state_topic = root_topic + \"/\"  + \"sensor\" + \"/\" + ha_device_name + \"/\" + msg.topic + \"/state\";\n    payload.command_topic = root_topic + \"/\" + \"select\" + \"/\" + ha_device_name + \"/\" + msg.topic +\"_change\" + \"/donotset\";;\n    payload.options = flow.get(\"stages\"); \n    payload.icon = \"mdi:delta\";\n    payload.entity_category = \"diagnostic\";\n    data.topic = base_topic + \"/config\";\n    data.qos = 1;\n    data.retain = true;\n    data.payload = payload;\n    if (data.topic.startsWith(root_topic)) {\n        node.send(data);\n    }\n}\n\nif (msg.topic == \"print_status\") {\n    delete payload.availability_topic;\n\n    payload.name = \"Print Status Change\";\n    payload.unique_id = ha_device_name + \"_\" + \"status_change\";\n    payload.object_id = payload.unique_id;\n    base_topic = root_topic + \"/\"  + \"select\" + \"/\" + ha_device_name + \"/\" + \"status_change\";\n    payload.state_topic = root_topic + \"/\"  + \"sensor\" + \"/\" + ha_device_name + \"/\" + msg.topic + \"/state\";\n    payload.command_topic = root_topic + \"/\"  + \"select\" + \"/\" + ha_device_name + \"/\" + \"status_change\" + \"/donotset\";;\n    payload.options = flow.get(\"statuses\");\n    payload.icon = \"mdi:delta\";\n    payload.entity_category = \"diagnostic\";\n    data.topic = base_topic + \"/config\";\n    data.qos = 1;\n    data.retain = true;\n    data.payload = payload;\n    if (data.topic.startsWith(root_topic)) {\n        node.send(data);\n    }\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 260,
        "wires": [
            [
                "135e57a801b6e9bf"
            ]
        ]
    },
    {
        "id": "86e9caa98fa51352",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "fa96932f13cc3d89",
        "name": "Printer State",
        "func": "function sendNonEmpty(message) {\n    if (message.topic.includes(\"/uptime\")) {\n        node.send(message);\n        return;\n    }\n    if(message.payload == 0 || (message.payload != undefined && (message.payload != \"\" || \n        (Object.keys(message.payload) != undefined && Object.keys(message.payload).length != 0)))) {\n        node.send(message);\n    }\n}\n\nlet retained = flow.get(\"retained_mqtt\");\nfor (var r of retained) {\n    if (msg.topic.endsWith(r)) {\n        msg.retain = true;\n        msg.qos = 2;\n        break;\n    }\n}\nif (msg.topic.endsWith(\"_time2\")) {\n    return;\n}\nelse if (msg.topic.endsWith(\"start_time\") || msg.topic.endsWith(\"end_time\")) {\n    if (typeof msg.payload != typeof \"\"){\n        let d = new Date(msg.payload);\n        msg.payload = d.toISOString();\n    }\n}\n\nlet hasAttr = false;\nlet entity_type = \"sensor\";\nif (msg.payload == undefined && msg.topic != \"uptime\") {\n    return;\n}\nlet root_topic = flow.get(\"root_topic\");\nlet ha_device_name = flow.get(\"HA_DEVICE\");\nif (msg.topic == \"machine_serial\" || msg.topic == \"print_preview\"\n     || msg.topic == \"msg\" || msg.topic == \"active_print_time\"\n     || msg.topic == \"filament_printed\") {\n    return;\n}\nif(msg.topic == \"print_status\") {\n    if(msg.payload != \"RUNNING\" && !msg.payload.includes(\"PAUSE\")) {\n        flow.set(\"print_start_epoch\", 0);        \n    }\n}\nif (msg.topic == \"reset_filter\" || msg.topic == \"resume_print\" || msg.topic == \"pause_print\"\n    || msg.topic == \"clear_external_spool\" || msg.topic == \"force_ftp_fetch\"\n    || msg.topic.includes(\"logo_light\") || msg.topic.includes(\"nozzle_light\")) {\n    return;\n}\nif(msg.topic == \"nozzle_diameter\") {\n    flow.set(\"nozzle_diameter\", msg.payload);\n}\nif(msg.topic.startsWith(\"set_\") && (msg.topic.endsWith(\"_temp\") || msg.topic.endsWith(\"_speed_percent\"))) {\n    return;\n}\nelse if (msg.topic == \"last_calibrated_pa\" && msg.payload == \"\") {\n    return;\n}\nelse if (msg.topic == \"toggle_timelapse\" || msg.topic == \"toggle_recording\" || msg.topic == \"gcode_command\" || \n         (msg.topic.startsWith(\"toggle_\") && (msg.topic.includes(\"air_print\") || msg.topic.includes(\"nozzle_blob\") \n            || msg.topic.includes(\"auto_recovery\") || msg.topic.includes(\"filament_tangle\") || msg.topic.includes(\"auto_switch\") \n            || msg.topic.includes(\"prompt_sound\") || msg.topic.includes(\"buildplate\") || msg.topic.includes(\"layer_inspect\")))) {\n    return;\n}\nelse if (msg.topic == \"hw_switch_state\") {\n    msg.topic = \"extruder_loaded\";\n    if(msg.payload == \"1\") {\n        msg.payload = true;\n    }\n    else {\n        msg.payload = false;\n    }\n}\nelse if (msg.topic == \"uptime\") {\n    let oldTopic = msg.topic;\n    msg.topic = root_topic + \"/sensor/\" + ha_device_name + \"/\" + msg.topic + \"/attr\";\n    hasAttr = true;\n    let oldPayload = msg.payload;\n    msg.payload = {\"Note:\": \"Uptime since NodeRed connected to printer. Resets on redeploy. For a closer machine uptime, check _status sensor is \\\"online\\\".\"};\n    \n    node.send(msg);\n    msg.payload = oldPayload;\n    msg.topic = oldTopic;\n}\nelse if (msg.topic == \"machine_name\") {\n    var oldTopic = msg.topic;\n    hasAttr = true;\n    msg.topic = root_topic + \"/sensor/\" + ha_device_name + \"/\" + msg.topic + \"/attr\";\n    let oldPayload = msg.payload;\n    msg.payload = { \"Serial Number\": flow.get(\"printer_serial\")};\n    node.send(msg);\n    msg.payload = oldPayload;\n    msg.topic = oldTopic;\n}\nelse if (msg.topic == \"wifi_signal\")\n    msg.payload = msg.payload.match(/^-?\\d+/)[0];\n/*else if (msg.topic == \"door\") {\n    entity_type = \"event\";\n    msg.payload = {\"event_type\": msg.payload}\n}*/\nelse if (msg.topic == \"xcam\") {\n    var oldTopic = msg.topic;\n    hasAttr = true;\n    msg.topic = root_topic + \"/sensor/\" + ha_device_name + \"/\" + msg.topic + \"/attr\";\n    node.send(msg);\n    msg.topic = oldTopic;\n    msg.payload = msg.payload.status;\n}\nelse if (msg.topic == \"upload\") {\n    var oldTopic = msg.topic;\n    hasAttr = true;\n    msg.topic = root_topic + \"/sensor/\" + ha_device_name + \"/\" + msg.topic + \"/attr\";\n    node.send(msg);\n    msg.topic = oldTopic;\n    msg.payload = msg.payload.message;\n}\nelse if (msg.topic == \"camera_rtsp\") {\n    var oldTopic = msg.topic;\n    var oldPayload = msg.payload;\n    hasAttr = true;\n    msg.topic = root_topic + \"/sensor/\" + ha_device_name + \"/\" + msg.topic + \"/attr\";\n    if (oldPayload != \"Disabled\") {\n        msg.payload = {\"URL\": oldPayload, \"User\": \"bblp\", \"Password\": \"<access_code>\", \"Protocol\": \"TCP\", \"SSL Verify\": \"disable\", \"Framerate\": 30, \"Port (Optional)\": 322, \"LAN Mode\": \"Not Required\"};\n        node.send(msg);\n        oldPayload = \"Enabled\";\n    }\n    msg.topic = oldTopic;\n    msg.payload = oldPayload;\n}\nelse if (msg.topic == \"upgrade_state\") {\n    var oldTopic = msg.topic;\n    hasAttr = true;\n    msg.topic = root_topic + \"/sensor/\" + ha_device_name + \"/\" + msg.topic + \"/attr\";\n    node.send(msg);\n    msg.topic = oldTopic;\n    let state = \"AVAILABLE\";\n    if (msg.payload.new_version_state == 1) {\n        msg.payload = state;\n    }\n    else {\n        msg.payload = msg.payload.status;\n    }\n}\nelse if (msg.topic == \"stage\") {\n    var oldTopic = msg.topic;\n    hasAttr = true;\n    msg.topic = root_topic + \"/sensor/\" + ha_device_name + \"/\" + msg.topic + \"/attr\";\n\n    var current = msg.payload.current;\n    var prev = {};\n    var count = 0;\n    \n    if(msg.payload.prev != undefined) {\n        for (var stg of msg.payload.prev) {\n            prev[count.toString()] = stg;\n            count += 1;\n        }\n            msg.payload = prev;\n            node.send(msg);\n    }\n\n    msg.topic = oldTopic;\n    msg.payload = current;\n}\nelse if (msg.topic == \"ipcam\") {\n    var oldTopic = msg.topic;\n    hasAttr = true;\n    msg.topic = root_topic + \"/sensor/\" + ha_device_name + \"/\" + msg.topic + \"/attr\";\n    node.send(msg);\n    msg.topic = oldTopic;\n    msg.payload = msg.payload.ipcam_dev;\n}\nelse if (msg.topic == \"vt_tray\") {\n    var oldTopic = msg.topic;\n    if (msg.payload.color != undefined\n        && !msg.payload.color.startsWith(\"#\")) {\n        msg.payload.color = \"#\" + msg.payload.color;\n    }\n    hasAttr = true;\n    msg.topic = root_topic + \"/sensor/\" + ha_device_name + \"/\" + msg.topic + \"/attr\";\n    node.send(msg);\n    msg.topic = oldTopic;\n    msg.payload = msg.payload.type;\n}\nelse if (msg.topic == \"subtask\") {\n    var oldTopic = msg.topic;\n    hasAttr = true;\n    msg.topic = root_topic + \"/sensor/\" + ha_device_name + \"/\" + msg.topic + \"/attr\";\n    node.send(msg);\n    msg.topic = oldTopic;\n    msg.payload = msg.payload.name;\n}\nelse if (msg.topic == \"print\") {\n    var oldTopic = msg.topic;\n    hasAttr = true;\n    msg.topic = root_topic + \"/sensor/\" + ha_device_name + \"/\" + msg.topic + \"/attr\";\n    node.send(msg);\n    msg.topic = oldTopic;\n    msg.payload = msg.payload.type;\n    if(msg.payload == undefined || msg.payload == \"\") {\n        msg.payload = \"None\";\n    }\n}\nelse if (msg.topic.includes(\"nodered\")) {\n    var oldTopic = msg.topic;\n    let old_payload = msg.payload;\n    hasAttr = true;\n    let url = \"https://www.wolfwithsword.com/bambulab-to-home-assistant-nodered-configurator/\";\n    if (msg.topic.includes(\"advanced\")) {\n        url = \"https://www.wolfwithsword.com/bambulab-advanced-setup-with-homeassistant-grafana-and-postgres/\";\n    }\n    msg.payload = {\n                    \"URL\": url,\n                    \"Release\": \"https://github.com/WolfwithSword/Bambu-HomeAssistant-Flows/releases\",\n                    \"All Guides\": \"https://www.wolfwithsword.com/tag/bambu-lab-guides/\"\n                }\n    msg.topic = root_topic + \"/sensor/\" + ha_device_name + \"/\" + msg.topic + \"/attr\";\n    node.send(msg);\n    msg.topic = oldTopic;\n    msg.payload = old_payload;\n\n}\nelse if (msg.topic == \"bed_temperature\") {\n    var oldTopic = msg.topic;\n    hasAttr = true;\n    if (msg.payload.target_temperature != undefined) {\n        msg.topic = root_topic + \"/sensor/\" + ha_device_name + \"/\" + msg.topic + \"/attr\";\n        node.send(msg);\n    }\n    if(msg.payload.temperature == undefined) {\n        return;\n    }\n    msg.topic = oldTopic;\n    msg.payload = msg.payload.temperature;\n}\nelse if (msg.topic == \"nozzle_temperature\") {\n    var oldTopic = msg.topic;\n    hasAttr = true;\n    if(msg.payload.target_temperature != undefined) {\n        msg.topic = root_topic + \"/sensor/\" + ha_device_name + \"/\" + msg.topic + \"/attr\";\n        node.send(msg);\n    }\n    if (msg.payload.temperature == undefined) {\n        return;\n    }\n    msg.topic = oldTopic;\n    msg.payload = msg.payload.temperature;\n}\nelse if (msg.topic == \"chamber_temperature\") {\n    msg.payload = msg.payload.temperature;\n}\nelse if (msg.topic == \"plate_name\" && msg.payload != \"\") {\n    let match = msg.payload.match(/_?(plate_[1-9][0-9]?[0-9]?)/);\n    if (match != undefined && match.length > 1) {\n        msg.payload = match[1];\n    }\n}\nelse if (msg.topic == \"gcode\") {\n    var oldTopic = msg.topic;\n    hasAttr = true;\n    msg.topic = root_topic + \"/sensor/\" + ha_device_name + \"/\" + msg.topic + \"/attr\";\n    node.send(msg);\n    msg.topic = oldTopic;\n    if(msg.payload.file == undefined) {\n        return;\n    }\n    msg.payload = msg.payload.file;\n}\nelse if (msg.topic.includes(\"HMS\")) {\n    //msg.topic = \"HMS\";\n    var oldTopic = msg.topic;\n    var numOfCodes = 0;\n    hasAttr = true;\n    if (oldTopic != \"HMS_Notifications\"){\n        msg.topic = root_topic + \"/sensor/\" + ha_device_name + \"/\" + msg.topic + \"/attr\";\n        numOfCodes = msg.payload == undefined || msg.payload.length == 0 ? 0 : msg.payload.length;\n        var links = {};\n        for (var data of msg.payload) {\n            //if (data.type != undefined && data.type != \"\") {\n            //    links[data.code.replaceAll(\" \", \"_\") + \" Severity\"] = data.type;\n            //}\n            if ( data.description != undefined && data.description != \"\") {\n                links[data.code.replaceAll(\" \", \"_\")+\" Description\"] = data.description;\n            }\n            if(data.module != undefined && data.module != \"\") {\n                links[data.code.replaceAll(\" \", \"_\") + \" Module\"] = data.module;\n            }\n\n            links[data.code.replaceAll(\" \", \"_\")] = data.url;\n        }\n        msg.payload = links;\n        if(msg.payload != undefined && msg.payload != \"\" && Object.keys(msg.payload).length != 0) {\n            node.send(msg);\n        }\n        msg.topic = oldTopic;\n        msg.payload = numOfCodes;\n    }\n    else {\n        numOfCodes = msg.payload[\"Total\"];\n        delete msg.payload[\"Total\"];\n        msg.topic = \"HMS\";\n        if (msg.payload != undefined && msg.payload != \"\" && Object.keys(msg.payload).length != 0) {\n            msg.topic = root_topic + \"/sensor/\" + ha_device_name + \"/\" + msg.topic + \"/attr\";\n            node.send(msg);\n        }\n        msg.topic = \"HMS\";\n        msg.payload = numOfCodes;\n    }\n}\nelse if (msg.topic == \"speed\") {\n    var oldTopic = msg.topic;\n    hasAttr = true;\n    msg.topic = root_topic + \"/select/\" + ha_device_name + \"/\" + msg.topic + \"/attr\";\n    node.send(msg);\n    msg.topic = root_topic + \"/sensor/\" + ha_device_name + \"/\" + \"speed_info\" + \"/attr\";\n    node.send(msg);\n    msg.topic = \"speed\";\n    msg.payload = msg.payload.profile;\n    msg.topic = root_topic + \"/select/\" + ha_device_name + \"/\" + \"speed\" + \"/state\";\n    node.send(msg);\n    msg.topic = root_topic + \"/sensor/\" + ha_device_name + \"/\" + \"speed_info\" + \"/state\";\n    node.send(msg);\n    return;\n}\nelse if (msg.topic == \"camera_resolution\") {\n    if (!flow.get(\"has_ipcam\")) {\n        return;\n    }\n    msg.topic = root_topic + \"/select/\" + ha_device_name + \"/\" + msg.topic + \"/state\";\n    node.send(msg);\n    return;\n}\nelse if (msg.topic == \"chamber_light\") {\n    msg.payload = msg.payload.toUpperCase();\n    msg.topic = root_topic + \"/light/\" + ha_device_name + \"/\" + msg.topic + \"/state\";\n    node.send(msg);\n    return;\n}\nelse if (msg.topic.match(/(.*)fan(.*)/) && msg.topic !== \"fan_gear\" && msg.topic != \"heatbreak_fan\"\n    && msg.topic != \"aux_part_fan\") {\n    let orig_topic = msg.topic;\n    msg.topic = root_topic + \"/sensor/\" + ha_device_name + \"/\" + orig_topic + \"/state\";\n    node.send(msg);\n    msg.topic = root_topic + \"/fan/\" + ha_device_name + \"/\" + orig_topic + \"/percent/state\";\n    msg.payload = parseInt(msg.payload) / 10;\n    node.send(msg);\n    if(msg.payload == 0 || msg.payload == \"0\") {\n        msg.payload = \"OFF\";\n        msg.topic = root_topic + \"/fan/\" + ha_device_name + \"/\" + orig_topic+ \"/state\";\n        node.send(msg);\n    }\n    else {\n        msg.payload = \"ON\";\n        msg.topic = root_topic + \"/fan/\" + ha_device_name + \"/\" + orig_topic + \"/state\";\n        node.send(msg);\n    }\n    return;\n}\n\nmsg.topic = root_topic + \"/\" + entity_type + \"/\" + ha_device_name + \"/\" + msg.topic + \"/state\";\n\nif(hasAttr || msg.topic.includes(\"/uptime\")) {\n    sendNonEmpty(msg);\n}\nelse {\n    node.send(msg);\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 300,
        "wires": [
            [
                "b5a43b74bb8f1e16"
            ]
        ]
    },
    {
        "id": "41797ced12627146",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "fa96932f13cc3d89",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "lights",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "fans",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1110,
        "y": 240,
        "wires": [
            [
                "b2881b8ed28a467c"
            ],
            [
                "b2881b8ed28a467c"
            ],
            [
                "1d07107071cbf004"
            ]
        ]
    },
    {
        "id": "b2881b8ed28a467c",
        "type": "split",
        "z": "fbda6ab16491b918",
        "g": "fa96932f13cc3d89",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 1270,
        "y": 240,
        "wires": [
            [
                "1d07107071cbf004"
            ]
        ]
    },
    {
        "id": "8a61805ce8145c12",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "fa96932f13cc3d89",
        "name": "",
        "property": "payload.print.command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "push_status",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "gcode_line",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "manual",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 1130,
        "y": 160,
        "wires": [
            [
                "29339232d219ddb1"
            ],
            [],
            [
                "29339232d219ddb1"
            ],
            [
                "39beda93a319856c"
            ]
        ]
    },
    {
        "id": "39beda93a319856c",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "fa96932f13cc3d89",
        "name": "",
        "property": "payload.print.command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "extrusion_cali_get_result",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "flowrate_get_result",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1270,
        "y": 120,
        "wires": [
            [
                "1c3c6f7e25faaa58"
            ],
            [
                "1c3c6f7e25faaa58"
            ],
            []
        ]
    },
    {
        "id": "29339232d219ddb1",
        "type": "link call",
        "z": "fbda6ab16491b918",
        "g": "fa96932f13cc3d89",
        "name": "Printer - General",
        "links": [
            "d6e7275cb2c7b336"
        ],
        "linkType": "static",
        "timeout": "60",
        "x": 1380,
        "y": 160,
        "wires": [
            [
                "d5e7799961b2eb4f"
            ]
        ]
    },
    {
        "id": "8e378e4216c736c1",
        "type": "link call",
        "z": "fbda6ab16491b918",
        "g": "fa96932f13cc3d89",
        "name": "Printer - Printer Parse",
        "links": [
            "bfd2f9c2fb504f1c"
        ],
        "linkType": "static",
        "timeout": "60",
        "x": 1300,
        "y": 200,
        "wires": [
            [
                "41797ced12627146"
            ]
        ]
    },
    {
        "id": "270186a0ec06877a",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "fa96932f13cc3d89",
        "name": "Printer-Payloads-In",
        "links": [
            "42610a7dcf4be785",
            "bf966f083683f4da",
            "c74f41e5232489b6",
            "ef76b3bf9e0b275d",
            "1d07107071cbf004",
            "467dd236ec573f33"
        ],
        "x": 1405,
        "y": 240,
        "wires": [
            [
                "472a15482a731de8",
                "86e9caa98fa51352"
            ]
        ]
    },
    {
        "id": "d1220a3ae60b4c1a",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "fa96932f13cc3d89",
        "name": "Printer-Print_In",
        "links": [
            "98a14b986eac3260"
        ],
        "x": 1055,
        "y": 160,
        "wires": [
            [
                "8a61805ce8145c12"
            ]
        ]
    },
    {
        "id": "f9c82d849c6f74a1",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "fa96932f13cc3d89",
        "name": "AMS General Out",
        "mode": "link",
        "links": [
            "82aa9f4491e3400c"
        ],
        "x": 1595,
        "y": 120,
        "wires": []
    },
    {
        "id": "720e8084d4453e96",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "fa96932f13cc3d89",
        "name": "Data Filter Out",
        "mode": "link",
        "links": [
            "45db6c3763eeabfe"
        ],
        "x": 1665,
        "y": 300,
        "wires": []
    },
    {
        "id": "1d07107071cbf004",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "fa96932f13cc3d89",
        "name": "Printer-Payloads-Out",
        "mode": "link",
        "links": [
            "270186a0ec06877a"
        ],
        "x": 1355,
        "y": 260,
        "wires": []
    },
    {
        "id": "135e57a801b6e9bf",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "fa96932f13cc3d89",
        "x": 1620,
        "y": 320,
        "wires": [
            [
                "720e8084d4453e96"
            ]
        ]
    },
    {
        "id": "1c3c6f7e25faaa58",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "fa96932f13cc3d89",
        "name": "Flow / PA results [WIP]",
        "property": "payload.print.result",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "success",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1440,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "b5a43b74bb8f1e16",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "fa96932f13cc3d89",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "/uptime/state",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1290,
        "y": 320,
        "wires": [
            [
                "5a60a09ca1cb3f82"
            ],
            [
                "135e57a801b6e9bf"
            ]
        ]
    },
    {
        "id": "5a60a09ca1cb3f82",
        "type": "rbe",
        "z": "fbda6ab16491b918",
        "g": "fa96932f13cc3d89",
        "name": "15s uptime update",
        "func": "deadband",
        "gap": "15",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1470,
        "y": 300,
        "wires": [
            [
                "135e57a801b6e9bf"
            ]
        ]
    },
    {
        "id": "14f23434a23cdae7",
        "type": "group",
        "z": "fbda6ab16491b918",
        "g": "296274a0d2a6c675",
        "name": "Initialize",
        "style": {
            "label": true
        },
        "nodes": [
            "b1c1923cb89b667b",
            "7c5bb5efa50cfa5b",
            "69b4c2a7d4558125",
            "a365818fb4a53f52",
            "dce813c208a9da90",
            "ab7f1b7beb3a2f80",
            "ebe6d4b6979d7c94",
            "92a884a3331bfa4b",
            "5cd82175da584146",
            "d944c995cf7771e0",
            "6835f39fb902578a",
            "9362a1b7e3670507",
            "92b557ed537a1451",
            "dcf228c59349178a",
            "b04f934b4958c998",
            "a6a549b513fe916b",
            "4c8011bd5cb181a7",
            "c5cc9910c88c94d9",
            "cc63110a9c0b3341",
            "b7c12d7bbd8b2bf6",
            "4e46edc8200fcf64",
            "123228b4999f2d36",
            "c74f41e5232489b6",
            "f0580207cb1f90ff",
            "b21b873582a6bd25",
            "5fb6dc8d8d5ee7ab",
            "4f076de3fb5b0359",
            "98a14b986eac3260",
            "0c500deed02f9729",
            "98dbb6a29829b692",
            "8eb8d0318afc5c0b",
            "0a5d92c3648ea7af",
            "0e9d8e65b9383827",
            "76065a5b0c44ed07",
            "4c873d61ff726024",
            "b47c61fe043f6351",
            "f4a1da1e7f145ef5",
            "4ee144b6fbfc2fb8",
            "b26670bf1f3f93ff",
            "96223de14da95f0a",
            "eba20ea13f37261c",
            "9c6461a60c6a8bd2",
            "81ac7533c0fa0a23",
            "d2e5a31a0167dbb9",
            "7ce5a5d895d667a5",
            "dcefe7310cd723d0",
            "f98243db0b2ce567",
            "8a0353bb8f4d07e7"
        ],
        "x": 54,
        "y": 59,
        "w": 952,
        "h": 462
    },
    {
        "id": "b1c1923cb89b667b",
        "type": "mqtt in",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "Bambu MQTT In",
        "topic": "",
        "qos": "2",
        "datatype": "json",
        "broker": "{GENERATED_PRINTER_MQTT_ID}",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 240,
        "y": 280,
        "wires": [
            [
                "69b4c2a7d4558125"
            ]
        ]
    },
    {
        "id": "7c5bb5efa50cfa5b",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "Inject Machine Details",
        "func": "let can_request = flow.get(\"can_request\");\n\nif (msg.status_change != undefined) {\n    if(msg.status_change == \"no_data\")\n        node.status({ fill: \"red\", shape: \"ring\", text: \"No Data\" });\n    else if (msg.status_change == \"warn_no_data\")\n        node.status({ fill: \"yellow\", shape: \"ring\", text: \"No Recent Data\" });\n    return;\n}\nif (msg.payload == undefined || \n    (Object.keys(msg.payload) != undefined\n     && Object.keys(msg.payload).length == 0)) { return };\nlet machine_name = flow.get(\"printer_name\");\nlet machine_serial = flow.get(\"serial_number\");\nlet manufacturer = \"Bambu Labs\";\nlet model = flow.get(\"model\");\n\nlet camera_stream_url = \"{STREAM_URL}\";\n//let camera_rtsp = \"{RTSP}\"\nlet snapshot_url = \"{SNAPSHOT_URL}\";\n\nif(msg.payload.original_host != undefined){\n    flow.set(\"printer_real_ip\", msg.payload.original_host);\n    delete msg.payload.original_host;\n}\n\nif(msg.payload.status != undefined) {\n    if (msg.payload.status == \"offline\") {\n        msg.payload.print[\"uptime\"] = 0;\n        flow.set(\"online_time\", -1);\n        node.send([null, msg]);\n        return;\n    }\n    delete msg.payload.status;\n}\n\nif(msg.payload.mc_print != undefined) {\n    msg.payload.mc_print.machine_name = machine_name;\n    msg.payload.mc_print.machine_serial = machine_serial;\n    msg.payload.mc_print.manufacturer = manufacturer;\n    let param = msg.payload.mc_print.param;\n    if (typeof param === 'string' || param instanceof String) { \n        if(param.includes(\"[AMS]\")) {\n            msg.payload.mc_print.model = \"AMS\";\n            node.send([msg, null]);\n        }\n        else {\n            msg.payload.mc_print.model = model;\n            node.send([msg, null]);\n        }\n    }        \n    else {\n        msg.payload.mc_print.model = model;\n        node.send([msg, null]);\n    }\n    node.status({ fill: \"green\", shape: \"ring\", text: \"Data Received\" });\n}\n\nif (msg.payload.print != undefined) {\n    if (msg.payload.print.command != undefined && msg.payload.print.command == \"project_file\") {\n        if (flow.get(\"printjob_mapping\") == undefined) {\n            flow.set(\"printjob_mapping\", {});\n        }\n        let mapping = flow.get(\"printjob_mapping\");\n        let d = msg.payload.print;\n        if (d['subtask_id'] != undefined && d['subtask_name'] != undefined && d['url'] != undefined) {\n            if (!d['url'].startsWith(\"file:///data/model/history\")) {\n                let is_update = false;\n                if (mapping[d['subtask_id']] != undefined) {\n                    is_update = true;\n                }\n                mapping[d['subtask_id']] = {\n                    \"subtask_name\": d[\"subtask_name\"],\n                    \"url\": d['url'],\n                    \"timestamp\": new Date()\n                };\n                flow.set(\"printjob_mapping\", mapping);\n\n                // delete unique jobs older than 3 days, but only trigger once we get a new one to add\n                if (!is_update) {\n                    let keys = Object.keys(mapping);\n                    let cutoff = new Date();\n                    cutoff.setDate(cutoff.getDate() - 7); //7 days\n                    for (var k of keys) {\n                        if (cutoff.getTime() > (new Date(mapping[k]['timestamp'])).getTime()) {\n                            delete mapping[k];\n                        }\n                    }\n                    flow.set(\"printjob_mapping\", mapping);\n                }\n            }\n            \n        }\n    }\n\n    if (msg.payload.print.command != undefined && msg.payload.print.command == \"project_file\" && msg.payload.print.timestamp != undefined) {\n        let start = msg.payload.print.timestamp.toString();\n        msg.payload.print = {\n            \"gcode_start_time\": start,\n            \"command\": \"manual\"\n        }\n    }\n    else if (msg.payload.print.command != undefined && msg.payload.print.command == \"project_file\" && msg.payload.print.timestamp == undefined) {\n       let start = Math.round(Date.now() / 1000).toString();\n        msg.payload.print = {\n            \"gcode_start_time\": start,\n            \"command\": \"manual\"\n        }\n    }\n\n    msg.payload.print.machine_name = machine_name;\n    msg.payload.print.machine_serial = machine_serial;\n    msg.machine_serial = machine_serial;\n    msg.payload.print.manufacturer = manufacturer;\n    msg.payload.print.model = model;\n\n    if (msg.payload.print.ams !== undefined && msg.payload.print.ams.ams != undefined) {\n        for (var ams of msg.payload.print.ams.ams) {\n            ams.printer_name = machine_name\n            ams.printer_serial = machine_serial\n        }\n        if (Object.keys(msg.payload.print).length > 50) {\n        }\n    }\n    msg.payload.print.status = \"online\";\n    if (flow.get(\"online_time\") == -1 || flow.get(\"online_time\") == undefined) {\n        flow.set(\"online_time\", new Date());\n        flow.set(\"last_time\")\n        msg.payload.print[\"uptime\"] = 0;\n    }\n\n    let now = new Date()\n    if (flow.get(\"online_time\") != undefined && flow.get(\"online_time\") != -1){ //&& Math.abs(flow.get(\"online_time\").getTime() - now.getTime())/1000 >= 1*60) {\n        // whenever we get a msg, update uptime\n        msg.payload.print[\"uptime\"] = Math.abs(flow.get(\"online_time\").getTime() - now.getTime()) / 1000;\n    }\n\n    msg.payload.print.reset_filter = \"\";\n\n    if (can_request) {\n        msg.payload.print.pause_print = \"\";\n        msg.payload.print.resume_print = \"\";\n        msg.payload.print.stop_print = \"\";\n    \n        msg.payload.print.force_update = \"\";\n        if (flow.get(\"allow_gcode_control\") == true) {\n            msg.payload.print.gcode_command = \"\";\n            msg.payload.print.send_gcode = \"\";\n        }\n    }\n\n    if (flow.get(\"basic_is_latest_flow\") != undefined) {\n        if (flow.get(\"basic_is_latest_flow\")) {\n            msg.payload.print.nodered_flow_status = \"Up to Date\";\n        }\n        else {\n            msg.payload.print.nodered_flow_status = \"Update Available\";\n        }\n    }\n    if(flow.get(\"basic_flow_version\") != undefined) {\n        msg.payload.print.nodered_flow_version = flow.get(\"basic_flow_version\");\n    }\n\n    if (flow.get(\"has_adv_flow\")) {\n        if(flow.get(\"advanced_flow_version\") != undefined) {\n            msg.payload.print.nodered_advanced_flow_version = flow.get(\"advanced_flow_version\");\n        }\n\n        if (flow.get(\"advanced_is_latest_flow\") != undefined) {\n            if (flow.get(\"advanced_is_latest_flow\")) {\n                msg.payload.print.nodered_advanced_flow_status = \"Up to Date\";\n            }\n            else {\n                msg.payload.print.nodered_advanced_flow_status = \"Update Available\";\n            }\n        }\n    }\n    \n    if(!model.startsWith(\"A1\")) {\n        if (can_request) {\n            msg.payload.print.logo_light_on = \"\";\n            msg.payload.print.logo_light_off = \"\";\n            msg.payload.print.nozzle_light_on = \"\";\n            msg.payload.print.nozzle_light_off = \"\";\n        }\n    }\n    if (flow.get(\"has_db_flow\") != undefined && flow.get(\"has_db_flow\") == true) {\n        msg.payload.print.active_print_time = \"\";\n        msg.payload.print.filament_printed = \"\";\n    }\n\n    if (can_request) \n        msg.payload.print.home = \"\";\n    \n    msg.payload.print.mqtt_connection_type = flow.get(\"P1P_CLOUD_MODE\") ? \"Bambu Cloud\" : \"Local\";\n    if (flow.get(\"has_ipcam\") && can_request) {\n        msg.payload.print.toggle_recording = \"\";\n        //msg.payload.print.toggle_timelapse = \"\";////////////////////////\n    }\n    \n    if (can_request) {\n        if(flow.get(\"ams_count\") > 0) {\n            msg.payload.print.toggle_auto_switch = \"\";\n        }\n        if (flow.get(\"model\").startsWith(\"X1\")) {\n            msg.payload.print.toggle_first_layer_inspection = \"\";\n            msg.payload.print.toggle_buildplate_detection = \"\";\n        }\n        msg.payload.print.set_bed_temp = \"\";\n        msg.payload.print.set_nozzle_temp = \"\";\n        msg.payload.print.set_speed_percent = \"\";\n        msg.payload.print.toggle_auto_recovery = \"\";\n        let can_heat_chamber = (flow.get(\"model\") == \"X1E\"); // change if retroactive\n        if(can_heat_chamber) {\n            msg.payload.print.set_chamber_temp = \"\";\n        }\n    }\n\n    //msg.payload.print.print_preview = \"\";\n\n    if (flow.get(\"has_adv_flow\")) {\n        //msg.payload.print.plate_type = \"\";\n        msg.payload.print.print_preview = \"\";\n        msg.payload.print.force_ftp_fetch = \"\";\n    }\n\n    if (can_request){\n        msg.payload.print.clear_external_spool = \"\";\n    }\n    if(model == \"X\"+\"1C\" || model == \"X\"+\"1\") {\n        let versions = flow.get(\"mc_print_versions\");\n        if (versions[model] != undefined) {\n            let valid_versions = versions[model];\n            if (valid_versions.length > 0 && valid_versions.includes(flow.get(\"fw_version\"))) {\n                msg.payload.print.last_calibrated_pa = \"\";\n            }\n        }\n\n      /*  if (msg.payload.printer != undefined && msg.payload.printer.SW_version != undefined && msg.payload.printer.SW_version != \"\"\n        && flow.get(\"x1plus_installed\") != undefined && flow.get(\"x1plus_installed\") == true) {\n            if(msg.payload.printer.SW_version.startsWith(\"99\")) {\n                if(flow.get(\"x1plus_active\") == undefined || flow.get(\"x1plus_active\") == false) {\n                    node.warn(\"[INFO] X1Plus CFW is currently Active\");\n                }\n                flow.set(\"x1plus_active\", true); \n            }\n            else{\n                if(flow.get(\"x1plus_active\") == undefined || flow.get(\"x1plus_active\") == true){\n                    node.warn(\"[INFO] X1Plus CFW is currently Not Active\");\n                }\n                flow.set(\"x1plus_active\", false); \n            }\n        }*/\n        if (flow.get(\"x1plus_installed\") != undefined && flow.get(\"x1plus_installed\") == true) {\n            if (flow.get(\"x1plus_active\") != undefined) {\n                if (flow.get(\"x1plus_active\")) \n                    msg.payload.print.x1plus = \"Active\";\n                else\n                    msg.payload.print.x1plus = \"Inactive\";\n            }\n        }\n    }\n\n    if (can_request)\n        msg.payload.print.unload_filament = \"\";\n\n    if(snapshot_url != undefined && snapshot_url != \"\" && snapshot_url != \"{\" + \"SNAPSHOT_URL\" + \"}\") {\n        msg.payload.print.snapshot_url = snapshot_url;\n    }\n\n    if (camera_stream_url != undefined && camera_stream_url != \"\" && camera_stream_url != \"{\" + \"STREAM_URL\" + \"}\") {\n        msg.payload.print.camera_stream_url = camera_stream_url;\n    }\n\n    if(msg.payload.print.ipcam != undefined && msg.payload.print.ipcam.rtsp_url != undefined) {\n        if(msg.payload.print.ipcam.rtsp_url == \"disable\") {\n            msg.payload.print.camera_rtsp = \"Disabled\";\n        }\n        else if (msg.payload.print.ipcam.rtsp_url.startsWith(\"rtsp\")) {\n            msg.payload.print.camera_rtsp = msg.payload.print.ipcam.rtsp_url;\n            if(msg.payload.print.ipcam.ipcam_dev == undefined) {\n                delete msg.payload.print.ipcam;\n            }\n        }\n        // rtsps://bblp:[access_code]@[lan_ip]:322/streaming/live/1    TCP\n    }\n\n    if(msg.payload.print.cali_version != undefined && msg.payload.print.cali_version >= 0 && model.includes(\"X1\")) {\n        flow.set(\"supports_calibration\", true);\n    }\n\n    node.status({ fill: \"green\", shape: \"ring\", text: \"Data Received\" });\n\n    if (flow.get(\"wws_bambu_\" + flow.get(\"printer_serial\")) != undefined) {\n        let d = flow.get(\"wws_bambu_\" + flow.get(\"printer_serial\"));\n        msg.payload.print[\"IP_Address\"] = d[\"IP Address\"];\n        msg.payload.print[\"Device_Dev_Name\"] = d[\"Name\"];\n        msg.payload.print[\"Connection_Type\"] = d[\"Connection Type\"];\n        msg.payload.print[\"Series\"] = d[\"Series\"];\n        msg.payload.print[\"SSDP_Model\"] = d[\"Model\"];\n    }\n\n}\n\n\nif (msg.payload.info != undefined || msg.payload.security != undefined || msg.payload.system != undefined) {\n    msg.printer_name = machine_name;\n    msg.machine_serial = machine_serial;\n    msg.manufacturer = manufacturer;\n    msg.model = model;\n\n    node.status({ fill: \"green\", shape: \"ring\", text: \"Data Received\" });\n}\nif (msg.payload == undefined ||\n    (Object.keys(msg.payload) != undefined\n        && Object.keys(msg.payload).length == 0)) { return };\nnode.send([msg, null]);\n//node.status({});",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"red\", shape: \"ring\", text: \"No Data Yet - First Boot\" });\nflow.set(\"online_time\", -1); // if I don't do this on start, it actually continues with last value...",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 340,
        "wires": [
            [
                "4c873d61ff726024"
            ],
            [
                "cc63110a9c0b3341"
            ]
        ]
    },
    {
        "id": "69b4c2a7d4558125",
        "type": "json",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "",
        "property": "payload.print",
        "action": "obj",
        "pretty": false,
        "x": 390,
        "y": 280,
        "wires": [
            [
                "b26670bf1f3f93ff",
                "dcefe7310cd723d0"
            ]
        ]
    },
    {
        "id": "a365818fb4a53f52",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "info",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "mc_print",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "print",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "system",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "upgrade",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 730,
        "y": 340,
        "wires": [
            [
                "5fb6dc8d8d5ee7ab"
            ],
            [
                "b21b873582a6bd25"
            ],
            [
                "98a14b986eac3260"
            ],
            [
                "4f076de3fb5b0359"
            ],
            [],
            []
        ]
    },
    {
        "id": "dce813c208a9da90",
        "type": "inject",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "Inject OFFLINE",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "20",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 190,
        "y": 480,
        "wires": [
            [
                "ab7f1b7beb3a2f80"
            ]
        ]
    },
    {
        "id": "ab7f1b7beb3a2f80",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "",
        "property": "is_printer_reachable",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 480,
        "wires": [
            [
                "cc63110a9c0b3341",
                "eba20ea13f37261c"
            ],
            []
        ]
    },
    {
        "id": "ebe6d4b6979d7c94",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "Cull Fail Msg",
        "func": "if (msg.payload.print != undefined && msg.payload.print.result != undefined\n&& msg.payload.print.result == \"FAIL\" ) {\n//\n}\nelse if(msg.payload != undefined && Object.keys(msg.payload).length > 0){\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 340,
        "wires": [
            [
                "a365818fb4a53f52"
            ]
        ]
    },
    {
        "id": "92a884a3331bfa4b",
        "type": "inject",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "Startup Trigger",
        "props": [
            {
                "p": "start_status",
                "v": "1",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "x": 180,
        "y": 120,
        "wires": [
            [
                "123228b4999f2d36",
                "98dbb6a29829b692"
            ]
        ]
    },
    {
        "id": "5cd82175da584146",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "",
        "property": "P1P_CLOUD_MODE",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 160,
        "wires": [
            [
                "b04f934b4958c998"
            ],
            [
                "4c8011bd5cb181a7"
            ]
        ]
    },
    {
        "id": "d944c995cf7771e0",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "Disconnect",
        "func": "let config = {\n    \"action\": \"disconnect\"\n}\nnode.send(config);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 120,
        "wires": [
            [
                "0a5d92c3648ea7af"
            ]
        ]
    },
    {
        "id": "6835f39fb902578a",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 840,
        "y": 160,
        "wires": [
            [
                "9362a1b7e3670507",
                "dcf228c59349178a"
            ]
        ]
    },
    {
        "id": "9362a1b7e3670507",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "Connect",
        "func": "let config = {\n    \"action\": \"connect\",\n    \"broker\": {\n        \"password\": global.get(\"BAMBU_ACCESS_TOKEN\"),\n        \"port\": 8883,\n        \"broker\": global.get(\"BAMBU_REGION\"),\n        \"username\": global.get(\"BAMBU_MQTT_USER\")\n    } \n}\n\nnode.send(config);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 200,
        "wires": [
            [
                "0a5d92c3648ea7af"
            ]
        ]
    },
    {
        "id": "92b557ed537a1451",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "Subscribe",
        "func": "let config = {\n    \"action\": \"subscribe\",\n    \"topic\": {\n        \"topic\": flow.get(\"printer_report_topic\"),\n        \"qos\": 2\n    }\n}\n\nnode.send(config);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 240,
        "wires": [
            [
                "b1c1923cb89b667b"
            ]
        ]
    },
    {
        "id": "dcf228c59349178a",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 680,
        "y": 200,
        "wires": [
            [
                "92b557ed537a1451"
            ]
        ]
    },
    {
        "id": "b04f934b4958c998",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "",
        "property": "BAMBU_ACCESS_TOKEN",
        "propertyType": "global",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 140,
        "wires": [
            [
                "0e9d8e65b9383827"
            ],
            [
                "a6a549b513fe916b"
            ]
        ]
    },
    {
        "id": "a6a549b513fe916b",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "",
        "pauseType": "delay",
        "timeout": "8",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 500,
        "y": 120,
        "wires": [
            [
                "b04f934b4958c998"
            ]
        ]
    },
    {
        "id": "4c8011bd5cb181a7",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "Connect",
        "func": "let config = {\n    \"action\": \"connect\",\n    \"broker\": {\n        \"password\": flow.get(\"access_code\"),\n        \"port\": 8883,\n        \"broker\": flow.get(\"printer_ip\"),\n        \"username\":\"bblp\"\n    } \n}\n\nnode.send(config);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 220,
        "wires": [
            [
                "b1c1923cb89b667b",
                "c5cc9910c88c94d9"
            ]
        ]
    },
    {
        "id": "c5cc9910c88c94d9",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 400,
        "y": 240,
        "wires": [
            [
                "92b557ed537a1451"
            ]
        ]
    },
    {
        "id": "cc63110a9c0b3341",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "Offline Payload",
        "func": "msg.payload = { \"print_status\": \"OFFLINE\", \n    \"status\": \"offline\", \n    \"uptime\": 0,\n    \"machine_name\":  flow.get(\"printer_name\"), \n    \"machine_serial\": flow.get(\"printer_serial\"),\n     \"stage\": {\n         \"current\": \"Offline\"\n     },\n     \"print_action\": \"Offline\",\n     \"reset_filter\": \"\",\n      \"force_update\": \"\",\n       \"ams_count\": 0 };\n\nif (flow.get(\"has_adv_flow\")) {\n    msg.payload['plate_type'] = \"\";\n}\n\nif (flow.get(\"basic_is_latest_flow\") != undefined) {\n    if (flow.get(\"basic_is_latest_flow\")) {\n        msg.payload.nodered_flow_status = \"Up to Date\";\n    }\n    else {\n        msg.payload.nodered_flow_status = \"Update Available\";\n    }\n}\nif(flow.get(\"basic_flow_version\") != undefined) {\n    msg.payload.nodered_flow_version = flow.get(\"basic_flow_version\");\n}\n\nif (flow.get(\"has_adv_flow\")) {\n    if(flow.get(\"advanced_flow_version\") != undefined) {\n        msg.payload.nodered_advanced_flow_version = flow.get(\"advanced_flow_version\");\n    }\n\n    if (flow.get(\"advanced_is_latest_flow\") != undefined) {\n        if (flow.get(\"advanced_is_latest_flow\")) {\n            msg.payload.nodered_advanced_flow_status = \"Up to Date\";\n        }\n        else {\n            msg.payload.nodered_advanced_flow_status = \"Update Available\";\n        }\n    }\n}\nmsg.topic = \"printer\";\nmsg.machine_name = flow.get(\"model\") + \"_\" + flow.get(\"printer_name\");\nmsg.machine_serial = flow.get(\"printer_serial\");\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 460,
        "wires": [
            [
                "f0580207cb1f90ff"
            ]
        ]
    },
    {
        "id": "b7c12d7bbd8b2bf6",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "Not Gcode",
        "rules": [
            {
                "t": "set",
                "p": "is_gcode_type",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 890,
        "y": 240,
        "wires": [
            [
                "4e46edc8200fcf64"
            ]
        ]
    },
    {
        "id": "4e46edc8200fcf64",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "Request Out",
        "mode": "link",
        "links": [
            "5c030c48f393ada7"
        ],
        "x": 935,
        "y": 280,
        "wires": []
    },
    {
        "id": "123228b4999f2d36",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "MQTT Init - Out",
        "mode": "link",
        "links": [
            "579d1955de91b7ed",
            "615fa8b6a8f75f59",
            "8eea69a76cf784bf",
            "45e8f0f3a2ca0f52"
        ],
        "x": 325,
        "y": 120,
        "wires": []
    },
    {
        "id": "c74f41e5232489b6",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "Printer-Payloads-Out",
        "mode": "link",
        "links": [
            "270186a0ec06877a"
        ],
        "x": 935,
        "y": 460,
        "wires": []
    },
    {
        "id": "f0580207cb1f90ff",
        "type": "split",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 850,
        "y": 460,
        "wires": [
            [
                "c74f41e5232489b6"
            ]
        ]
    },
    {
        "id": "b21b873582a6bd25",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "Printer-MC_Print_Out",
        "mode": "link",
        "links": [
            "03130ce05f9324be"
        ],
        "x": 845,
        "y": 320,
        "wires": []
    },
    {
        "id": "5fb6dc8d8d5ee7ab",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "Printer-Info_Out",
        "mode": "link",
        "links": [
            "32e2a8977a42b521"
        ],
        "x": 845,
        "y": 280,
        "wires": []
    },
    {
        "id": "4f076de3fb5b0359",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "Printer-System_Out",
        "mode": "link",
        "links": [
            "6a38ae324bf53fef"
        ],
        "x": 845,
        "y": 400,
        "wires": []
    },
    {
        "id": "98a14b986eac3260",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "Printer-Print_Out",
        "mode": "link",
        "links": [
            "d1220a3ae60b4c1a"
        ],
        "x": 845,
        "y": 360,
        "wires": []
    },
    {
        "id": "0c500deed02f9729",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "Try connect In",
        "links": [
            "98dbb6a29829b692",
            "f8a6698d236dc4b0"
        ],
        "x": 395,
        "y": 160,
        "wires": [
            [
                "5cd82175da584146"
            ]
        ]
    },
    {
        "id": "98dbb6a29829b692",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "Try connect Out",
        "mode": "link",
        "links": [
            "0c500deed02f9729"
        ],
        "x": 325,
        "y": 160,
        "wires": []
    },
    {
        "id": "8eb8d0318afc5c0b",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "x": 800,
        "y": 120,
        "wires": [
            [
                "d944c995cf7771e0",
                "6835f39fb902578a"
            ]
        ]
    },
    {
        "id": "0a5d92c3648ea7af",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "x": 960,
        "y": 200,
        "wires": [
            [
                "b7c12d7bbd8b2bf6"
            ]
        ]
    },
    {
        "id": "0e9d8e65b9383827",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "x": 760,
        "y": 120,
        "wires": [
            [
                "8a0353bb8f4d07e7",
                "8eb8d0318afc5c0b"
            ]
        ]
    },
    {
        "id": "76065a5b0c44ed07",
        "type": "trigger",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "",
        "op1": "1",
        "op2": "true",
        "op1type": "str",
        "op2type": "bool",
        "duration": "75",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 230,
        "y": 400,
        "wires": [
            [
                "96223de14da95f0a"
            ]
        ]
    },
    {
        "id": "4c873d61ff726024",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "x": 440,
        "y": 340,
        "wires": [
            [
                "ebe6d4b6979d7c94",
                "f4a1da1e7f145ef5"
            ]
        ]
    },
    {
        "id": "b47c61fe043f6351",
        "type": "trigger",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "",
        "op1": "1",
        "op2": "true",
        "op1type": "str",
        "op2type": "bool",
        "duration": "5",
        "extend": true,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 230,
        "y": 440,
        "wires": [
            [
                "eba20ea13f37261c"
            ]
        ]
    },
    {
        "id": "f4a1da1e7f145ef5",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "x": 120,
        "y": 400,
        "wires": [
            [
                "76065a5b0c44ed07",
                "b47c61fe043f6351"
            ]
        ]
    },
    {
        "id": "4ee144b6fbfc2fb8",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "Inject Data In",
        "links": [
            "b26670bf1f3f93ff",
            "9c6461a60c6a8bd2",
            "4f9cef2b59791686",
            "767c55cf070cae64"
        ],
        "x": 95,
        "y": 340,
        "wires": [
            [
                "7c5bb5efa50cfa5b"
            ]
        ]
    },
    {
        "id": "b26670bf1f3f93ff",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "Inject Data Out",
        "mode": "link",
        "links": [
            "4ee144b6fbfc2fb8",
            "01bd763b5c349734"
        ],
        "x": 505,
        "y": 300,
        "wires": []
    },
    {
        "id": "96223de14da95f0a",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "Warn",
        "rules": [
            {
                "t": "set",
                "p": "status_change",
                "pt": "msg",
                "to": "warn_no_data",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 400,
        "wires": [
            [
                "81ac7533c0fa0a23"
            ]
        ]
    },
    {
        "id": "eba20ea13f37261c",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "No Data",
        "rules": [
            {
                "t": "set",
                "p": "status_change",
                "pt": "msg",
                "to": "no_data",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 440,
        "wires": [
            [
                "9c6461a60c6a8bd2"
            ]
        ]
    },
    {
        "id": "9c6461a60c6a8bd2",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "Inject Data Out",
        "mode": "link",
        "links": [
            "4ee144b6fbfc2fb8",
            "01bd763b5c349734"
        ],
        "x": 595,
        "y": 420,
        "wires": []
    },
    {
        "id": "81ac7533c0fa0a23",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "",
        "property": "is_connected",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 490,
        "y": 400,
        "wires": [
            [
                "9c6461a60c6a8bd2"
            ]
        ]
    },
    {
        "id": "d2e5a31a0167dbb9",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "Force Update Out",
        "mode": "link",
        "links": [
            "b34684c338d973fb"
        ],
        "x": 605,
        "y": 480,
        "wires": []
    },
    {
        "id": "7ce5a5d895d667a5",
        "type": "comment",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "TODO",
        "info": "This node is left empty on purpose\n\nuntil I find another approach that doesn't cause a force update every 20 seconds",
        "x": 530,
        "y": 480,
        "wires": []
    },
    {
        "id": "dcefe7310cd723d0",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "If Debug",
        "func": "if (flow.get(\"debug_data\")) {\n    if(msg.payload != undefined \n    && msg.payload.print != undefined\n    && msg.payload.print.command != undefined\n    && (\n        (msg.payload.print.command == \"push_status\"\n        && Object.keys(msg.payload.print).length > 50\n     //  && msg.payload.print.msg != undefined\n    //    && msg.payload.print.msg == 0) //all message, a 1 = partial\n        ||\n        (msg.payload.print.command == \"project_file\")\n        )\n    )) {\n        node.send(msg);\n    }\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"Copy from debug tab\" });\n} else {\nnode.status({ fill: \"blue\", shape: \"ring\", text: \"Disabled\" });\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 280,
        "wires": [
            [
                "f98243db0b2ce567"
            ]
        ]
    },
    {
        "id": "f98243db0b2ce567",
        "type": "debug",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "log",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.print",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 280,
        "wires": []
    },
    {
        "id": "8a0353bb8f4d07e7",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "14f23434a23cdae7",
        "name": "Loop 10m",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 660,
        "y": 100,
        "wires": [
            [
                "0e9d8e65b9383827"
            ]
        ]
    },
    {
        "id": "7952a4df8f4bb6a4",
        "type": "group",
        "z": "fbda6ab16491b918",
        "g": "296274a0d2a6c675",
        "name": "Reset + Force Options",
        "style": {
            "label": true
        },
        "nodes": [
            "7cbd22af688976aa",
            "804bf6ba99e0a70d",
            "891080cdc3c0148e",
            "a3b16737e50f0b4f",
            "872330b0d9c9afc5",
            "579d1955de91b7ed",
            "f839d59467de018e",
            "d9cff77271ac83a5",
            "31d7df2f9c558cdd",
            "6fd1f54a93cb3217",
            "b34684c338d973fb",
            "35b56dc02e67ecbc",
            "0c9c48807302abbe",
            "ec9ac5d1e7062638",
            "ee3e078aa3f64fe8",
            "01a98b208020fb4f",
            "054cba4bec79941d"
        ],
        "x": 54,
        "y": 839,
        "w": 722,
        "h": 242
    },
    {
        "id": "7cbd22af688976aa",
        "type": "inject",
        "z": "fbda6ab16491b918",
        "g": "7952a4df8f4bb6a4",
        "name": "Reset",
        "props": [
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "15",
        "topic": "",
        "x": 160,
        "y": 880,
        "wires": [
            [
                "872330b0d9c9afc5",
                "35b56dc02e67ecbc"
            ]
        ]
    },
    {
        "id": "804bf6ba99e0a70d",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "7952a4df8f4bb6a4",
        "name": "Force Update",
        "func": "var template = {\n    \"pushing\": {\n        \"sequence_id\": \"1\",\n        \"command\": \"pushall\",\n        \"verison\": 1,\n        \"push_target\": 1\n    },\n   \"user_id\": \"1234567890\"\n}\n\nvar force_connect = {\n    \"pushing\": {\n        \"sequence_id\": \"0\",\n        \"command\": \"start\"\n    }\n}\nif (flow.get(\"is_connected\") == \"true\") {\n    node.send({ \"payload\": force_connect, \"topic\": \"device/\" + flow.get(\"printer_serial\") + \"/request\" });\n    node.send({ \"payload\": template, \"topic\": \"device/\" + flow.get(\"printer_serial\") + \"/request\" });\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 1000,
        "wires": [
            [
                "a3b16737e50f0b4f",
                "31d7df2f9c558cdd"
            ]
        ]
    },
    {
        "id": "891080cdc3c0148e",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "7952a4df8f4bb6a4",
        "name": "",
        "pauseType": "delay",
        "timeout": "400",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 510,
        "y": 960,
        "wires": [
            [
                "0c9c48807302abbe"
            ]
        ]
    },
    {
        "id": "a3b16737e50f0b4f",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "7952a4df8f4bb6a4",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "topic",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 1000,
        "wires": [
            [
                "891080cdc3c0148e"
            ]
        ]
    },
    {
        "id": "872330b0d9c9afc5",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "7952a4df8f4bb6a4",
        "name": "data",
        "func": "msg.machine_name = flow.get(\"model\") + \"_\" + flow.get(\"printer_name\");\nmsg.model = flow.get(\"model\");\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 900,
        "wires": [
            [
                "0c9c48807302abbe"
            ]
        ]
    },
    {
        "id": "579d1955de91b7ed",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "7952a4df8f4bb6a4",
        "name": "MQTT Init - In",
        "links": [
            "123228b4999f2d36"
        ],
        "x": 95,
        "y": 940,
        "wires": [
            [
                "ee3e078aa3f64fe8"
            ]
        ]
    },
    {
        "id": "f839d59467de018e",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "7952a4df8f4bb6a4",
        "name": "Reset",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 920,
        "wires": [
            [
                "d9cff77271ac83a5"
            ]
        ]
    },
    {
        "id": "d9cff77271ac83a5",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "7952a4df8f4bb6a4",
        "name": "Data Filter Out",
        "mode": "link",
        "links": [
            "45db6c3763eeabfe"
        ],
        "x": 735,
        "y": 920,
        "wires": []
    },
    {
        "id": "31d7df2f9c558cdd",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "7952a4df8f4bb6a4",
        "name": "Not Gcode",
        "rules": [
            {
                "t": "set",
                "p": "is_gcode_type",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 210,
        "y": 1040,
        "wires": [
            [
                "ec9ac5d1e7062638"
            ]
        ]
    },
    {
        "id": "6fd1f54a93cb3217",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "7952a4df8f4bb6a4",
        "name": "Request Out",
        "mode": "link",
        "links": [
            "5c030c48f393ada7"
        ],
        "x": 505,
        "y": 1040,
        "wires": []
    },
    {
        "id": "b34684c338d973fb",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "7952a4df8f4bb6a4",
        "name": "Force Update In",
        "links": [
            "35b56dc02e67ecbc",
            "10c4349de6dd1635",
            "d2e5a31a0167dbb9",
            "11d02ee41ec95c58"
        ],
        "x": 95,
        "y": 1000,
        "wires": [
            [
                "804bf6ba99e0a70d"
            ]
        ]
    },
    {
        "id": "35b56dc02e67ecbc",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "7952a4df8f4bb6a4",
        "name": "Force Update Out",
        "mode": "link",
        "links": [
            "b34684c338d973fb"
        ],
        "x": 435,
        "y": 880,
        "wires": []
    },
    {
        "id": "0c9c48807302abbe",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "7952a4df8f4bb6a4",
        "x": 580,
        "y": 920,
        "wires": [
            [
                "f839d59467de018e"
            ]
        ]
    },
    {
        "id": "ec9ac5d1e7062638",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "7952a4df8f4bb6a4",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 390,
        "y": 1040,
        "wires": [
            [
                "6fd1f54a93cb3217"
            ]
        ]
    },
    {
        "id": "ee3e078aa3f64fe8",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "7952a4df8f4bb6a4",
        "name": "Sub",
        "func": "if (!flow.get(\"can_request\")) {\n    return;\n}\n\nlet topic = flow.get(\"root_topic\");\nlet device = flow.get(\"HA_DEVICE\");\n\nlet config = {\n    \"action\": \"subscribe\",\n    \"topic\": {\n        \"topic\": topic + \"/button/\" + device + \"/+\",\n        \"qos\": 2\n    }\n}\nnode.send(config);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 920,
        "wires": [
            [
                "01a98b208020fb4f"
            ]
        ]
    },
    {
        "id": "01a98b208020fb4f",
        "type": "mqtt in",
        "z": "fbda6ab16491b918",
        "g": "7952a4df8f4bb6a4",
        "name": "MQTT In",
        "topic": "",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "489094618c340eef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 200,
        "y": 960,
        "wires": [
            [
                "054cba4bec79941d"
            ]
        ]
    },
    {
        "id": "054cba4bec79941d",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "7952a4df8f4bb6a4",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "/force_update",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/reset_filter",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 920,
        "wires": [
            [
                "35b56dc02e67ecbc"
            ],
            [
                "0c9c48807302abbe"
            ]
        ]
    },
    {
        "id": "36af78d3bdf6f143",
        "type": "group",
        "z": "fbda6ab16491b918",
        "g": "296274a0d2a6c675",
        "name": "Data Out + Reconnect Try",
        "style": {
            "label": true
        },
        "nodes": [
            "17945f4d7962a94a",
            "67aa1b3a6a0ac3d7",
            "c868c39bb6549391",
            "6526126078390137",
            "f6805ea36226a930",
            "c1bc72e5401a7523",
            "128d03867a7d32ad",
            "9ea2ae26de45d301",
            "b8012fa88ed7a0a8",
            "d7d2f90f2ea888c7",
            "ee27856bdf0642fc",
            "60a8640310e103d8",
            "ed124bf7607cf819",
            "aff4b9e1263ffd60",
            "bdbc83c0f363dafb",
            "10e2b246db2f72b2",
            "9c5f2cf6bd12eac3",
            "92316c21e401b8ee",
            "a743a89be3ce1939",
            "9d34cf26a206259e",
            "501b1c4f185e9780",
            "75e874ad4ef7cdab",
            "ef8edbb19e868d87",
            "ad27409bf739e78a",
            "a9bc5527ac2caaa1",
            "217548f4041499b8",
            "8671211e6889427d",
            "45db6c3763eeabfe",
            "f8a6698d236dc4b0",
            "16760b726126412e",
            "10c4349de6dd1635",
            "8f276707783e36e0",
            "51e0ffef53d5bc20",
            "30917db9b244627a",
            "4fe869d51a3c3c7f",
            "67c064e556c8be90",
            "96d1204ac356d8fd"
        ],
        "x": 1634,
        "y": 679,
        "w": 812,
        "h": 462
    },
    {
        "id": "17945f4d7962a94a",
        "type": "mqtt out",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "HA MQTT Out",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "489094618c340eef",
        "x": 2340,
        "y": 900,
        "wires": []
    },
    {
        "id": "67aa1b3a6a0ac3d7",
        "type": "rbe",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 2110,
        "y": 940,
        "wires": [
            [
                "c868c39bb6549391"
            ]
        ]
    },
    {
        "id": "c868c39bb6549391",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "undefined",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2250,
        "y": 940,
        "wires": [
            [],
            [
                "17945f4d7962a94a"
            ]
        ]
    },
    {
        "id": "6526126078390137",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "Reset",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2250,
        "y": 820,
        "wires": [
            [
                "16760b726126412e"
            ]
        ]
    },
    {
        "id": "f6805ea36226a930",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "Get_Version Command",
        "func": "var template = {\n    \"info\": {\n        \"sequence_id\": \"20004\",\n        \"command\": \"get_version\"\n    },\n    \"user_id\": \"1234567890\"\n}\nif (flow.get(\"is_connected\") == \"true\") {\n    node.send({ \"payload\": template, \"topic\": \"device/\" + flow.get(\"printer_serial\") + \"/request\" });\n}\n\nlet template2 = {\n    \"system\": {\n        \"sequence_id\": \"20004\",\n        \"command\": \"get_accessories\",\n        \"accessory_type\": \"none\"\n    }\n}\nif (flow.get(\"is_connected\") == \"true\") {\n    node.send({ \"payload\": template2, \"topic\": \"device/\" + flow.get(\"printer_serial\") + \"/request\" });\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2110,
        "y": 1060,
        "wires": [
            [
                "8671211e6889427d"
            ]
        ]
    },
    {
        "id": "c1bc72e5401a7523",
        "type": "inject",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "Fetch Versions",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "30",
        "topic": "",
        "x": 2120,
        "y": 1100,
        "wires": [
            [
                "96d1204ac356d8fd"
            ]
        ]
    },
    {
        "id": "128d03867a7d32ad",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2120,
        "y": 1020,
        "wires": [
            [
                "10c4349de6dd1635"
            ]
        ]
    },
    {
        "id": "9ea2ae26de45d301",
        "type": "inject",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "Connect HA MQTT",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "x": 1770,
        "y": 840,
        "wires": [
            [
                "4fe869d51a3c3c7f"
            ]
        ]
    },
    {
        "id": "b8012fa88ed7a0a8",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "Connect",
        "func": "let config = {\n    \"action\": \"connect\",\n    \"broker\": {\n        \"password\": flow.get(\"mqtt_password\"),\n        \"port\": flow.get(\"mqtt_port\"),\n        \"broker\": flow.get(\"mqtt_broker\"),\n        \"username\": flow.get(\"mqtt_user\")\n    } \n}\n\nnode.send(config);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 860,
        "wires": [
            [
                "d7d2f90f2ea888c7",
                "a9bc5527ac2caaa1"
            ]
        ]
    },
    {
        "id": "d7d2f90f2ea888c7",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2200,
        "y": 860,
        "wires": [
            [
                "6526126078390137"
            ]
        ]
    },
    {
        "id": "ee27856bdf0642fc",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2120,
        "y": 980,
        "wires": [
            [
                "f8a6698d236dc4b0"
            ]
        ]
    },
    {
        "id": "60a8640310e103d8",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "",
        "pauseType": "delay",
        "timeout": "75",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1720,
        "y": 1040,
        "wires": [
            [
                "ad27409bf739e78a"
            ]
        ]
    },
    {
        "id": "ed124bf7607cf819",
        "type": "status",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "HA-MQTT-Status",
        "scope": [
            "17945f4d7962a94a"
        ],
        "x": 1740,
        "y": 800,
        "wires": [
            [
                "aff4b9e1263ffd60"
            ]
        ]
    },
    {
        "id": "aff4b9e1263ffd60",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "",
        "property": "status.fill",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "green",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "red",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1730,
        "y": 760,
        "wires": [
            [
                "10e2b246db2f72b2"
            ],
            [
                "9c5f2cf6bd12eac3"
            ]
        ]
    },
    {
        "id": "bdbc83c0f363dafb",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1960,
        "y": 800,
        "wires": [
            [
                "92316c21e401b8ee"
            ]
        ]
    },
    {
        "id": "10e2b246db2f72b2",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "HA MQTT Connected",
        "rules": [
            {
                "t": "set",
                "p": "ha_mqtt_is_connected",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1780,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "9c5f2cf6bd12eac3",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "HA MQTT Connected",
        "rules": [
            {
                "t": "set",
                "p": "ha_mqtt_is_connected",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1960,
        "y": 760,
        "wires": [
            [
                "bdbc83c0f363dafb"
            ]
        ]
    },
    {
        "id": "92316c21e401b8ee",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "",
        "property": "ha_mqtt_is_connected",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2090,
        "y": 800,
        "wires": [
            [
                "4fe869d51a3c3c7f",
                "bdbc83c0f363dafb"
            ]
        ]
    },
    {
        "id": "a743a89be3ce1939",
        "type": "status",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "Printer MQTT Status",
        "scope": [
            "b1c1923cb89b667b"
        ],
        "x": 1750,
        "y": 880,
        "wires": [
            [
                "75e874ad4ef7cdab"
            ]
        ]
    },
    {
        "id": "9d34cf26a206259e",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "Set Connection State Flow",
        "func": "\nif (msg.status != undefined && msg.status.fill != undefined){\n    if (msg.status.fill == \"green\") {\n        flow.set(\"is_connected\", \"true\");\n        node.send({});\n    }\n    else if (msg.status.fill == \"red\") {\n        flow.set(\"is_connected\", \"false\");\n        flow.set(\"x1plus_active\", undefined); \n        node.send({});\n    }\n    else if (msg.status.fill == \"yellow\") {\n        flow.set(\"is_connected\", \"false\");\n    }\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 960,
        "wires": [
            [
                "501b1c4f185e9780"
            ]
        ]
    },
    {
        "id": "501b1c4f185e9780",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "",
        "property": "is_connected",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1730,
        "y": 1000,
        "wires": [
            [
                "ef8edbb19e868d87",
                "67c064e556c8be90"
            ],
            [
                "60a8640310e103d8"
            ]
        ]
    },
    {
        "id": "75e874ad4ef7cdab",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "",
        "pauseType": "delay",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1750,
        "y": 920,
        "wires": [
            [
                "9d34cf26a206259e"
            ]
        ]
    },
    {
        "id": "ef8edbb19e868d87",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1880,
        "y": 1000,
        "wires": [
            [
                "51e0ffef53d5bc20"
            ]
        ]
    },
    {
        "id": "ad27409bf739e78a",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "MC Print Available",
        "func": "let versions = flow.get(\"mc_print_versions\");\nlet model = flow.get(\"model\");\nif(flow.get(\"fw_version\") == \"\") {\n    node.status({ fill: \"yellow\", shape: \"ring\", text: \"Firmware Version not detected!\" });\n    return;\n}\nif(versions[model] != undefined) {\n    let valid_versions = versions[model];\n    if (valid_versions.length > 0 && valid_versions.includes(flow.get(\"fw_version\"))) {\n        node.log(\"Firmware Version supports MC Print messages. AMS True Humidity, Last Calibrated PA value and Bed Mesh may be available depending on your model.\");\n\n        node.status({ fill: \"green\", shape: \"ring\", text: \"MC Print Supported\" });\n        return;\n    }\n}\nlet keyword = \"Not Supported\";\nlet colour = \"yellow\";\nif (flow.get(\"x1plus_active\") != undefined && flow.get(\"x1plus_active\") == true) {\n    //node.warn(\"[Ignorable] X1Plus offers limited and different support for MC Print messages. This is better than none and often more useable.\")\n    keyword = \"Limited Support\";\n    colour = \"blue\";\n}\nelse {\n    node.warn(\"[Ignorable] Firmware Version does not support MC Print messages. AMS True Humidity, Last (Single) Calibrated PA value and Bed Mesh will not be available as they are only available on older firmwares.\");\n}\nlet advBedMesh = flow.get(\"has_adv_bedmesh_flow\");\nlet basicBedMesh = flow.get(\"has_bedmesh_flow\");\n\nif(advBedMesh || basicBedMesh) {\n    if (flow.get(\"x1plus_active\") != undefined && flow.get(\"x1plus_active\") == true) {\n        flow.set(\"can_bedmesh\", true);\n    }\n    else {\n        node.warn(\"A Bed Mesh flow is present while on a firmware for printer \" + flow.get(\"model\") + \" \" + flow.get(\"printer_name\") + \" that does not support capturing the bed mesh. Firmware 01.05.01.00 can support this.\");\n        flow.set(\"can_bedmesh\", false);\n    }\n}\n\nnode.status({ fill: colour, shape: \"ring\", text: \"MC Print \" + keyword });",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "a9bc5527ac2caaa1",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "",
        "property": "ha_mqtt_is_connected",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2050,
        "y": 900,
        "wires": [
            [
                "17945f4d7962a94a"
            ]
        ]
    },
    {
        "id": "217548f4041499b8",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "Request Out",
        "mode": "link",
        "links": [
            "5c030c48f393ada7"
        ],
        "x": 2365,
        "y": 1020,
        "wires": []
    },
    {
        "id": "8671211e6889427d",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "Not Gcode",
        "rules": [
            {
                "t": "set",
                "p": "is_gcode_type",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2330,
        "y": 980,
        "wires": [
            [
                "217548f4041499b8"
            ]
        ]
    },
    {
        "id": "45db6c3763eeabfe",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "Data Filter In",
        "links": [
            "a8eb2272dd38dd3e",
            "720e8084d4453e96",
            "16760b726126412e",
            "d9cff77271ac83a5",
            "8ccfff70ac6a9595",
            "d415cfdd37d6d18e"
        ],
        "x": 2025,
        "y": 940,
        "wires": [
            [
                "67aa1b3a6a0ac3d7"
            ]
        ]
    },
    {
        "id": "f8a6698d236dc4b0",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "Try connect Out",
        "mode": "link",
        "links": [
            "0c500deed02f9729"
        ],
        "x": 2215,
        "y": 980,
        "wires": []
    },
    {
        "id": "16760b726126412e",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "Data Filter Out",
        "mode": "link",
        "links": [
            "45db6c3763eeabfe"
        ],
        "x": 2295,
        "y": 780,
        "wires": []
    },
    {
        "id": "10c4349de6dd1635",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "Force Update Out",
        "mode": "link",
        "links": [
            "b34684c338d973fb"
        ],
        "x": 2215,
        "y": 1020,
        "wires": []
    },
    {
        "id": "8f276707783e36e0",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "x": 2020,
        "y": 1020,
        "wires": [
            [
                "128d03867a7d32ad"
            ]
        ]
    },
    {
        "id": "51e0ffef53d5bc20",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "x": 1940,
        "y": 940,
        "wires": [
            [
                "30917db9b244627a",
                "4fe869d51a3c3c7f"
            ]
        ]
    },
    {
        "id": "30917db9b244627a",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "x": 2000,
        "y": 980,
        "wires": [
            [
                "8f276707783e36e0",
                "ee27856bdf0642fc"
            ]
        ]
    },
    {
        "id": "4fe869d51a3c3c7f",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "x": 1940,
        "y": 860,
        "wires": [
            [
                "b8012fa88ed7a0a8"
            ]
        ]
    },
    {
        "id": "67c064e556c8be90",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "x": 1840,
        "y": 1040,
        "wires": [
            [
                "f6805ea36226a930"
            ]
        ]
    },
    {
        "id": "96d1204ac356d8fd",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "36af78d3bdf6f143",
        "name": "",
        "property": "is_printer_reachable",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2270,
        "y": 1100,
        "wires": [
            [
                "f6805ea36226a930"
            ]
        ]
    },
    {
        "id": "e424761f7ba242f0",
        "type": "group",
        "z": "fbda6ab16491b918",
        "g": "296274a0d2a6c675",
        "name": "Force PushAll on Print Start",
        "style": {
            "label": true
        },
        "nodes": [
            "7f23c43abef301ac",
            "45648e40ae30f520",
            "66975120ceb22b00",
            "a8bd92e8ca7a9eac",
            "11667559bbe7ab5e",
            "11d02ee41ec95c58"
        ],
        "x": 1614,
        "y": 1419,
        "w": 392,
        "h": 162
    },
    {
        "id": "7f23c43abef301ac",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "e424761f7ba242f0",
        "name": "Subscribe",
        "func": "",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "let config = {\n    \"action\": \"subscribe\",\n    \"topic\": {\n        \"topic\": flow.get(\"root_topic\") + \"/sensor/\" + flow.get(\"HA_DEVICE\") + \"/print_status/state\",\n        \"qos\": 2\n    }\n}\nnode.send(config);",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 1460,
        "wires": [
            [
                "45648e40ae30f520"
            ]
        ]
    },
    {
        "id": "45648e40ae30f520",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "e424761f7ba242f0",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1850,
        "y": 1460,
        "wires": [
            [
                "66975120ceb22b00"
            ]
        ]
    },
    {
        "id": "66975120ceb22b00",
        "type": "mqtt in",
        "z": "fbda6ab16491b918",
        "g": "e424761f7ba242f0",
        "name": "MQTT In",
        "topic": "",
        "qos": "2",
        "datatype": "utf8",
        "broker": "489094618c340eef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 1700,
        "y": 1500,
        "wires": [
            [
                "a8bd92e8ca7a9eac"
            ]
        ]
    },
    {
        "id": "a8bd92e8ca7a9eac",
        "type": "rbe",
        "z": "fbda6ab16491b918",
        "g": "e424761f7ba242f0",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1830,
        "y": 1500,
        "wires": [
            [
                "11667559bbe7ab5e"
            ]
        ]
    },
    {
        "id": "11667559bbe7ab5e",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "e424761f7ba242f0",
        "name": "Running?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "RUNNING",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1700,
        "y": 1540,
        "wires": [
            [
                "11d02ee41ec95c58"
            ]
        ]
    },
    {
        "id": "11d02ee41ec95c58",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "e424761f7ba242f0",
        "name": "Force Update Out",
        "mode": "link",
        "links": [
            "b34684c338d973fb"
        ],
        "x": 1965,
        "y": 1540,
        "wires": []
    },
    {
        "id": "24db277c53bd7477",
        "type": "group",
        "z": "fbda6ab16491b918",
        "g": "296274a0d2a6c675",
        "name": "SSDP Data",
        "style": {
            "label": true
        },
        "nodes": [
            "245e709970f95938",
            "f0d8dca0de081c50",
            "78c1a289c7cafe92",
            "3680290f186a2d21",
            "21e549287ce6abc8",
            "80b9f87a59557a51"
        ],
        "x": 2034,
        "y": 1399,
        "w": 372,
        "h": 202
    },
    {
        "id": "245e709970f95938",
        "type": "udp in",
        "z": "fbda6ab16491b918",
        "g": "24db277c53bd7477",
        "name": "",
        "iface": "",
        "port": "2021",
        "ipv": "udp4",
        "multicast": "false",
        "group": "",
        "datatype": "utf8",
        "x": 2120,
        "y": 1480,
        "wires": [
            [
                "f0d8dca0de081c50"
            ]
        ]
    },
    {
        "id": "f0d8dca0de081c50",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "24db277c53bd7477",
        "name": "Is Bambu?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "urn:bambulab-com",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2290,
        "y": 1440,
        "wires": [
            [
                "80b9f87a59557a51"
            ]
        ]
    },
    {
        "id": "78c1a289c7cafe92",
        "type": "udp in",
        "z": "fbda6ab16491b918",
        "g": "24db277c53bd7477",
        "name": "",
        "iface": "",
        "port": "1990",
        "ipv": "udp4",
        "multicast": "false",
        "group": "",
        "datatype": "utf8",
        "x": 2120,
        "y": 1440,
        "wires": [
            [
                "f0d8dca0de081c50"
            ]
        ]
    },
    {
        "id": "3680290f186a2d21",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "24db277c53bd7477",
        "name": "split",
        "func": "function parseModel(model) {\n    if (model == \"3DPrinter-X1\") {\n        return \"BL-P002\";\n    }\n    else if (model == \"3DPrinter-X1-Carbon\") {\n        return \"BL-P001\";\n    }\n    else if (model == \"BL-P001\") {\n        return model;\n    }\n    else if (model == \"BL-P003\") {\n        return model;\n    }\n    return \"\";\n}\n\nfunction parseTrueModel(parsed_model) {\n    switch (parsed_model) {\n        case \"C11\":\n            return \"P1P\";\n        case \"C12\":\n            return \"P1S\";\n        case \"BL-P002\":\n            return \"X1\";\n        case \"BL-P001\":\n            return \"X1C\";\n        case \"C13\": \n            return \"X1E\";\n        case \"N1\":\n            return \"A1 Mini\";\n        case \"N2S\":\n            return \"A1\";\n        default: \n            return \"Unknown - \" + parseModel;\n    }\n}\n\nfunction parseSeries(true_model) {\n    if (true_model == \"P1P\" || true_model == \"P1S\") {\n        return \"P1 Series\";\n    }\n    else if (true_model == \"X1C\" || true_model == \"X1\" || true_model == \"X1E\") {\n        return \"X1 Series\";\n    }\n    else if (true_model == \"A1 Mini\" || true_model == \"A1\"){\n        return \"A1 Series\";\n    }\n    return \"\";\n}\n\nmsg.payload = msg.payload.split(\"\\n\");\nmsg.payload.shift();\nlet data = {};\nfor (var x of msg.payload) {\n    let entry = x.split(/:(.*)/s);\n    if(entry.length > 1){\n        let key = entry[0].trim();\n        let value = entry[1].trim();\n        switch(key) {\n            case \"Location\":\n                data[\"IP Address\"] = value;\n                break;\n            case \"USN\":\n                data[\"Serial Number\"] = value;\n                break;\n            case \"DevModel.bambu.com\":\n                data[\"Technical Model\"] = parseModel(value);\n                data[\"Model\"] = parseTrueModel(data['Technical Model']);\n                data[\"Series\"] = parseSeries(data['Model']);\n                break;\n            case \"DevName.bambu.com\":\n                data[\"Name\"] = value;\n                break;\n            case \"DevConnect.bambu.com\":\n                data[\"Connection Type\"] = value;\n        }\n        \n    }\n}\ndata[\"Last Updated\"] = Date.now();\nmsg.payload = data;\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 1560,
        "wires": [
            [
                "21e549287ce6abc8"
            ]
        ]
    },
    {
        "id": "21e549287ce6abc8",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "24db277c53bd7477",
        "name": "Flow Store",
        "func": "let name = \"wws_bambu_\" + msg.payload[\"Serial Number\"];\nflow.set(name, msg.payload);\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "80b9f87a59557a51",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "24db277c53bd7477",
        "name": "Is This Printer?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "printer_serial",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2300,
        "y": 1500,
        "wires": [
            [
                "3680290f186a2d21"
            ]
        ]
    },
    {
        "id": "92735e048f2071c3",
        "type": "group",
        "z": "fbda6ab16491b918",
        "g": "296274a0d2a6c675",
        "name": "Error Handling",
        "style": {
            "label": true
        },
        "nodes": [
            "4bf62bcce1adbf04",
            "08e50a8db4df30e3",
            "7b38a071adab1371"
        ],
        "x": 814,
        "y": 599,
        "w": 212,
        "h": 162,
        "info": "The purpose of this group is to catch \"ok\" errors\r\n\r\nThis way, when troubleshooting, there is no multi-day rabbit hole looking into\r\nerror that are OK to have no matter how many times I mention it :)"
    },
    {
        "id": "4bf62bcce1adbf04",
        "type": "catch",
        "z": "fbda6ab16491b918",
        "g": "92735e048f2071c3",
        "name": "",
        "scope": [
            "b1c1923cb89b667b",
            "f170c14144b3efe2",
            "663ce1f4df854c21",
            "210ff13bd04781a9",
            "e6d41304e7f2f0c0"
        ],
        "uncaught": false,
        "x": 890,
        "y": 640,
        "wires": [
            [
                "08e50a8db4df30e3"
            ]
        ]
    },
    {
        "id": "08e50a8db4df30e3",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "92735e048f2071c3",
        "name": "Check Error",
        "property": "error.message",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "RequestError:",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "JSON parse error",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "Error: Disconnect from broker before connecting",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 930,
        "y": 680,
        "wires": [
            [],
            [],
            [
                "7b38a071adab1371"
            ]
        ]
    },
    {
        "id": "7b38a071adab1371",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "92735e048f2071c3",
        "name": "Throw Error",
        "func": "node.error(msg.error.source.name + \"  \\n\" + msg.error.message);\nnode.error(msg);\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "346ec007b697e9b4",
        "type": "group",
        "z": "fbda6ab16491b918",
        "g": "296274a0d2a6c675",
        "name": "Flow Store",
        "style": {
            "label": true
        },
        "nodes": [
            "08a344b7f5ecdb6a",
            "490379a21efc5be0",
            "c86eafb618e36369",
            "55e160bf9168f1d2",
            "45e8f0f3a2ca0f52"
        ],
        "x": 804,
        "y": 819,
        "w": 262,
        "h": 202
    },
    {
        "id": "08a344b7f5ecdb6a",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "346ec007b697e9b4",
        "name": "Sub",
        "func": "let topic = flow.get(\"root_topic\");\nlet device = flow.get(\"HA_DEVICE\");\nlet retained = [\"print_start_epoch\", \"subtask\", \"print_status\", \"plate_name\", \"print_url\", \"stage\", \"print_progress\", \"gcode_command\"]\nflow.set(\"retained_mqtt\", retained)\n\nlet config = {\n    \"action\": \"subscribe\",\n    \"topic\": {\n        \"topic\": topic + \"/sensor/\" + device + \"/+/state\",\n        \"qos\": 2\n    }\n}\nnode.send(config);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 860,
        "wires": [
            [
                "490379a21efc5be0"
            ]
        ]
    },
    {
        "id": "490379a21efc5be0",
        "type": "mqtt in",
        "z": "fbda6ab16491b918",
        "g": "346ec007b697e9b4",
        "name": "MQTT In",
        "topic": "",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "489094618c340eef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 900,
        "y": 900,
        "wires": [
            [
                "55e160bf9168f1d2"
            ]
        ]
    },
    {
        "id": "c86eafb618e36369",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "346ec007b697e9b4",
        "name": "Store Retained In Flow",
        "func": "let retained = flow.get(\"retained_mqtt\");\nfor (var r of retained) {\n    if (msg.topic.endsWith(r + \"/state\")) {\n        let vals = msg.topic.split(\"/\");\n        let key = vals[vals.length - 2];\n        let prev = undefined;\n        if (flow.get(\"RET_\"+key) != undefined) {\n            prev = flow.get(\"RET_\" + key);\n        }\n        // useless, as if nodered is restart and context is reset, HA will keep prev values, this won't.\n        flow.set(\"PREV_RET\"+key, prev);\n        \n        flow.set(\"RET_\"+key, msg.payload);\n    }\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "55e160bf9168f1d2",
        "type": "rbe",
        "z": "fbda6ab16491b918",
        "g": "346ec007b697e9b4",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 890,
        "y": 940,
        "wires": [
            [
                "c86eafb618e36369"
            ]
        ]
    },
    {
        "id": "45e8f0f3a2ca0f52",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "346ec007b697e9b4",
        "name": "MQTT Init - In",
        "links": [
            "123228b4999f2d36"
        ],
        "x": 845,
        "y": 860,
        "wires": [
            [
                "08a344b7f5ecdb6a"
            ]
        ]
    }
]