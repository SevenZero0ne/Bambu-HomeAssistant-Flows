[
    {
        "id": "791d26fa232ad922",
        "type": "group",
        "z": "fbda6ab16491b918",
        "name": "Bed Mesh Parser Advanced",
        "style": {
            "stroke": "#92d04f",
            "fill": "#001f60",
            "fill-opacity": "0.76",
            "label": true,
            "color": "#92d04f"
        },
        "nodes": [
            "2a0ba80bf37d170c",
            "8b88223358dd69df",
            "8e185cdb9a8932af",
            "4451d030e6418f49",
            "8978c1243f654011",
            "c4d7905e3406300d",
            "fd4369e8c6dd7280",
            "060fe49fc21270c4",
            "5db05dca795db972",
            "c0b73094bf3797c7",
            "d4d9c0c56451621b",
            "ef37102da33be23c",
            "32821e386ab7692c",
            "0843c63919f7f6c1",
            "005f9d4dc018dbcf",
            "3ab2585a83ed5e83",
            "ba7c30e3c166b7b0",
            "91b4cf7e3ba9798d",
            "6796f76272d2b69b",
            "887b8d1cc0662353",
            "181a2ce7852cdf7b",
            "915c4af6b2f81d6f",
            "d365713e1c4dcbb0",
            "da02d991a063da17",
            "7b6eda9e520444f9",
            "80a622e4c89bda7b",
            "c7db32967e38c407",
            "b9cd83a69de2f8d1"
        ],
        "x": 2514,
        "y": 559,
        "w": 1032,
        "h": 522
    },
    {
        "id": "2a0ba80bf37d170c",
        "type": "mqtt in",
        "z": "fbda6ab16491b918",
        "g": "791d26fa232ad922",
        "name": "Bambu MQTT In",
        "topic": "",
        "qos": "2",
        "datatype": "json",
        "broker": "{GENERATED_PRINTER_MQTT_ID}",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 2680,
        "y": 960,
        "wires": [
            [
                "8b88223358dd69df"
            ]
        ]
    },
    {
        "id": "8b88223358dd69df",
        "type": "json",
        "z": "fbda6ab16491b918",
        "g": "791d26fa232ad922",
        "name": "",
        "property": "payload.print",
        "action": "obj",
        "pretty": false,
        "x": 2890,
        "y": 960,
        "wires": [
            [
                "8e185cdb9a8932af"
            ]
        ]
    },
    {
        "id": "8e185cdb9a8932af",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "791d26fa232ad922",
        "name": "Inject Machine Details",
        "func": "let machine_name = flow.get(\"printer_name\");\nlet machine_serial = flow.get(\"printer_serial\");\nlet manufacturer = \"Bambu Labs\";\nlet model = flow.get(\"model\");\n\n\nif(msg.payload.mc_print != undefined) {\n    msg.payload.mc_print.machine_name = machine_name;\n    msg.payload.mc_print.machine_serial = machine_serial;\n    msg.payload.mc_print.manufacturer = manufacturer;\n    let param = msg.payload.mc_print.param;\n    if (typeof param === 'string' || param instanceof String) { \n        if(param.includes(\"[AMS]\")) {\n            msg.payload.mc_print.model = \"AMS\";\n        }\n        else {\n            msg.payload.mc_print.model = model;\n            node.send(msg);\n        }\n    }        \n    else {\n            msg.payload.mc_print.model = model;\n            node.send(msg);\n    }\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2700,
        "y": 1000,
        "wires": [
            [
                "4451d030e6418f49"
            ]
        ]
    },
    {
        "id": "4451d030e6418f49",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "791d26fa232ad922",
        "name": "Cull Fail Msg",
        "func": "if (msg.payload != undefined && Object.keys(msg.payload).length > 0) {\n    if (msg.payload.mc_print != undefined && msg.payload.mc_print.command != undefined &&\n         (msg.payload.mc_print.command == \"mesh\" ||msg.payload.mc_print.command == \"mesh_data\") &&\n            flow.get(\"x1plus_active\") != undefined && flow.get(\"x1plus_active\") == true) {\n        msg[\"x1plus\"] = true;\n        node.send([null, msg]);\n    }\n    else {\n        node.send([msg, null]);\n    }\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2890,
        "y": 1000,
        "wires": [
            [
                "8978c1243f654011"
            ],
            [
                "c4d7905e3406300d"
            ]
        ]
    },
    {
        "id": "8978c1243f654011",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "791d26fa232ad922",
        "name": "",
        "property": "payload.mc_print.param",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "\\[BMC\\] X\\d+\\.\\d+ Y\\d+\\.\\d+,z_c=",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2650,
        "y": 1040,
        "wires": [
            [
                "c4d7905e3406300d"
            ]
        ]
    },
    {
        "id": "c4d7905e3406300d",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "791d26fa232ad922",
        "name": "Parse coord",
        "func": "let x, y, z = undefined;\nlet param = msg.payload.mc_print.param;\n\nif (msg[\"x1plus\"] != undefined && msg[\"x1plus\"] == true) {\n    if (typeof param === 'string' || param instanceof String) {\n        let s = param.split(\",\");\n        x = s[0];\n        y = s[1];\n        z = s[2];\n    }\n    else {\n        x = param[\"x\"];\n        y = param[\"y\"];\n        z = param[\"z\"];\n        param = `x:${x}, y:${y}, z:${z}`;\n    }\n}\n\nelse {\n    x = param.match(/X(\\d+\\.\\d+)/)[1];\n    y = param.match(/Y(\\d+\\.\\d+)/)[1];\n    z = param.match(/z_c=\\s+(-?\\d+\\.\\d+)/)[1];\n}\nlet coords = [x, y, z];\nmsg.payload = { \"coord\": { \"x\": parseFloat(x), \"y\": parseFloat(y), \"z\": parseFloat(z) } };\n\nlet abl = flow.get('abl2');\nabl.push(msg.payload);\nnode.send(msg);\nlet now = new Date();\nlet dt = now.toLocaleDateString(\"en-US\", {\"month\": \"short\", \"day\": \"numeric\", \"year\": \"numeric\", \"hour\": \"2-digit\", \"minute\": \"2-digit\"});\n\nnode.status({ fill: \"white\", shape: \"ring\", text: `Probed Pt #${abl.length} | ${param} - ${dt}` });",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2890,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "fd4369e8c6dd7280",
        "type": "mqtt in",
        "z": "fbda6ab16491b918",
        "g": "791d26fa232ad922",
        "name": "MQTT In",
        "topic": "",
        "qos": "2",
        "datatype": "utf8",
        "broker": "489094618c340eef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 2760,
        "y": 740,
        "wires": [
            [
                "5db05dca795db972"
            ]
        ]
    },
    {
        "id": "060fe49fc21270c4",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "791d26fa232ad922",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Auto bed leveling",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Offline",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Idle",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Printing",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 2950,
        "y": 720,
        "wires": [
            [
                "c0b73094bf3797c7"
            ],
            [
                "c0b73094bf3797c7"
            ],
            [
                "91b4cf7e3ba9798d"
            ],
            [
                "b9cd83a69de2f8d1"
            ]
        ]
    },
    {
        "id": "5db05dca795db972",
        "type": "rbe",
        "z": "fbda6ab16491b918",
        "g": "791d26fa232ad922",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 2950,
        "y": 660,
        "wires": [
            [
                "060fe49fc21270c4"
            ]
        ]
    },
    {
        "id": "c0b73094bf3797c7",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "791d26fa232ad922",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "abl2",
                "pt": "flow",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 3190,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "d4d9c0c56451621b",
        "type": "inject",
        "z": "fbda6ab16491b918",
        "g": "791d26fa232ad922",
        "name": "Init",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "bed_mesh_data",
        "payload": "None",
        "payloadType": "str",
        "x": 2610,
        "y": 660,
        "wires": [
            [
                "887b8d1cc0662353",
                "d365713e1c4dcbb0",
                "915c4af6b2f81d6f"
            ]
        ]
    },
    {
        "id": "ef37102da33be23c",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "791d26fa232ad922",
        "name": "Create Matrix",
        "func": "let abl = flow.get('abl2');\nif (abl.length > 0) {\n    let setX = new Set();\n    let setY = new Set();\n\n    for (let c of abl) {\n        setX.add(c.coord.x);\n        setY.add(c.coord.y);\n    }\n\n    let xs = Array.from(setX).sort(function (a, b) {\n        return a - b;\n    });\n    let ys = Array.from(setY).sort(function (a, b) {\n        return a - b;\n    });\n\n    let data = new Array(ys.length).fill(0).map(() => new Array(xs.length).fill(0));\n\n    for (var c of abl) {\n        let coord = c.coord;\n        let x = xs.indexOf(coord.x);\n        let y = ys.indexOf(coord.y);\n        data[y][x] = coord.z;\n    }\n    let strdata = JSON.stringify(data).replaceAll(\"[\", \"{\");\n    strdata = strdata.replaceAll(\"]\", \"}\");\n    msg['values'] = {\n        \"data\": strdata,\n        \"printer\": flow.get(\"printer_name\"),\n        \"printer_serial\": flow.get(\"printer_serial\")\n    }\n    node.send(msg);\n    flow.set('abl2', []);\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3180,
        "y": 800,
        "wires": [
            [
                "ba7c30e3c166b7b0"
            ]
        ]
    },
    {
        "id": "32821e386ab7692c",
        "type": "comment",
        "z": "fbda6ab16491b918",
        "g": "791d26fa232ad922",
        "name": "Bed Mesh Flow Advanced: Version 2.1.0",
        "info": "Version 2.1.0: 2024-03-13\n- Rebase version with new repo\n- X1Plus support, now works again!\n\n===\nRev 50: 2023-05-06\n- Initial Creation for Advanced version",
        "x": 2700,
        "y": 600,
        "wires": []
    },
    {
        "id": "0843c63919f7f6c1",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "791d26fa232ad922",
        "name": "",
        "property": "abl2",
        "propertyType": "flow",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3210,
        "y": 760,
        "wires": [
            [
                "ef37102da33be23c"
            ]
        ]
    },
    {
        "id": "005f9d4dc018dbcf",
        "type": "postgrestor",
        "z": "fbda6ab16491b918",
        "g": "791d26fa232ad922",
        "name": "Initialize",
        "query": "CREATE TABLE IF NOT EXISTS bed_mesh (\n    id SERIAL,\n    printer varchar(25) NOT NULL,\n    printer_serial varchar(20) NOT NULL,\n    scan_timestamp timestamp DEFAULT (now() at time zone 'utc'),\n    data float[][]\n);",
        "postgresDB": "79ce3199b8eeaa1c",
        "output": true,
        "outputs": 1,
        "x": 3200,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "3ab2585a83ed5e83",
        "type": "postgrestor",
        "z": "fbda6ab16491b918",
        "g": "791d26fa232ad922",
        "name": "Insert Bed Mesh Data",
        "query": "INSERT INTO bed_mesh (\n    printer,\n    printer_serial,\n    data\n) VALUES (\n    '{{msg.values.printer}}',\n    '{{msg.values.printer_serial}}',\n    '{{msg.values.data}}'\n);",
        "postgresDB": "79ce3199b8eeaa1c",
        "output": true,
        "outputs": 1,
        "x": 3420,
        "y": 840,
        "wires": [
            [
                "6796f76272d2b69b"
            ]
        ]
    },
    {
        "id": "ba7c30e3c166b7b0",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "791d26fa232ad922",
        "name": "",
        "property": "values.data",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3370,
        "y": 800,
        "wires": [
            [
                "3ab2585a83ed5e83"
            ]
        ]
    },
    {
        "id": "91b4cf7e3ba9798d",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "791d26fa232ad922",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3100,
        "y": 720,
        "wires": [
            [
                "0843c63919f7f6c1"
            ]
        ]
    },
    {
        "id": "6796f76272d2b69b",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "791d26fa232ad922",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3450,
        "y": 740,
        "wires": [
            [
                "c0b73094bf3797c7"
            ]
        ]
    },
    {
        "id": "887b8d1cc0662353",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "791d26fa232ad922",
        "name": "",
        "property": "has_basic_flow",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2970,
        "y": 620,
        "wires": [
            [
                "005f9d4dc018dbcf",
                "c0b73094bf3797c7"
            ]
        ]
    },
    {
        "id": "181a2ce7852cdf7b",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "791d26fa232ad922",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2720,
        "y": 780,
        "wires": [
            [
                "80a622e4c89bda7b"
            ]
        ]
    },
    {
        "id": "915c4af6b2f81d6f",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "791d26fa232ad922",
        "name": "Sub",
        "func": "let config = {\n    \"action\": \"subscribe\",\n    \"topic\": {\n        \"topic\": flow.get(\"root_topic\") + \"/sensor/\" + flow.get(\"HA_DEVICE\") + \"/stage/state\",\n        \"qos\": 2\n    }\n}\n\nnode.send(config);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2790,
        "y": 660,
        "wires": [
            [
                "c7db32967e38c407"
            ]
        ]
    },
    {
        "id": "d365713e1c4dcbb0",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "791d26fa232ad922",
        "x": 2580,
        "y": 700,
        "wires": [
            [
                "181a2ce7852cdf7b",
                "da02d991a063da17"
            ]
        ]
    },
    {
        "id": "da02d991a063da17",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "791d26fa232ad922",
        "name": "Sub",
        "func": "let config = {\n    \"action\": \"subscribe\",\n    \"topic\": {\n        \"topic\": \"device/\" + flow.get(\"printer_serial\") + \"/report\",\n        \"qos\": 2\n    }\n}\n\nnode.send(config);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2650,
        "y": 920,
        "wires": [
            [
                "7b6eda9e520444f9"
            ]
        ]
    },
    {
        "id": "7b6eda9e520444f9",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "791d26fa232ad922",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2800,
        "y": 920,
        "wires": [
            [
                "2a0ba80bf37d170c"
            ]
        ]
    },
    {
        "id": "80a622e4c89bda7b",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "791d26fa232ad922",
        "name": "Check Values Error",
        "func": "flow.set(\"has_adv_bedmesh_flow\", true);\nfunction testValue(val) {\n    return (val == undefined || val == \"\" || val.startsWith(\"{\"));\n}\n\nif (!flow.get(\"has_basic_flow\")) {\n    node.error(\"Advanced Bed Mesh Flow cannot be used without the Basic Flow group in the same flow.\");\n    return;\n}\nif (testValue(flow.get(\"printer_ip\"))) {\n    node.error(\"Printer IP is not set in flow properties\");\n}\nif (testValue(flow.get(\"access_code\"))) {\n    node.error(\"Printer LAN Access Code is not set in flow properties\")\n}\nif (testValue(flow.get(\"model\"))) {\n    node.error(\"Printer model is not set in flow properties\");\n}\nif (testValue(flow.get(\"printer_name\"))) {\n    node.error(\"Printer name is not set in flow properties\");\n}\nif (testValue(flow.get(\"printer_serial\"))) {\n    node.error(\"Printer serialnumber is not set in flow properties\");\n}\n\nif (testValue(flow.get(\"root_topic\"))) {\n    node.warn(\"Root Topic is not set, defaulting to homeassistant\");\n    flow.set(\"root_topic\", \"homeassistant\");\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2750,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "c7db32967e38c407",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "791d26fa232ad922",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2750,
        "y": 700,
        "wires": [
            [
                "fd4369e8c6dd7280"
            ]
        ]
    },
    {
        "id": "b9cd83a69de2f8d1",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "791d26fa232ad922",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 3000,
        "y": 780,
        "wires": [
            [
                "0843c63919f7f6c1"
            ]
        ]
    }
]