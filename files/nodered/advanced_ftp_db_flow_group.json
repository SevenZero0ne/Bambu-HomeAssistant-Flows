[
    {
        "id": "20b7b2baaa0fdddd",
        "type": "group",
        "z": "fbda6ab16491b918",
        "name": "Advanced Flow - FTPS, Postgres DB",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#000000",
            "label": true
        },
        "nodes": [
            "b3dce1cde1787caf",
            "0d11f934236fa7fd",
            "e2ddb329074d1a53",
            "615e0a4a63e8487d",
            "f8f24fbbe7cdd785",
            "e5f12bb804fc0374"
        ],
        "x": 22,
        "y": 1659,
        "w": 2490,
        "h": 1854
    },
    {
        "id": "b3dce1cde1787caf",
        "type": "comment",
        "z": "fbda6ab16491b918",
        "g": "20b7b2baaa0fdddd",
        "name": "Adv Flow: README",
        "info": "- If you do not want to have the database stuff, delete the \"Postgres DB\" group.\nThe FTPS fetch and filament type setter will still work without it\n\n- If you have a print start and it didn't fetch the image right or the weight or type,\ngo back here to the nodered flow and click the button on the \"FORCE FETCH\" inject node.",
        "x": 310,
        "y": 1700,
        "wires": []
    },
    {
        "id": "0d11f934236fa7fd",
        "type": "comment",
        "z": "fbda6ab16491b918",
        "g": "20b7b2baaa0fdddd",
        "name": "Version 2.1.3",
        "info": "Version 2.1.3: 2024-0?-??\n- Fixed up some logic around http print info mapping and backup attempts\n- Added Print Weight and Print Cost sensors\n- Fix for makerworld prints on P1 series not working for FTP File backup try when only one print is available\n - Turns out, gcode_file does not contain plate info in this case. Which makes no sense and would even break bambustudio\n- Major rework of adv flow\n - Removed dependency on zip palette and python palette (or python in general)\n - Swapped to exec nodes to run terminal commands for unzip and FTPS\n - organized into groups better\n===\nVersion 2.1.2: 2024-04-27\n- Added backup check for when \"print again\" is hit with local FTP prints.\n - Now the basic flow stores for 3 days subtask_ids and their print info, so when print again is clicked, it will look into their to try to find the correct print file to download.\n - Does not currently support HTTP (re)prints. (This is a WIP, need to better test)\n===\nVersion 2.1.1: 2024-04-10\n- Added version checking support for flow\n\n===\nVersion 2.1.0: 2024-03-13\n- Added plate_id column in db, so you can track which plate a print used\n- Remove some HA nodes in favour of flow variables set continuously from retained mqtt states from basic flow\n- Add more datetime parts to status messages \n\n===\nVersion 2.0.11: 2024-01-20\n- Added sensors that poll the DB for:\n - total tracked/recorded active printing time\n - total tracked/recorded grams of filament printed\n- misc fixes/typos\n- fix for gcode parsing missing vendor in recent orcaslicer updates.\n\n===\nVersion 2.0.10: 2023-12-30\n- Sync with basic flow update\n- Minor logic change in plate_name extraction if HA fails\n- Dashboard support change - print preview is now an image type, not camera\n\n===\nVersion 2.0.9: 2023-12-11\n- Add setting for printer device name from HA\n - this is requires after HA changed their MQTT implementation that f***ed up device names\n - makes it 10x more annoying for configurable dashboards and flows\n - it isn't configured to be used yet as I am attempting a different workaround, but it is ready for debugging and eventual permanent usage.\n\n===\nVersion 2.0.8: 2023-11-05\n- Minor tweaks around logic\n- Sync with 2.0.8\n\n===\nVersion 2.0.7: 2023-10-06\n- More GCode parsing\n- Multiple DB improvements\n - Material_used_cost is for the overall cost of all materials just as before\n - New progress_done column. To tell you how much progress a print had before it failed. Defaults to 100 for all retroactive prints.\n - New column for filament data.\n  - This column is from extracting via the gcode file *if applicable* to get details like profile, cost, weight, type, etc per filament used in a print.\n  - By default, it *removes* filament profiles that had 0 weight used. They usually come in if you keep a bunch loaded in bambustudio/orca but don't use them in a print.\n - Separated out the insert updates into a new subgroup.\n - New \"manual update\" option. Please read the NOTES for it.\n- Makerworld prints do *not* get overall weight used or cost of all filaments from gcode. It is missing.\n- Grafana dashboards updated to prioritize weight/type/cost from filament_data column. If absent or 0, will pull from the overall material columns.\n\n\n\n===\nVersion 2.0.6: 2023-09-19\n- Misc fixes for plate_name and filename\n- GCode extraction\n- DB Change, new column: material_used_cost\n - The previous columns meant for this were kept around but are still unused in case someone was using them\n - New column is filled in by parsing the GCode file for a print cost \n - This means you need to make sure your profiles are aligned for filament for their costs to be accurate\n - To simulate retroactively adding this to old print data (default 0.0), check the NOTES node at the bottom of the db postgres group\n===\nVersion 2.0.5: 2023-09-11\n- Fix for P1 series start time set from postgres flow being wrong (forgot to multiply epoch by 1000 for human readable override)\n- Added catch to HA node for when in P1 series, the start epoch just does not exist at all\n- FINALLY FIXED P1 FTP DOWNLOADING\n - turns out, listing from ftp the /cache directory, if it was a P1 it did not prefix the files with the path\n- Fixed start epoch resetting for p1 series\n\n===\nVersion 2.0.4: 2023-09-09\n- Additional workarounds for when start epoch is 0 or NaN (HA issues, cache issues, or P1 series issues caused)\n - When start epoch was still read as 0 for db flow, the plate/weight/material inserts also failed\n - Workaround is to have start epoch force created and if HA still reports 0, use a flow-set version which clears on print end.\n- More workarounds for plate name/id.\n\n===\nVersion 2.0.3: 2023-08-20\n- Added several workarounds for P1 series to get proper plate name/id\n- Added preventative measures in case http request fails when using P1 Cloud MQTT\n- Relying on new \"Plate name\" sensor from HA which requires basic flow 2.0.3+\n\n===\nVersion 2.0.2: 2023-08-19\n- Attempt to fix bug of FTPS flow not triggering\n- Fixed bug of db flow with forcing start epoch into db\n- Removed all HA State Trigger nodes, replaced with triggers from MQTT updates + manual fetch to HA to get previous and current state. This was done to make *all* node entity id's configurable via input, so there are no \"hardcoded\" nodes and it can be updated completely via basic flow settings group.\n  - This means it will be easy to reconfigure due to a typo or sensor name change.\n  - Do note this will mean there is at least a 10 second delay now purposefully on status updates - this was the lowest I could make it guaranteeing the HA history lookup would work.\n- Potential fixes for inability to maintain or get a plate id / name, along with workarounds\n- Fix for an error message that would sometimes come up for duplicate keys but could be ignored\n===\nVersion 2.0.0: 2023-08-05\n- Reset version as new codebase is in a repository now\n- Some cleanup\n- Reworked FTPS logic - it will prioritize using the MQTT Request msg with a url (FTP or HTTP if cloud) to parse the name. If this fails after 75 seconds, it will attempt the old approach still.\n- Removed old HTTP backup method for getting image. Preference to use MQTT, but if you want it back it is easy to make with default nodes.\n\nRev 46: 2023-05-01\n- Change according to main flow for making the mqtt connections easier when importing/generating\n\n===\nRev 39: 2023-04-26\n- Added extracting of plate_type for each print in ftp+postgres flow\n- Set plate_type sensor on x1c printer based on print details\n\n====\nRev 38: 2023-04-20\n- Increased delay when P1P Cloud in fetch\n\n====\nRev 36: 2023-04-07\n- Modified FTP flow to handle P1P in cloud Mode \nIf p1p cloud is toggled on, instead of FTPS, it will wait for the project file message to printer from mqtt server.\nIt will then do a GET download of the url from bambu's amazon webserver instead.\n- Modified Postgres Table schema, will be automatic upgrade.\n- Added a failsafe for start epoch as p1p cloud mode won't have it, this sets it ONLY for the print for DB purposes\n\n====\nRev 33: 2023-03-11\n- Changed FTP Image fetch logic. No longer do you need to rely on caching of a digital file or exposing nodered to the internet. Now, an image will be sent through MQTT (dashboard has associated update)\n\n====\nRev 31: 2023-03-05\n- General update for syncing\n\n====\nRev 30: 2023-02-25\n- Changed image and weight fetching to be fetch for the currently printed plate instead of default plate 1\n- Added \"Filament Type Setter\" to set filament type of printer based on 3mf file via FTPS, instead of relying on AMS in normal flow\n\n",
        "x": 130,
        "y": 1700,
        "wires": []
    },
    {
        "id": "e2ddb329074d1a53",
        "type": "group",
        "z": "fbda6ab16491b918",
        "g": "20b7b2baaa0fdddd",
        "name": "Filament, Plate Type, Print Meta Setter",
        "style": {
            "label": true
        },
        "nodes": [
            "2f0c417bdc5f70ba",
            "a49a2aa56216a94f",
            "e91c88c6b0449efb",
            "1a3a1c71ba1cf2f3",
            "5e0688f121b8fddb",
            "1b174dc5a3c2cb2b",
            "53d9f117e4bdc75a",
            "1e3ee56ffe1d6afb",
            "e72f63899b356531",
            "41db1a005f0694bc",
            "5be89edbbd6808a4",
            "270ff91a248dd8f8",
            "78ca6a864531e4b4",
            "7fe0a7636edfc4e8",
            "0f0b9aa41491e74a",
            "2b5fbcfc32a16fa5",
            "9d9e2b832774a598",
            "bd56371da0a2e632",
            "dc8f60896e88822e",
            "5a5aad687311dcf6",
            "015f1beab287c717",
            "3ead9edd41601385",
            "34a5733e7ccb948d",
            "8a4f1c973014f966",
            "7cea7009956f5aec",
            "dcebecadb5c407e4"
        ],
        "x": 1954,
        "y": 1899,
        "w": 532,
        "h": 582
    },
    {
        "id": "2f0c417bdc5f70ba",
        "type": "mqtt out",
        "z": "fbda6ab16491b918",
        "g": "e2ddb329074d1a53",
        "name": "MQTT Out",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "489094618c340eef",
        "x": 2390,
        "y": 2400,
        "wires": []
    },
    {
        "id": "a49a2aa56216a94f",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "e2ddb329074d1a53",
        "name": "Printer State",
        "func": "if (msg.payload == undefined) {\n    return;\n}\nif (msg.topic == \"plate_name\" && msg.payload != \"\") {\n    let match = msg.payload.match(/_?(plate_[1-9][0-9]?[0-9]?)/);\n    if (match != undefined && match.length > 1) {\n        msg.payload = match[1];\n    }\n}\nlet retained = flow.get(\"retained_mqtt\");\nfor (var r of retained) {\n    if (msg.topic.endsWith(r)) {\n        msg.retain = true;\n        msg.qos = 2;\n        break;\n    }\n}\nmsg.topic = flow.get(\"root_topic\") +\"/sensor/\" + msg.machine_name + \"/\" + msg.topic + \"/state\";\n\nnode.send(msg);\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 2400,
        "wires": [
            [
                "7cea7009956f5aec"
            ]
        ]
    },
    {
        "id": "e91c88c6b0449efb",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "e2ddb329074d1a53",
        "name": "Printer Config",
        "func": "let data = {};\nlet payload = {};\nlet device = {};\n\nfunction getFriendlyName(str) {\n    var i, word = str.split('_');\n    for (i = 0; i < word.length; i++) {\n        word[i] = word[i].charAt(0).toUpperCase() + word[i].slice(1);\n    }\n    return word.join(' ');\n}\n\nlet printer_name = msg.machine_name;\n\nlet type = \"sensor\";\nlet base_topic = flow.get(\"root_topic\") +\"/\"+ type + \"/\" + msg.machine_name + \"/\" + msg.topic;\ndata.topic = base_topic + \"/config\";\npayload.name = getFriendlyName(msg.topic);\n\ndevice.identifiers = [];\ndevice.identifiers[0] = { \"bambu_lab\": msg.machine_name, \"type\": \"printer\", \"serial\": flow.get(\"printer_serial\"), \"model\": flow.get(\"model\") };\ndevice.identifiers[1] = msg.machine_name;\ndevice.identifiers[2] = flow.get(\"printer_serial\");\ndevice.identifiers[0] = JSON.stringify(device.identifiers[0]);\ndevice.manufacturer = \"Bambu Labs\";\ndevice.model = msg.model;\ndevice.name = msg.machine_name;\nif( msg.icon != undefined) {\n    payload.icon = msg.icon\n}\n\nif (msg.topic == \"print_weight\") {\n    msg.unit_of_measurement = \"g\";\n    msg.device_class = \"weight\";\n    msg.state_class = \"measurement\";\n    msg.icon = \"mdi:weight-gram\";\n    payload.availability_topic = flow.get(\"root_topic\") + \"/\" + \"sensor\" + \"/\" + msg.machine_name + \"/\" + \"status\" + \"/state\";\n}\nelse if (msg.topic == \"print_cost\") {\n    msg.unit_of_measurement = \"$\";\n    msg.state_class = \"measurement\";\n    msg.icon = \"mdi:cash\";\n    payload.availability_topic = flow.get(\"root_topic\") + \"/\" + \"sensor\" + \"/\" + msg.machine_name + \"/\" + \"status\" + \"/state\";\n}\nif( msg.icon != undefined) {\n    payload.icon = msg.icon\n}\n\npayload.device = device;\npayload.unique_id = msg.machine_name + \"_\" + msg.topic;\npayload.object_id = payload.unique_id;\npayload.has_entity_name = false;\n\nif (msg.device_class != undefined)\n    payload.device_class = msg.device_class;\n\nif (msg.unit_of_measurement != undefined)\n    payload.unit_of_measurement = msg.unit_of_measurement;\n\n\npayload.state_topic = base_topic + \"/state\";\npayload.json_attributes_topic = base_topic + \"/attr\";\n\n\ndata.payload = payload;\n\ndata.qos = 1;\ndata.retain = true;\n\nnode.send(data);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2180,
        "y": 2360,
        "wires": [
            [
                "53d9f117e4bdc75a"
            ]
        ]
    },
    {
        "id": "1a3a1c71ba1cf2f3",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "e2ddb329074d1a53",
        "name": "Format Msg (Weight + Type + Cost)",
        "func": "msg.topic = \"filament\";\n\nlet weight = undefined;\nif (msg.payload.weight != undefined) {\n    weight = msg.payload.weight;\n}\n\nif(msg.cost != undefined) {\n    msg.topic = \"print_cost\";\n    msg.payload = msg.cost;\n}\nelse if(msg.payload.material == undefined) {\n    msg.payload = \"\";\n    return;\n}\nelse {\n    msg.payload = msg.payload.material;\n}\nmsg.machine_name = flow.get(\"printer_name\");\nmsg.model = flow.get(\"model\");\nif(msg.payload == \"\") {\n    return;\n    msg.payload = \"None\"\n}\n\nmsg.machine_name = flow.get(\"model\") + \"_\" + flow.get(\"printer_name\");\n\nnode.send(msg);\n\nif(weight != undefined && weight > 0) {\n    msg.topic = \"print_weight\";\n    msg.payload = weight;\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2280,
        "y": 2260,
        "wires": [
            [
                "270ff91a248dd8f8"
            ]
        ]
    },
    {
        "id": "5e0688f121b8fddb",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "e2ddb329074d1a53",
        "name": "If Failed",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "FAILED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FINISH",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 2080,
        "y": 2220,
        "wires": [
            [
                "e72f63899b356531"
            ],
            [
                "e72f63899b356531"
            ],
            []
        ]
    },
    {
        "id": "1b174dc5a3c2cb2b",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "e2ddb329074d1a53",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2080,
        "y": 2160,
        "wires": [
            [
                "5e0688f121b8fddb"
            ]
        ]
    },
    {
        "id": "53d9f117e4bdc75a",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "e2ddb329074d1a53",
        "x": 2300,
        "y": 2400,
        "wires": [
            [
                "2f0c417bdc5f70ba"
            ]
        ]
    },
    {
        "id": "1e3ee56ffe1d6afb",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "e2ddb329074d1a53",
        "x": 2040,
        "y": 2360,
        "wires": [
            [
                "e91c88c6b0449efb",
                "a49a2aa56216a94f"
            ]
        ]
    },
    {
        "id": "e72f63899b356531",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "e2ddb329074d1a53",
        "x": 2100,
        "y": 2260,
        "wires": [
            [
                "1a3a1c71ba1cf2f3"
            ]
        ]
    },
    {
        "id": "41db1a005f0694bc",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "e2ddb329074d1a53",
        "x": 2100,
        "y": 2280,
        "wires": [
            [
                "1a3a1c71ba1cf2f3"
            ]
        ]
    },
    {
        "id": "5be89edbbd6808a4",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "e2ddb329074d1a53",
        "name": "Format Msg (Plate)",
        "func": "msg.topic = \"plate_type\";\nif(msg.payload == undefined) {\n    msg.payload = \"\";\n}\nelse {\n    msg.payload = msg.payload;\n}\nmsg.machine_name = flow.get(\"printer_name\");\nmsg.model = flow.get(\"model\");\n\nif(msg.payload == \"\") {\n    msg.payload = \"Unknown\"\n}\n\nmsg.machine_name = flow.get(\"model\") + \"_\" + flow.get(\"printer_name\");\n\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2230,
        "y": 2300,
        "wires": [
            [
                "270ff91a248dd8f8"
            ]
        ]
    },
    {
        "id": "270ff91a248dd8f8",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "e2ddb329074d1a53",
        "x": 2420,
        "y": 2300,
        "wires": [
            [
                "1e3ee56ffe1d6afb"
            ]
        ]
    },
    {
        "id": "78ca6a864531e4b4",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "e2ddb329074d1a53",
        "name": "",
        "property": "has_basic_flow",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2250,
        "y": 2100,
        "wires": [
            [
                "1b174dc5a3c2cb2b"
            ]
        ]
    },
    {
        "id": "7fe0a7636edfc4e8",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "e2ddb329074d1a53",
        "x": 2120,
        "y": 2300,
        "wires": [
            [
                "5be89edbbd6808a4"
            ]
        ]
    },
    {
        "id": "0f0b9aa41491e74a",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "e2ddb329074d1a53",
        "name": "Type + Sum Weights In",
        "links": [
            "d0de2bfdbe4c20b5"
        ],
        "x": 2035,
        "y": 2280,
        "wires": [
            [
                "41db1a005f0694bc"
            ]
        ]
    },
    {
        "id": "2b5fbcfc32a16fa5",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "e2ddb329074d1a53",
        "name": "Plate Type In",
        "links": [
            "4ccfb3dfd3993e15"
        ],
        "x": 2035,
        "y": 2320,
        "wires": [
            [
                "7fe0a7636edfc4e8"
            ]
        ]
    },
    {
        "id": "9d9e2b832774a598",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "e2ddb329074d1a53",
        "name": "Subscribe",
        "func": "let config = {\n    \"action\": \"subscribe\",\n    \"topic\": {\n        \"topic\": flow.get(\"root_topic\") + \"/sensor/\" + flow.get(\"HA_DEVICE\") + \"/print_status/state\",\n        \"qos\": 2\n    }\n}\n\nnode.send(config);\nnode.status({ fill: \"white\", shape: \"ring\", text: \"Init\" });",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 1940,
        "wires": [
            [
                "bd56371da0a2e632"
            ]
        ]
    },
    {
        "id": "bd56371da0a2e632",
        "type": "mqtt in",
        "z": "fbda6ab16491b918",
        "g": "e2ddb329074d1a53",
        "name": "MQTT In",
        "topic": "",
        "qos": "2",
        "datatype": "utf8",
        "broker": "489094618c340eef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 2080,
        "y": 1980,
        "wires": [
            [
                "8a4f1c973014f966"
            ]
        ]
    },
    {
        "id": "dc8f60896e88822e",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "e2ddb329074d1a53",
        "name": "EId",
        "func": "msg.payload = {};\nmsg.payload.entityId = \"sensor.\" + flow.get(\"printer_ha_device_name\") + \"_print_status\";\nmsg.payload.entity_id = msg.payload.entityId;\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2070,
        "y": 2020,
        "wires": [
            [
                "5a5aad687311dcf6"
            ]
        ]
    },
    {
        "id": "5a5aad687311dcf6",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "e2ddb329074d1a53",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2200,
        "y": 2020,
        "wires": [
            [
                "015f1beab287c717"
            ]
        ]
    },
    {
        "id": "015f1beab287c717",
        "type": "api-get-history",
        "z": "fbda6ab16491b918",
        "g": "e2ddb329074d1a53",
        "name": "",
        "server": "ed9339d3bdf92870",
        "version": 1,
        "startDate": "",
        "endDate": "",
        "entityId": "",
        "entityIdType": "equals",
        "useRelativeTime": true,
        "relativeTime": "60s",
        "flatten": true,
        "outputType": "array",
        "outputLocationType": "msg",
        "outputLocation": "payload",
        "x": 2070,
        "y": 2060,
        "wires": [
            [
                "3ead9edd41601385"
            ]
        ]
    },
    {
        "id": "3ead9edd41601385",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "e2ddb329074d1a53",
        "name": "Get Latest & Previous",
        "func": "if (msg.payload != undefined && msg.payload.length != undefined && msg.payload.length > 0) {\n    let li = msg.payload;\n    let first_state = \"\";\n    let newmsg = {};\n    li.sort((x, y) => {\n        return new Date(x.last_updated) < new Date(y.last_updated) ? 1 : -1\n    })\n    let states_only = [];\n    for (var event of li) {\n        if (event.state == \"PREPARE\") {\n            continue;\n        }\n        if (first_state == \"\") {\n            first_state == event.state;\n            states_only.push(event.state);\n        }\n        else if (first_state != event.state) {\n            states_only.push(event.state);\n        }\n\n    }\n    newmsg.current_state = states_only[0];\n    newmsg.previous_state = states_only[0];\n    if (states_only.length > 1) {\n        newmsg.previous_state = states_only[1];\n    }\n    node.send(newmsg);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 2060,
        "wires": [
            [
                "34a5733e7ccb948d"
            ]
        ]
    },
    {
        "id": "34a5733e7ccb948d",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "e2ddb329074d1a53",
        "name": "End or Pause",
        "func": "if (msg.previous_state != undefined && msg.current_state != undefined\n    && msg.previous_state != msg.current_state\n    && msg.previous_state != \"FINISH\" && msg.previous_state != \"FAILED\") {\n    msg.payload = msg.current_state;\n    if(msg.previous_state == \"PAUSE\" && msg.current_state == \"RUNNING\") {\n        node.status({ fill: \"yellow\", shape: \"ring\", text: \"Print Resumed\" });\n    }\n    else {\n\n        if(msg.previous_state.toLowerCase() != \"unknown\"\n        && msg.previous_state.toLowerCase() != \"unavailable\"\n        && msg.previous_state != \"OFFLINE\" && msg.current_state != \"OFFLINE\"\n        && msg.current_state.toLowerCase() != \"unknown\"\n        && msg.current_state.toLowerCase() != \"unavailable\")\n        {\n            if (msg.previous_state != \"PAUSE\" && msg.current_state == \"PAUSE\"){\n                // paused\n                node.send(msg);\n                node.status({ fill: \"blue\", shape: \"ring\", text: \"Print Paused\" });\n            }\n            else if (msg.previous_state != \"FAILED\" && msg.current_state == \"FAILED\") {\n                // failed or cancelled\n                node.send(msg);\n                node.status({ fill: \"blue\", shape: \"ring\", text: \"Print Cancelled or Failed\" });\n            }\n            else if (msg.previous_state != \"FINISH\" && msg.current_state == \"FINISH\") {\n                // finished\n                node.send(msg);\n                node.status({ fill: \"blue\", shape: \"ring\", text: \"Print Completed\" });\n            }\n            else if (msg.current_state == \"RUNNING\"){\n                // starts\n                node.status({ fill: \"yellow\", shape: \"ring\", text: \"Print Started\" });\n            }\n        }\n    }\n} else {\n    node.status({ fill: \"white\", shape: \"ring\", text: \"Unhandled: \" + msg.previous_state + \" -> \" + msg.current_state });\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2100,
        "y": 2100,
        "wires": [
            [
                "78ca6a864531e4b4"
            ]
        ]
    },
    {
        "id": "8a4f1c973014f966",
        "type": "rbe",
        "z": "fbda6ab16491b918",
        "g": "e2ddb329074d1a53",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 2230,
        "y": 1980,
        "wires": [
            [
                "dc8f60896e88822e"
            ]
        ]
    },
    {
        "id": "7cea7009956f5aec",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "e2ddb329074d1a53",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2180,
        "y": 2440,
        "wires": [
            [
                "53d9f117e4bdc75a"
            ]
        ]
    },
    {
        "id": "dcebecadb5c407e4",
        "type": "inject",
        "z": "fbda6ab16491b918",
        "g": "e2ddb329074d1a53",
        "name": "Init",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 2050,
        "y": 1940,
        "wires": [
            [
                "9d9e2b832774a598"
            ]
        ]
    },
    {
        "id": "ed9339d3bdf92870",
        "type": "server",
        "name": "Home Assistant",
        "version": 5,
        "addon": false,
        "rejectUnauthorizedCerts": true,
        "ha_boolean": "y|yes|true|on|home|open",
        "connectionDelay": true,
        "cacheJson": true,
        "heartbeat": false,
        "heartbeatInterval": "30",
        "areaSelector": "friendlyName",
        "deviceSelector": "friendlyName",
        "entitySelector": "friendlyName",
        "statusSeparator": ": ",
        "statusYear": "hidden",
        "statusMonth": "short",
        "statusDay": "numeric",
        "statusHourCycle": "default",
        "statusTimeFormat": "h:m",
        "enableGlobalContextStore": true
    },
    {
        "id": "615e0a4a63e8487d",
        "type": "group",
        "z": "fbda6ab16491b918",
        "g": "20b7b2baaa0fdddd",
        "name": "HTTP/FTPS Print Fetch",
        "style": {
            "stroke": "#ffC000",
            "label": true,
            "color": "#ffcf3f"
        },
        "nodes": [
            "c905d2cbece4a005",
            "1303f7e11c7da28a",
            "9a80d72e27f5a9fd",
            "fb085418340f807f",
            "7ba43cad29afac9c",
            "2b6a547ffa94394d",
            "a04618988906643f",
            "29afc93ac757d13c",
            "a0b30399e596f2c4",
            "a326c60150f8d7e5",
            "f21a27ebe27373ac",
            "e866b50c11707240",
            "d2ef51373c46f4b9",
            "9c63753ac1e8be87",
            "7ff317869f9c6f32",
            "f5e80d942b782f85",
            "e1e4d60219ddca10",
            "4878f77e0b70394f",
            "9c9a70fe3c4e05a6",
            "f24558e18910f7cd",
            "93813c0a93edd5af",
            "a9c4d210d07b2491",
            "291c79c514634664",
            "2d2a60988e25d24d",
            "c85d1f9d9cfa90ca",
            "caf209ad93829c49",
            "9327e5ca3160a74e",
            "3f1c8e25f7805121",
            "34fb479b5e33f9c7",
            "bc1c9acec2e7b857",
            "a16e19bc9442375f",
            "3a7ca8e6215a655a",
            "2dda54c49285778c",
            "b4d807c686531217",
            "f5834a52286a1756",
            "1839983bc4fa6f32",
            "b1311756313d1f50",
            "d64e04129b153b23",
            "6dbc7a3a5001c0ba",
            "6a12ca3e9a532505",
            "46f772845cc334b4",
            "e2eb37196fdf0a9c",
            "4876d5e581790093",
            "b11e789a3aac95f5",
            "e096554cf201b92a",
            "025373ab54e9aeda",
            "fc677befd019349f",
            "817a6ad3d3665a9d",
            "6af036f7cc9232aa",
            "398639138b201dd5",
            "54042a55b8a55974",
            "183bfca36243abef",
            "b5b69753912ccad2",
            "b456a2ee2b063ef5",
            "a5e2795d2edc8cf5",
            "10bacfd4fdd72e6f",
            "cd21fb00d1a69ef7",
            "bb8a1edfc2371d2d"
        ],
        "x": 54,
        "y": 1713,
        "w": 1878,
        "h": 794
    },
    {
        "id": "c905d2cbece4a005",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "delay",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 470,
        "y": 1840,
        "wires": [
            [
                "2b6a547ffa94394d"
            ]
        ]
    },
    {
        "id": "1303f7e11c7da28a",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "x": 1760,
        "y": 1760,
        "wires": [
            [
                "9a80d72e27f5a9fd",
                "fb085418340f807f"
            ]
        ]
    },
    {
        "id": "9a80d72e27f5a9fd",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "Printer Config",
        "func": "let data = {};\nlet payload = {};\nlet device = {};\n\nmsg.machine_name = flow.get(\"printer_name\");\nmsg.model = flow.get(\"model\");\nmsg.machine_name = flow.get(\"model\") + \"_\" + flow.get(\"printer_name\");\n\nfunction getFriendlyName(str) {\n    var i, word = str.split('_');\n    for (i = 0; i < word.length; i++) {\n        word[i] = word[i].charAt(0).toUpperCase() + word[i].slice(1);\n    }\n    return word.join(' ');\n}\n\nlet printer_name = msg.machine_name;\n\nlet type = \"image\";\nif (msg.sensor_type != undefined) {\n    type = msg.sensor_type;\n}\n\nlet base_topic = flow.get(\"root_topic\") +\"/\"+ type + \"/\" + msg.machine_name + \"/\" + msg.topic;\ndata.topic = base_topic + \"/config\";\npayload.name = getFriendlyName(msg.topic);\n\ndevice.identifiers = [];\ndevice.identifiers[0] = { \"bambu_lab\": msg.machine_name, \"type\": \"printer\", \"serial\": flow.get(\"printer_serial\"), \"model\": flow.get(\"model\") };\ndevice.identifiers[1] = msg.machine_name;\ndevice.identifiers[2] = flow.get(\"printer_serial\");\ndevice.identifiers[0] = JSON.stringify(device.identifiers[0]);\ndevice.manufacturer = \"Bambu Labs\";\ndevice.name = msg.machine_name;\nif( msg.icon != undefined) {\n    payload.icon = msg.icon\n}\n\npayload.device = device;\npayload.unique_id = msg.machine_name + \"_\" + msg.topic;\npayload.object_id = payload.unique_id;\npayload.has_entity_name = false;\n\nif (msg.device_class != undefined)\n    payload.device_class = msg.device_class;\n\nif (msg.unit_of_measurement != undefined)\n    payload.unit_of_measurement = msg.unit_of_measurement;\n\nif (type == \"image\") {\n    payload.image_topic = base_topic + \"/image\";\n    payload.topic = base_topic + \"/image\";\n    payload.json_attributes_topic = base_topic + \"/attr\";\n    payload.image_encoding = \"b64\";\n}\nelse if (type == \"sensor\") {\n    payload.topic = base_topic + \"/state\";\n    payload.state_topic = base_topic + \"/state\";\n    payload.json_attributes_topic = base_topic + \"/attr\";\n}\ndata.qos = 1;\ndata.retain = true;\n\ndata.payload = payload;\n\nnode.send(data);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 1800,
        "wires": [
            [
                "bb8a1edfc2371d2d"
            ]
        ]
    },
    {
        "id": "fb085418340f807f",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "Printer State",
        "func": "if (msg.payload == undefined) {\n    return;\n}\nif(msg.sensor_type == undefined || msg.sensor_type == \"\") {\n    return;\n}\n\nif (msg.sensor_type == \"sensor\" && msg.topic == \"plate_name\" && msg.payload != \"\") {\n    let match = msg.payload.match(/_?(plate_[1-9][0-9]?[0-9]?)/);\n    if (match != undefined && match.length > 1) {\n        msg.payload = match[1];\n    }\n    else {\n        return;\n    }\n}\n\nif (msg.sensor_type == \"sensor\"){\n    let retained = flow.get(\"retained_mqtt\");\n    for (var r of retained) {\n        if (msg.topic.endsWith(r)) {\n            msg.retain = true;\n            msg.qos = 2;\n            break;\n        }\n    }\n    \n    msg.topic = flow.get(\"root_topic\") +\"/sensor/\" + msg.machine_name + \"/\" + msg.topic + \"/state\";\n}\n\nmsg.machine_name = flow.get(\"printer_name\");\nmsg.model = flow.get(\"model\");\nmsg.machine_name = flow.get(\"model\") + \"_\" + flow.get(\"printer_name\");\n\nif (msg.sensor_type == \"image\") {\n    msg.topic = flow.get(\"root_topic\") +\"/image/\" + msg.machine_name + \"/\" + msg.topic + \"/image\";\n}\n\nif (msg.topic.includes(flow.get(\"root_topic\"))) {\n    node.send(msg);\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 1840,
        "wires": [
            [
                "bb8a1edfc2371d2d"
            ]
        ]
    },
    {
        "id": "7ba43cad29afac9c",
        "type": "mqtt out",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "MQTT Out",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "489094618c340eef",
        "x": 1790,
        "y": 1880,
        "wires": []
    },
    {
        "id": "2b6a547ffa94394d",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "Printer Online?",
        "property": "is_printer_reachable",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 380,
        "y": 1800,
        "wires": [
            [
                "a04618988906643f"
            ]
        ]
    },
    {
        "id": "a04618988906643f",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "Is Not Cloud?",
        "property": "P1P_CLOUD_MODE",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 400,
        "y": 1760,
        "wires": [
            [
                "817a6ad3d3665a9d"
            ],
            [
                "54042a55b8a55974"
            ]
        ]
    },
    {
        "id": "29afc93ac757d13c",
        "type": "mqtt in",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "Bambu MQTT In",
        "topic": "",
        "qos": "2",
        "datatype": "json",
        "broker": "{GENERATED_PRINTER_MQTT_ID}",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 460,
        "y": 2280,
        "wires": [
            [
                "a0b30399e596f2c4"
            ]
        ]
    },
    {
        "id": "a0b30399e596f2c4",
        "type": "json",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "",
        "property": "payload.print",
        "action": "obj",
        "pretty": false,
        "x": 170,
        "y": 2320,
        "wires": [
            [
                "4878f77e0b70394f"
            ]
        ]
    },
    {
        "id": "a326c60150f8d7e5",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "Is Project URL Cloud?",
        "func": "flow.set(\"current_filename\", \"\");\nflow.set(\"current_platename\", \"\");\nflow.set(\"was_http_successful\", false);\nif(msg.payload != undefined && msg.payload.print != undefined\n        && msg.payload.print.command != undefined) {\n            if(msg.payload.print.command == \"project_file\"\n              && msg.payload.print.url != undefined\n              && String(msg.payload.print.url).startsWith(\"http\") ){\n                  msg.url = msg.payload.print.url;\n\n                  flow.set(\"http_print_file_url\", msg.url);\n\n                  flow.set(\"current_filename\", msg.url);\n\n                  if(msg.payload.print.param != undefined) {\n                    let plate = msg.payload.print.param.replace(\"Metadata/\", \"\");\n                    plate = plate.replace(\".gcode\", \"\");\n                    let match = plate.match(/_?(plate_[1-9][0-9]?[0-9]?)/);\n                    if (match != undefined && match.length > 1) {\n                      plate = match[1];\n                    }\n                    if (plate.includes(\"plate_\")) {\n                      flow.set(\"current_platename\", plate);\n                    }\n                    else {\n                      flow.set(\"current_platename\", \"\");\n                    }\n                    node.send([null, {\"payload\": plate, \"topic\": \"plate_name\"}], null);\n                  }\n\n                  delete msg.payload;\n                  node.send([msg, null, null]);\n            }\n            else if (msg.payload.print.command == \"project_file\"\n              && msg.payload.print.url != undefined\n              && !String(msg.payload.print.url).startsWith(\"http\")) {\n                node.send([null, null, msg]);\n              }\n\n}",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 2440,
        "wires": [
            [
                "183bfca36243abef"
            ],
            [
                "1839983bc4fa6f32"
            ],
            [
                "9c9a70fe3c4e05a6"
            ]
        ]
    },
    {
        "id": "f21a27ebe27373ac",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "Set FileNames Null",
        "rules": [
            {
                "t": "set",
                "p": "plate_file",
                "pt": "flow",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "xml_file",
                "pt": "flow",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "project_file",
                "pt": "flow",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 2160,
        "wires": [
            []
        ]
    },
    {
        "id": "e866b50c11707240",
        "type": "inject",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "FF",
        "props": [
            {
                "p": "filename",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 1940,
        "wires": [
            [
                "9c63753ac1e8be87"
            ]
        ]
    },
    {
        "id": "d2ef51373c46f4b9",
        "type": "inject",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "FORCE FETCH",
        "props": [
            {
                "p": "filename",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 1760,
        "wires": [
            [
                "291c79c514634664"
            ]
        ]
    },
    {
        "id": "9c63753ac1e8be87",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "",
        "property": "has_basic_flow",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 470,
        "y": 1960,
        "wires": [
            [
                "93813c0a93edd5af",
                "e096554cf201b92a"
            ]
        ]
    },
    {
        "id": "7ff317869f9c6f32",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "",
        "property": "has_basic_flow",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 330,
        "y": 1840,
        "wires": [
            [
                "9327e5ca3160a74e"
            ]
        ]
    },
    {
        "id": "f5e80d942b782f85",
        "type": "inject",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "Init 5s",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "x": 150,
        "y": 2280,
        "wires": [
            [
                "e1e4d60219ddca10"
            ]
        ]
    },
    {
        "id": "e1e4d60219ddca10",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "Subscribe",
        "func": "let config = {\n    \"action\": \"subscribe\",\n    \"topic\": {\n        \"topic\": flow.get(\"printer_report_topic\"),\n        \"qos\": 2\n    }\n}\nnode.send(config);\nnode.status({ fill: \"white\", shape: \"ring\", text: \"Init\" });",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 2280,
        "wires": [
            [
                "29afc93ac757d13c"
            ]
        ]
    },
    {
        "id": "4878f77e0b70394f",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "Is Not Cloud?",
        "property": "P1P_CLOUD_MODE",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 320,
        "y": 2320,
        "wires": [
            [
                "9c9a70fe3c4e05a6"
            ],
            [
                "a326c60150f8d7e5"
            ]
        ]
    },
    {
        "id": "9c9a70fe3c4e05a6",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "Is Project URL Local?",
        "func": "let filename = \"\";\nlet plate = \"\";\nflow.set(\"current_filename\", \"\");\nflow.set(\"current_platename\", \"\");\nif(msg.payload != undefined && msg.payload.print != undefined\n        && msg.payload.print.command != undefined) {\n            if(msg.payload.print.command == \"project_file\"\n              && msg.payload.print.url != undefined\n              && (String(msg.payload.print.url).startsWith(\"ftp\") \n                  || String(msg.payload.print.url).startsWith(\"file:\")\n                  )){\n                  if (String(msg.payload.print.url).startsWith(\"file:///data/model/history\")) {\n                    if (msg.payload.print['subtask_name'] != undefined && flow.get(\"printjob_mapping\") != undefined \n                     && flow.get(\"printjob_mapping\")[String(msg.payload.print['subtask_name']).replace(\".3mf\", \"\")] != undefined ) {\n                      let recorded = flow.get(\"printjob_mapping\")[String(msg.payload.print['subtask_name']).replace(\".3mf\", \"\")]; \n                      if (recorded['url'] != undefined && recorded['url'].startsWith(\"http\")) {\n                        msg.payload.print.url = recorded['url'];\n                        msg['from_mapping'] = true;\n                        node.send([null, null, msg]);\n                        return;\n                      }\n                    }\n                  }\n                  filename = msg.payload.print.url.replace(\"ftp://\", \"\");\n                  filename = filename.replace(\"file:///mnt/sdcard\", \"\");\n                  filename = filename.replace(\"file:///mnt/sdcard/\", \"\");\n                  filename = filename.replace(\"file:///mnt/\", \"\");\n                  filename = filename.replace(\"file:///mnt\", \"\");\n                  filename = filename.replace(\"file:///\", \"\");\n                  filename = filename.replace(\"file://\", \"\");\n                  filename = filename.replace(\"file:/\", \"\");\n                  filename = filename.replace(\"ftp://\", \"\");\n                  filename = filename.replace(\"ftp:/\", \"\");\n                  filename = filename.replace(\".gcode.3mf\", \"\");\n                  plate = msg.payload.print.param.replace(\"Metadata/\", \"\");\n                  plate = plate.replace(\".gcode\", \"\");\n                  let match = plate.match(/_?(plate_[1-9][0-9]?[0-9]?)/);\n                  if (match != undefined && match.length > 1) {\n                    plate = match[1];\n                  }\n                  msg.filename = filename;\n                  msg.plate_name = plate;\n                  delete msg.payload;\n                  flow.set(\"current_filename\", filename);\n                  if (plate.includes(\"plate_\")) {\n                    flow.set(\"current_platename\", plate);\n                  }\n                  else {\n                    flow.set(\"current_platename\", \"\");\n                  }\n                  node.send([msg, null, null]);\n                  node.send([null, { \"payload\": plate, \"topic\": \"plate_name\" }, null]);\n            }\n  else if (msg.payload.print.command == \"project_file\"\n    && msg.payload.print.url != undefined\n    && String(msg.payload.print.url).startsWith(\"http\")) {\n        node.send([null, null, msg]);\n    }\n}",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 2380,
        "wires": [
            [
                "6a12ca3e9a532505"
            ],
            [
                "1839983bc4fa6f32"
            ],
            [
                "a326c60150f8d7e5"
            ]
        ]
    },
    {
        "id": "f24558e18910f7cd",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "Clear Names",
        "rules": [
            {
                "t": "set",
                "p": "current_filename",
                "pt": "flow",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "current_platename",
                "pt": "flow",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "has_ftp_complete",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 2200,
        "wires": [
            []
        ]
    },
    {
        "id": "93813c0a93edd5af",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "",
        "pauseType": "delay",
        "timeout": "75",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 1940,
        "wires": [
            [
                "a9c4d210d07b2491"
            ]
        ]
    },
    {
        "id": "a9c4d210d07b2491",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "",
        "property": "has_ftp_complete",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 310,
        "y": 1900,
        "wires": [
            [
                "9327e5ca3160a74e"
            ]
        ]
    },
    {
        "id": "291c79c514634664",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "x": 260,
        "y": 1840,
        "wires": [
            [
                "7ff317869f9c6f32"
            ]
        ]
    },
    {
        "id": "2d2a60988e25d24d",
        "type": "mqtt in",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "MQTT In",
        "topic": "",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "489094618c340eef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 160,
        "y": 1880,
        "wires": [
            [
                "291c79c514634664"
            ]
        ]
    },
    {
        "id": "c85d1f9d9cfa90ca",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "Sub",
        "func": "flow.set(\"has_ftp_complete\", false);\nlet config = {\n    \"action\": \"subscribe\",\n    \"topic\": {\n        \"topic\": flow.get(\"root_topic\") + \"/button/\" + flow.get(\"HA_DEVICE\") + \"/force_ftp_fetch\",\n        \"qos\": 2\n    }\n}\nflow.set(\"was_http_successful\", false);\nflow.set(\"try_extract_backup\", false);\nnode.send(config);\nnode.status({ fill: \"white\", shape: \"ring\", text: \"Init\" });",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1840,
        "wires": [
            [
                "2d2a60988e25d24d"
            ]
        ]
    },
    {
        "id": "caf209ad93829c49",
        "type": "inject",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "Init",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 150,
        "y": 1800,
        "wires": [
            [
                "c85d1f9d9cfa90ca"
            ]
        ]
    },
    {
        "id": "9327e5ca3160a74e",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "x": 320,
        "y": 1880,
        "wires": [
            [
                "46f772845cc334b4"
            ]
        ]
    },
    {
        "id": "3f1c8e25f7805121",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "Sub",
        "func": "let config = {\n    \"action\": \"subscribe\",\n    \"topic\": {\n        \"topic\": flow.get(\"root_topic\") + \"/sensor/\" + flow.get(\"HA_DEVICE\") + \"/print_status/state\",\n        \"qos\": 2\n    }\n}\n\nnode.send(config);\nnode.status({ fill: \"white\", shape: \"ring\", text: \"Init\" });\n\nflow.set(\"http_print_file_url\", \"\");",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 2000,
        "wires": [
            [
                "34fb479b5e33f9c7"
            ]
        ]
    },
    {
        "id": "34fb479b5e33f9c7",
        "type": "mqtt in",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "MQTT In",
        "topic": "",
        "qos": "2",
        "datatype": "utf8",
        "broker": "489094618c340eef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 160,
        "y": 2040,
        "wires": [
            [
                "f5834a52286a1756"
            ]
        ]
    },
    {
        "id": "bc1c9acec2e7b857",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "EId",
        "func": "msg.payload = {};\nmsg.payload.entityId = \"sensor.\" + flow.get(\"printer_ha_device_name\") + \"_print_status\";\nmsg.payload.entity_id = msg.payload.entityId;\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 2080,
        "wires": [
            [
                "a16e19bc9442375f"
            ]
        ]
    },
    {
        "id": "a16e19bc9442375f",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 2080,
        "wires": [
            [
                "3a7ca8e6215a655a"
            ]
        ]
    },
    {
        "id": "3a7ca8e6215a655a",
        "type": "api-get-history",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "",
        "server": "ed9339d3bdf92870",
        "version": 1,
        "startDate": "",
        "endDate": "",
        "entityId": "",
        "entityIdType": "equals",
        "useRelativeTime": true,
        "relativeTime": "60s",
        "flatten": true,
        "outputType": "array",
        "outputLocationType": "msg",
        "outputLocation": "payload",
        "x": 150,
        "y": 2120,
        "wires": [
            [
                "2dda54c49285778c"
            ]
        ]
    },
    {
        "id": "2dda54c49285778c",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "Get Latest & Previous",
        "func": "if (msg.payload != undefined && msg.payload.length != undefined && msg.payload.length > 0) {\n    let li = msg.payload;\n    let first_state = \"\";\n    let newmsg = {};\n    li.sort((x, y) => {\n        return new Date(x.last_updated) < new Date(y.last_updated) ? 1 : -1\n    })\n    let states_only = [];\n    for (var event of li) {\n        if (event.state == \"PREPARE\") {\n            continue;\n        }\n        if (first_state == \"\") {\n            first_state == event.state;\n            states_only.push(event.state);\n        }\n        else if (first_state != event.state) {\n            states_only.push(event.state);\n        }\n\n    }\n    newmsg.current_state = states_only[0];\n    newmsg.previous_state = states_only[0];\n    if (states_only.length > 1) {\n        newmsg.previous_state = states_only[1];\n    }\n    node.send(newmsg);\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 2180,
        "wires": [
            [
                "b4d807c686531217"
            ]
        ]
    },
    {
        "id": "b4d807c686531217",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "Start / Ends (or reset)",
        "func": "if (msg.previous_state != undefined && msg.current_state != undefined\n    && msg.previous_state != msg.current_state) {\n    msg.payload = msg.current_state;\n    if(msg.previous_state == \"PAUSE\" && msg.current_state == \"RUNNING\") {\n        // resumed from pausing\n        flow.set(\"try_extract_backup\", false);\n    }\n    else {\n        if(msg.previous_state.toLowerCase() != \"unknown\"\n        && msg.previous_state.toLowerCase() != \"unavailable\"\n        && msg.previous_state != \"OFFLINE\"\n        && msg.current_state.toLowerCase() != \"unknown\"\n        && msg.current_state.toLowerCase() != \"unavailable\")\n        {\n            if (msg.previous_state != \"PAUSE\" && msg.current_state == \"PAUSE\"){\n                // paused\n                flow.set(\"try_extract_backup\", false);\n            }\n            else if (msg.current_state == \"IDLE\" || msg.current_state == \"OFFLINE\") {\n                node.send([null, msg]);\n                node.status({ fill: \"blue\", shape: \"ring\", text: \"Not Printing\" });\n                flow.set(\"try_extract_backup\", false);\n            }\n            else if ((msg.previous_state != \"FAILED\" && msg.current_state == \"FAILED\") || (msg.previous_state == \"RUNNING\" && msg.current_state == \"IDLE\")) {\n                // failed or cancelled\n                node.send([null, msg]);\n                node.status({ fill: \"blue\", shape: \"ring\", text: \"Print Cancelled or Failed\" });\n                flow.set(\"was_http_successful\", false);\n                flow.set(\"try_extract_backup\", false);\n                flow.set(\"http_print_file_url\", \"\");\n\n            }\n            else if (msg.previous_state != \"FINISH\" && msg.current_state == \"FINISH\") {\n                // finished\n                node.send([null, msg]);\n                node.status({ fill: \"blue\", shape: \"ring\", text: \"Print Completed\" });\n                flow.set(\"was_http_successful\", false);\n                flow.set(\"try_extract_backup\", false);\n                flow.set(\"http_print_file_url\", \"\");\n\n            }\n            else if (msg.current_state == \"RUNNING\"){\n                // starts\n                node.send([msg, null]);\n                node.status({ fill: \"blue\", shape: \"ring\", text: \"Print Started\" });\n                flow.set(\"try_extract_backup\", false);\n            }\n        }\n    }\n} else {\n    node.status({ fill: \"white\", shape: \"ring\", text: \"Unhandled: \" + msg.previous_state + \" -> \" + msg.current_state });\n    if(msg.current_state == \"OFFLINE\" || msg.current_state == \"FAILED\" || msg.current_state == \"FINISH\" || msg.current_state == \"IDLE\") {\n        flow.set(\"was_http_successful\", false);\n        flow.set(\"try_extract_backup\", false);\n        flow.set(\"http_print_file_url\", \"\");\n    }\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 2220,
        "wires": [
            [
                "b11e789a3aac95f5",
                "4876d5e581790093"
            ],
            [
                "f24558e18910f7cd",
                "f21a27ebe27373ac"
            ]
        ]
    },
    {
        "id": "f5834a52286a1756",
        "type": "rbe",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 290,
        "y": 2040,
        "wires": [
            [
                "bc1c9acec2e7b857"
            ]
        ]
    },
    {
        "id": "1839983bc4fa6f32",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "x": 360,
        "y": 2400,
        "wires": [
            [
                "398639138b201dd5"
            ]
        ]
    },
    {
        "id": "b1311756313d1f50",
        "type": "inject",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "Init",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 150,
        "y": 2000,
        "wires": [
            [
                "3f1c8e25f7805121"
            ]
        ]
    },
    {
        "id": "d64e04129b153b23",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "adv_mqtt-out",
        "links": [
            "d0c8110b3e5249f4",
            "6dbc7a3a5001c0ba",
            "da318563af366402"
        ],
        "x": 1715,
        "y": 1760,
        "wires": [
            [
                "1303f7e11c7da28a"
            ]
        ]
    },
    {
        "id": "6dbc7a3a5001c0ba",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "adv_mqtt-in",
        "mode": "link",
        "links": [
            "d64e04129b153b23"
        ],
        "x": 575,
        "y": 2400,
        "wires": []
    },
    {
        "id": "6a12ca3e9a532505",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "delay",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 430,
        "y": 2360,
        "wires": [
            [
                "6af036f7cc9232aa"
            ]
        ]
    },
    {
        "id": "46f772845cc334b4",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "",
        "property": "http_print_file_url",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 1880,
        "wires": [
            [
                "c905d2cbece4a005"
            ],
            [
                "e2eb37196fdf0a9c"
            ]
        ]
    },
    {
        "id": "e2eb37196fdf0a9c",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "http_print_file_url",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 1920,
        "wires": [
            [
                "b5b69753912ccad2"
            ]
        ]
    },
    {
        "id": "4876d5e581790093",
        "type": "rbe",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 470,
        "y": 2040,
        "wires": [
            [
                "025373ab54e9aeda"
            ]
        ]
    },
    {
        "id": "b11e789a3aac95f5",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "delay",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 470,
        "y": 2120,
        "wires": [
            [
                "fc677befd019349f"
            ]
        ]
    },
    {
        "id": "e096554cf201b92a",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "x": 560,
        "y": 2120,
        "wires": [
            [
                "f21a27ebe27373ac"
            ]
        ]
    },
    {
        "id": "025373ab54e9aeda",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 470,
        "y": 2000,
        "wires": [
            [
                "9c63753ac1e8be87"
            ]
        ]
    },
    {
        "id": "fc677befd019349f",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "rst",
        "rules": [
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 2080,
        "wires": [
            [
                "4876d5e581790093"
            ]
        ]
    },
    {
        "id": "817a6ad3d3665a9d",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "ftps-list-trigger-in-out",
        "mode": "link",
        "links": [
            "6cb046069ee50afb"
        ],
        "x": 585,
        "y": 1760,
        "wires": []
    },
    {
        "id": "6af036f7cc9232aa",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "ftps-list-trigger-in-out",
        "mode": "link",
        "links": [
            "6cb046069ee50afb"
        ],
        "x": 575,
        "y": 2360,
        "wires": []
    },
    {
        "id": "398639138b201dd5",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "sensor_type",
                "pt": "msg",
                "to": "sensor",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 2400,
        "wires": [
            [
                "6dbc7a3a5001c0ba"
            ]
        ]
    },
    {
        "id": "54042a55b8a55974",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "cloud check out",
        "mode": "link",
        "links": [
            "4436e8846c06a94f"
        ],
        "x": 585,
        "y": 1800,
        "wires": []
    },
    {
        "id": "183bfca36243abef",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "http link out",
        "mode": "link",
        "links": [
            "d85144751a0c7ee1"
        ],
        "x": 575,
        "y": 2440,
        "wires": []
    },
    {
        "id": "b5b69753912ccad2",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "http link out",
        "mode": "link",
        "links": [
            "d85144751a0c7ee1"
        ],
        "x": 585,
        "y": 1920,
        "wires": []
    },
    {
        "id": "b456a2ee2b063ef5",
        "type": "group",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "HTTP Group",
        "style": {
            "stroke": "#6f2fa0",
            "label": true
        },
        "nodes": [
            "1c845f7d3a35bec3",
            "dc50f8c00489f468",
            "22bd310294153ff5",
            "2965467d46be20b4",
            "21d6d496478d54b8",
            "22232609c683663d",
            "f067576a05ce8f67",
            "d1370446daf10571",
            "4436e8846c06a94f",
            "d85144751a0c7ee1"
        ],
        "x": 614,
        "y": 1959,
        "w": 532,
        "h": 182
    },
    {
        "id": "1c845f7d3a35bec3",
        "type": "http request",
        "z": "fbda6ab16491b918",
        "g": "b456a2ee2b063ef5",
        "name": "request",
        "method": "GET",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 740,
        "y": 2000,
        "wires": [
            [
                "22232609c683663d"
            ]
        ]
    },
    {
        "id": "dc50f8c00489f468",
        "type": "file",
        "z": "fbda6ab16491b918",
        "g": "b456a2ee2b063ef5",
        "name": "Save File",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 840,
        "y": 2060,
        "wires": [
            [
                "22bd310294153ff5"
            ]
        ]
    },
    {
        "id": "22bd310294153ff5",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "b456a2ee2b063ef5",
        "name": "Set Msg",
        "func": "\nlet now = new Date();\nlet dt = now.toLocaleDateString(\"en-US\", { \"month\": \"short\", \"day\": \"numeric\", \"year\": \"numeric\", \"hour\": \"2-digit\", \"minute\": \"2-digit\" });\n\n\n\nflow.set(\"try_extract_backup\", false);\nlet temp_msg = {\n    \"localFilename\": flow.get(\"path_prefix\")+flow.get(\"printer_name\")+\"/current_print.3mf\"\n};\ntemp_msg.method = \"HTTP\";\n\nnode.send(temp_msg);\n\n\nnode.status({ fill: \"blue\", shape: \"ring\", text: \"From HTTP: \" + `${flow.get(\"RET_\"+\"subtask\")} - ${dt}` });",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 2100,
        "wires": [
            [
                "d1370446daf10571"
            ]
        ]
    },
    {
        "id": "2965467d46be20b4",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "b456a2ee2b063ef5",
        "name": "delay",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 710,
        "y": 2060,
        "wires": [
            [
                "dc50f8c00489f468"
            ]
        ]
    },
    {
        "id": "21d6d496478d54b8",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "b456a2ee2b063ef5",
        "name": "delay",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1050,
        "y": 2000,
        "wires": [
            [
                "f067576a05ce8f67"
            ]
        ]
    },
    {
        "id": "22232609c683663d",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "b456a2ee2b063ef5",
        "name": "Status",
        "func": "let now = new Date();\nlet dt = now.toLocaleDateString(\"en-US\", { \"month\": \"short\", \"day\": \"numeric\", \"year\": \"numeric\", \"hour\": \"2-digit\", \"minute\": \"2-digit\" });\n\nif (msg.statusCode != undefined && msg.statusCode == 200) {\n    msg.filename = flow.get(\"path_prefix\")+flow.get(\"printer_name\")+\"/current_print.3mf\";\n    node.send(msg);\n    node.status({ fill: \"green\", shape: \"ring\", text: \"Success\" + ` - ${dt}`});\n    flow.set(\"was_http_successful\", true);\n}\nelse {\n    node.warn(\"Error with HTTP GET: \\n\"+ msg.payload);\n    flow.set(\"was_http_successful\", false);\n    node.status({ fill: \"red\", shape: \"ring\", text: \"ERROR\"+ ` - ${dt}` });\n    flow.set(\"http_print_file_url\", \"\");\n\n    let filename = flow.get(\"RET_\"+\"subtask\");\n    if (filename != undefined) {\n        filename = filename.replace(\".3mf\", \"\");\n    }\n    if (filename != undefined && flow.get(\"printjob_mapping\") != undefined && flow.get(\"printjob_mapping\")[filename] != undefined) {\n\n    }\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 2000,
        "wires": [
            [
                "2965467d46be20b4"
            ]
        ]
    },
    {
        "id": "f067576a05ce8f67",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "b456a2ee2b063ef5",
        "name": "HTTP Successful?",
        "property": "was_http_successful",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1030,
        "y": 2060,
        "wires": [
            [
                "22bd310294153ff5"
            ]
        ]
    },
    {
        "id": "d1370446daf10571",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "b456a2ee2b063ef5",
        "name": "ftp or http done out",
        "mode": "link",
        "links": [
            "49710497528a73bd"
        ],
        "x": 845,
        "y": 2100,
        "wires": []
    },
    {
        "id": "4436e8846c06a94f",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "b456a2ee2b063ef5",
        "name": "cloud check in",
        "links": [
            "54042a55b8a55974"
        ],
        "x": 965,
        "y": 2000,
        "wires": [
            [
                "21d6d496478d54b8"
            ]
        ]
    },
    {
        "id": "d85144751a0c7ee1",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "b456a2ee2b063ef5",
        "name": "http link in",
        "links": [
            "183bfca36243abef",
            "b5b69753912ccad2"
        ],
        "x": 655,
        "y": 2000,
        "wires": [
            [
                "1c845f7d3a35bec3"
            ]
        ]
    },
    {
        "id": "a5e2795d2edc8cf5",
        "type": "group",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "FTPS Group",
        "style": {
            "label": true,
            "stroke": "#ffbfbf"
        },
        "nodes": [
            "c8b78216f95f8724",
            "a0f7b45f5a228b40",
            "10e6b0c9b9159e0d",
            "94d689b7678280ab",
            "2baea6a75f67817d",
            "84f691a521695fd2",
            "32224e154dd11042",
            "32972334a68e7852",
            "a976f52574ef2598",
            "6cb046069ee50afb",
            "626e8370574c265c",
            "538c82d0162f3d37",
            "5cf8b602091be9bb",
            "3dc0d9a315fb5a62",
            "cbb6daf92dfb3396",
            "f21f80a62c5be33c",
            "b6ff9234e9c4103a",
            "0be1553629b451fb",
            "ef8c22a0abb68dee",
            "0e5da183f7404718",
            "a9aebbbfcb49d3f6"
        ],
        "x": 614,
        "y": 1739,
        "w": 1072,
        "h": 202
    },
    {
        "id": "c8b78216f95f8724",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a5e2795d2edc8cf5",
        "name": "Sort",
        "func": "\nlet now = new Date();\nlet dt = now.toLocaleDateString(\"en-US\", { \"month\": \"short\", \"day\": \"numeric\", \"year\": \"numeric\", \"hour\": \"2-digit\", \"minute\": \"2-digit\" });\n\n\nlet prefixes = [\"\", \"/cache\", \"/sdcard\", \"/sdcard/cache\"];\nif (msg.payload == \"\" || msg.payload == undefined ){\n    msg.directory_count += 1;\n\n    if (msg.directory_count >= prefixes.length) {\n        node.send([null, msg]);\n        node.status({ fill: \"blue\", shape: \"ring\", text: \"Done Listing \" + ` - ${dt}` });\n    }\n    else {\n        node.send([msg, null]);\n        node.status({ fill: \"yellow\", shape: \"ring\", text: \"Listing... \" + ` - ${dt}` });\n    }\n    return;\n}\n\nlet x = msg.payload.split(\"\\n\")\nif (msg.files == undefined) {\n    msg.files = [];\n}\n\nif (msg.directory_count == undefined) {\n    msg.directory_count = 0;\n}\n\nlet r = /\\d+ \\w+ \\d+\\s(\\d+:\\d+|\\s\\d{4}) (.*\\.3mf)/;\nfor (var a of x){\n    if (a.endsWith(\".3mf\")){\n        let f = a.match(r);\n        if (f != undefined && f.length > 2) {\n            let filename = f[2];\n            if (!filename.startsWith(\"/\")) {\n                filename = \"/\"+filename;\n            }\n            let pre = prefixes[msg.directory_count];\n            if (!filename.startsWith(pre) && pre != \"\") {\n                filename = pre + filename;\n            }\n            msg.files.push(filename); \n        }\n    }\n}\nmsg.directory_count += 1;\n\nif (msg.directory_count >= prefixes.length ) {\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"Done Listing \" + ` - ${dt}` });\n    node.send([null, msg]);\n}\nelse {\n    node.status({ fill: \"yellow\", shape: \"ring\", text: \"Listing... \" + ` - ${dt}` });\n    node.send([msg, null]);\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1900,
        "wires": [
            [
                "10e6b0c9b9159e0d"
            ],
            [
                "94d689b7678280ab"
            ]
        ]
    },
    {
        "id": "a0f7b45f5a228b40",
        "type": "exec",
        "z": "fbda6ab16491b918",
        "g": "a5e2795d2edc8cf5",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "FTPS List",
        "x": 740,
        "y": 1860,
        "wires": [
            [
                "c8b78216f95f8724"
            ],
            [],
            []
        ]
    },
    {
        "id": "10e6b0c9b9159e0d",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "a5e2795d2edc8cf5",
        "x": 660,
        "y": 1840,
        "wires": [
            [
                "2baea6a75f67817d"
            ]
        ]
    },
    {
        "id": "94d689b7678280ab",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "a5e2795d2edc8cf5",
        "name": "delay",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 890,
        "y": 1780,
        "wires": [
            [
                "84f691a521695fd2"
            ]
        ]
    },
    {
        "id": "2baea6a75f67817d",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a5e2795d2edc8cf5",
        "name": "List files",
        "func": "let ip = flow.get(\"printer_real_ip\");\nlet pw = flow.get(\"access_code\");\n\nif (msg.directory_count == undefined) {\n    msg.directory_count = 0;\n}\n// 0 root, 1 cache, 2 sdcard, 3 sdcard cache\n\nlet cmd = `curl -k ftps://bblp:${pw}@${ip}:990/`;\n\nif (msg.directory_count == 1) {\n    cmd = cmd + \"cache/\";\n}\nelse if(msg.directory_count == 2) {\n    cmd = cmd + \"sdcard/\";\n}\nelse if (msg.directory_count == 3) {\n    cmd = cmd + \"sdcard/cache/\";\n}\n\nmsg.payload = cmd;\nnode.send(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1820,
        "wires": [
            [
                "a0f7b45f5a228b40"
            ]
        ]
    },
    {
        "id": "84f691a521695fd2",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a5e2795d2edc8cf5",
        "name": "Filename?",
        "func": "let current_filename = flow.get(\"current_filename\");\n\nif(msg.retried != undefined && !msg.retried) {\n    flow.set(\"current_filename\", \"\");\n    msg.retried = true;\n}\nif(current_filename == undefined || current_filename == null || current_filename == \"\") {\n    // via ha\n    if(msg.payload != undefined) {\n        msg.old_payload = msg.payload;\n    }\n    msg.payload = {};\n    msg.payload.entityId = \"sensor.\" + flow.get(\"printer_ha_device_name\") + \"_subtask\";\n    msg.payload.entity_id = msg.payload.entityId;\n    node.send([msg, null]);\n}\nelse if (current_filename.startsWith(\"http\")) {\n    // p1p cloud\n}\nelse {\n    msg.filename = current_filename.replace(\".gcode.3mf\", \"\");\n    var found = false;\n    for (var obj of msg.files) {\n        if (!obj.endsWith(\".3mf\")) {\n            continue;\n        }\n        if (msg.filename == obj || msg.filename + \".3mf\" == obj\n            || msg.filename + \".gcode.3mf\" == obj) {\n            msg.filename = \"/\" + obj;\n            msg.payload = msg.filename;\n            node.send(msg)\n            let msgText = \"Found - \" + msg.payload;\n            node.status({ fill: \"blue\", shape: \"ring\", text: msgText });\n            found = true;\n            break;\n        }\n        else if (\"/cache/\" + msg.filename == obj || \"/cache/\" + msg.filename + \".3mf\" == obj\n            || \"/cache/\" + msg.filename + \".gcode.3mf\" == obj\n            || \"/cache\" + msg.filename == obj || \"/cache\" + msg.filename + \".3mf\" == obj\n            || \"/cache\" + msg.filename + \".gcode.3mf\" == obj\n            || \"/\" + msg.filename == obj || \"/\" + msg.filename + \".3mf\" == obj\n            || \"/\" + msg.filename + \".gcode.3mf\" == obj) {\n\n            msg.filename = obj;\n            msg.payload = msg.filename;\n            node.send(msg)\n            let msgText = \"Found - \" + msg.payload;\n            node.status({ fill: \"blue\", shape: \"ring\", text: msgText });\n            found = true;\n            break;\n        }\n    }\n    if (!found) {\n        // try HA approach just in case;\n        node.send([msg, null]);\n    }\n    else {\n        msg.retried = false;\n        node.send([null, msg]);\n        // use filename from flow\n    }\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1780,
        "wires": [
            [
                "32972334a68e7852"
            ],
            [
                "a976f52574ef2598"
            ]
        ]
    },
    {
        "id": "32224e154dd11042",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "a5e2795d2edc8cf5",
        "name": " Values",
        "rules": [
            {
                "t": "set",
                "p": "try_extract_backup",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 1780,
        "wires": [
            [
                "2baea6a75f67817d"
            ]
        ]
    },
    {
        "id": "32972334a68e7852",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "a5e2795d2edc8cf5",
        "name": "delay",
        "pauseType": "delay",
        "timeout": "8",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1170,
        "y": 1780,
        "wires": [
            [
                "538c82d0162f3d37"
            ]
        ]
    },
    {
        "id": "a976f52574ef2598",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "a5e2795d2edc8cf5",
        "name": "3MF Found?",
        "property": "filename",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 930,
        "y": 1840,
        "wires": [
            [
                "3dc0d9a315fb5a62"
            ],
            [
                "cbb6daf92dfb3396"
            ]
        ]
    },
    {
        "id": "6cb046069ee50afb",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "a5e2795d2edc8cf5",
        "name": "ftps-list-trigger-in",
        "links": [
            "817a6ad3d3665a9d",
            "f1eaddb698ae8e5c",
            "6af036f7cc9232aa"
        ],
        "x": 655,
        "y": 1780,
        "wires": [
            [
                "32224e154dd11042"
            ]
        ]
    },
    {
        "id": "626e8370574c265c",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "a5e2795d2edc8cf5",
        "name": "",
        "property": "filename",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "unavailable",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1450,
        "y": 1780,
        "wires": [
            [
                "32972334a68e7852"
            ],
            [
                "f21f80a62c5be33c"
            ]
        ]
    },
    {
        "id": "538c82d0162f3d37",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a5e2795d2edc8cf5",
        "name": "Current Task",
        "func": "let now = new Date();\nlet dt = now.toLocaleDateString(\"en-US\", {\"month\": \"short\", \"day\": \"numeric\", \"year\": \"numeric\", \"hour\": \"2-digit\", \"minute\": \"2-digit\"});\n\nmsg.filename = flow.get(\"RET_\"+\"subtask\");\n\nif (flow.get(\"ignored_printfiles\") != undefined && flow.get(\"ignored_printfiles\").includes(msg.filename)) {\n    \n    node.status({ fill: \"white\", shape: \"ring\", text: `ignored - ${msg.filename} - ${dt}` });\n    return;\n}\n\nnode.send(msg);\nnode.status({ fill: \"white\", shape: \"ring\", text: `${msg.filename} - ${dt}` });",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 1780,
        "wires": [
            [
                "626e8370574c265c"
            ]
        ]
    },
    {
        "id": "5cf8b602091be9bb",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a5e2795d2edc8cf5",
        "name": "Check Print File",
        "func": "if(msg.old_payload != undefined) {\n    msg.payload = msg.old_payload;\n}\nlet now = new Date();\nlet dt = now.toLocaleDateString(\"en-US\", { \"month\": \"short\", \"day\": \"numeric\", \"year\": \"numeric\", \"hour\": \"2-digit\", \"minute\": \"2-digit\" });\n\nvar found = false;\n/*if(msg.filename.includes(\"plate_\")) {\n    msg.filename = msg.filename.replace(/_plate_[0-9]/,\"\");\n}*/\nlet is_gcode = false\nmsg.filename = msg.filename.replace(\".gcode.3mf\", \"\");\nif(msg.filename.endsWith(\".gcode\")) {\n    msg.filename = msg.filename.replace(\".gcode\", \"\");\n    let f = msg.filename;\n    msg.filename = msg.filename.replace(/_plate_[1-9][0-9]?[0-9]?/, \"\");\n    is_gcode = true\n    if (f.includes(\"plate\")) {\n        let plate = f.match(/_?(plate_[1-9][0-9]?[0-9]?)/)[1];\n        flow.set(\"current_platename\", plate);\n    }\n}\n\nfunction searchFiles(file_list, filename_str) {\n    let found = false;\n    for (var obj of file_list) {\n        if (!obj.endsWith(\".3mf\")) {\n            continue;\n        }\n        if (filename_str == obj || filename_str + \".3mf\" == obj\n            || filename_str + \".gcode.3mf\" == obj ) {\n            filename_str = \"/\" + obj;\n            msg.payload = filename_str;\n            node.send(msg)\n            let msgText = \"Found - \" + msg.payload;\n            node.status({ fill: \"blue\", shape: \"ring\", text: msgText + ` - ${dt}` });\n            found = true;\n            break;\n        }\n        else if (\"/cache/\" + filename_str == obj || \"/cache/\" + filename_str + \".3mf\" == obj\n            || \"/cache/\" + filename_str + \".gcode.3mf\" == obj\n            || \"/cache\" + filename_str == obj || \"/cache\" + filename_str + \".3mf\" == obj\n            || \"/cache\" + filename_str + \".gcode.3mf\" == obj\n            || \"/\" + filename_str == obj || \"/\" + filename_str + \".3mf\" == obj\n            || \"/\" + filename_str + \".gcode.3mf\" == obj) {\n\n            filename_str = obj;\n            msg.payload = filename_str;\n            node.send(msg)\n            let msgText = \"Found - \" + msg.payload;\n            node.status({ fill: \"blue\", shape: \"ring\", text: msgText + ` - ${dt}` });\n            found = true;\n            break;\n        }\n        else if (\"/sdcard/\" + filename_str == obj || \"/sdcard/\" + filename_str + \".3mf\" == obj\n            || \"/sdcard/\" + filename_str + \".gcode.3mf\" == obj\n            || \"/sdcard\" + filename_str == obj || \"/sdcard\" + filename_str + \".3mf\" == obj\n            || \"/sdcard\" + filename_str + \".gcode.3mf\" == obj) {\n\n            filename_str = obj;\n            msg.payload = filename_str;\n            node.send(msg)\n            let msgText = \"Found - \" + msg.payload;\n            node.status({ fill: \"blue\", shape: \"ring\", text: msgText + ` - ${dt}` });\n            found = true;\n            break;\n        }\n        else if (\"/sdcard/cache/\" + filename_str == obj || \"/sdcard/cache/\" + filename_str + \".3mf\" == obj\n            || \"/sdcard/cache/\" + filename_str + \".gcode.3mf\" == obj\n            || \"/sdcard/cache\" + filename_str == obj || \"/sdcard/cache\" + filename_str + \".3mf\" == obj\n            || \"/sdcard/cache\" + filename_str + \".gcode.3mf\" == obj) {\n\n            filename_str = obj;\n            msg.payload = filename_str;\n            node.send(msg)\n            let msgText = \"Found - \" + msg.payload;\n            node.status({ fill: \"blue\", shape: \"ring\", text: msgText + ` - ${dt}` });\n            found = true;\n            break;\n        }\n    }\n    if (found) {\n        let filename_ = flow.get(\"RET_\" + \"subtask\");\n        if (filename_ != undefined) {\n            filename_ = filename_.replace(\".3mf\", \"\");\n        }\n        let mapping = flow.get(\"printjob_mapping\");\n        if (filename_ != undefined && mapping != undefined && mapping[filename_] != undefined) {\n            if (mapping[filename_]['url'] != undefined && mapping[filename_]['url'].startsWith(\"http\")) {\n                mapping[filename_]['url'] = msg.payload;\n                flow.set(\"printjob_mapping\", mapping);\n            }\n        }\n    }\n    return found;\n}\n\nfound = searchFiles(msg.files, msg.filename);\n// find a way to override a url in mapping if current url is http and local file found?\nif (!found) {\n    let mapping = flow.get(\"printjob_mapping\");\n    if (!msg.filename.endsWith(\".gcode\")) {\n        if (mapping != undefined && mapping[msg.filename.replace(\".3mf\", \"\")] != undefined) {\n            // User pressed \"print again\" and it was in a recent print that NodeRed remembers\n            if (mapping[msg.filename.replace(\".3mf\", \"\")]['subtask_name'] != undefined){\n                found = searchFiles(msg.files, mapping[msg.filename.replace(\".3mf\", \"\")]['subtask_name']);\n            }\n            if (!found && mapping[msg.filename.replace(\".3mf\", \"\")]['url'] != undefined ) {\n                let parsed_file = mapping[msg.filename.replace(\".3mf\", \"\")]['url'];\n                parsed_file = parsed_file.replace(\"ftp://\", \"\");\n                parsed_file = parsed_file.replace(\"http://\", \"\");\n                parsed_file = parsed_file.replace(\"https://\", \"\");\n                found = searchFiles(msg.files, parsed_file);\n            }\n        }\n    }\n\n    if (!found) {\n        let ignored = flow.get(\"ignored_printfiles\");\n        // msg.filename = \"/local_print.gcode.3mf\"\n        // msg.payload = msg.filename;\n        let msgText = \"Not Found - \" + msg.filename;\n        msg.filename = \"\";\n        msg.payload = msg.filename;\n        if(msg.retried != undefined && !msg.retried) {\n            msg.retried = true;\n        }\n        else {\n            msg.retried = false;\n        }\n        if (!ignored.includes(msg.filename) && !msg.filename.endsWith(\".gcode\")) {\n            node.send(msg);\n        }\n        else {\n            msgText = msgText.replace(\" Found\", \" Supported\");\n        }\n        node.status({ fill: \"red\", shape: \"ring\", text: msgText + ` - ${dt}`  });\n    }\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 1820,
        "wires": [
            [
                "a976f52574ef2598"
            ]
        ]
    },
    {
        "id": "3dc0d9a315fb5a62",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "a5e2795d2edc8cf5",
        "name": " Values",
        "rules": [
            {
                "t": "set",
                "p": "http_print_file_url",
                "pt": "flow",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1090,
        "y": 1840,
        "wires": [
            [
                "b6ff9234e9c4103a"
            ]
        ]
    },
    {
        "id": "cbb6daf92dfb3396",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "a5e2795d2edc8cf5",
        "name": "ftp default retry out",
        "mode": "link",
        "links": [
            "422a8525053c07c2"
        ],
        "x": 885,
        "y": 1880,
        "wires": []
    },
    {
        "id": "f21f80a62c5be33c",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "a5e2795d2edc8cf5",
        "name": "delay",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1590,
        "y": 1780,
        "wires": [
            [
                "5cf8b602091be9bb"
            ]
        ]
    },
    {
        "id": "b6ff9234e9c4103a",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "a5e2795d2edc8cf5",
        "name": "delay",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1090,
        "y": 1880,
        "wires": [
            [
                "0be1553629b451fb"
            ]
        ]
    },
    {
        "id": "0be1553629b451fb",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a5e2795d2edc8cf5",
        "name": "Get file",
        "func": "let ip = flow.get(\"printer_real_ip\");\nlet pw = flow.get(\"access_code\");\nlet path = flow.get(\"path_prefix\") + flow.get(\"printer_name\");\nlet output = path + \"/current_print.3mf\";\n\nlet file = msg.payload;\nif (!file.startsWith(\"/\")) {\n    file = \"/\"+file;\n}\nlet cmd = `mkdir -p ${path} && curl -k \"ftps://bblp:${pw}@${ip}:990${encodeURI(file)}\" -o \"${output}\"`;\nmsg.localFilename = output;\n\nmsg.payload = cmd;\nnode.send(msg);\n\nlet now = new Date();\nlet dt = now.toLocaleDateString(\"en-US\", { \"month\": \"short\", \"day\": \"numeric\", \"year\": \"numeric\", \"hour\": \"2-digit\", \"minute\": \"2-digit\" });\n\nnode.status({ fill: \"blue\", shape: \"ring\", text: `${file} - ${dt}` });",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 1840,
        "wires": [
            [
                "ef8c22a0abb68dee"
            ]
        ]
    },
    {
        "id": "ef8c22a0abb68dee",
        "type": "exec",
        "z": "fbda6ab16491b918",
        "g": "a5e2795d2edc8cf5",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "FTPS Fetch",
        "x": 1390,
        "y": 1840,
        "wires": [
            [
                "0e5da183f7404718"
            ],
            [],
            []
        ]
    },
    {
        "id": "0e5da183f7404718",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "a5e2795d2edc8cf5",
        "name": "",
        "property": "rc.code",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1370,
        "y": 1880,
        "wires": [
            [
                "a9aebbbfcb49d3f6"
            ]
        ]
    },
    {
        "id": "a9aebbbfcb49d3f6",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "a5e2795d2edc8cf5",
        "name": "ftp or http done out",
        "mode": "link",
        "links": [
            "49710497528a73bd"
        ],
        "x": 1455,
        "y": 1880,
        "wires": []
    },
    {
        "id": "10bacfd4fdd72e6f",
        "type": "group",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "ZIP Format and List",
        "style": {
            "label": true,
            "stroke": "#7fb7df"
        },
        "nodes": [
            "49710497528a73bd",
            "4bcb45ef62c19ded",
            "5a7c93bb3a3652f0",
            "d4b1704d39996fd6",
            "98651775002a0136",
            "6ac7fe27b0c38cdf",
            "546ac44138b327dc",
            "5355f563a36ad16c",
            "5473649d0d4b8226",
            "6ab24dd036f012f3",
            "31fe7e40ca1fe0d2",
            "570cb26fb2fc76b1",
            "d0c8110b3e5249f4",
            "242f2bec903609c2"
        ],
        "x": 1174,
        "y": 1959,
        "w": 732,
        "h": 189.5
    },
    {
        "id": "49710497528a73bd",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "10bacfd4fdd72e6f",
        "name": "ftp or http done in",
        "links": [
            "a9aebbbfcb49d3f6",
            "d1370446daf10571",
            "6a711d90e2866589"
        ],
        "x": 1215,
        "y": 2000,
        "wires": [
            [
                "4bcb45ef62c19ded"
            ]
        ]
    },
    {
        "id": "4bcb45ef62c19ded",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "10bacfd4fdd72e6f",
        "name": "delay",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1290,
        "y": 2000,
        "wires": [
            [
                "5a7c93bb3a3652f0"
            ]
        ]
    },
    {
        "id": "5a7c93bb3a3652f0",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "10bacfd4fdd72e6f",
        "name": "FTP Done",
        "rules": [
            {
                "t": "set",
                "p": "has_ftp_complete",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1570,
        "y": 2000,
        "wires": [
            [
                "d4b1704d39996fd6"
            ]
        ]
    },
    {
        "id": "d4b1704d39996fd6",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "10bacfd4fdd72e6f",
        "name": "Zip List",
        "func": "\nlet now = new Date();\nlet dt = now.toLocaleDateString(\"en-US\", { \"month\": \"short\", \"day\": \"numeric\", \"year\": \"numeric\", \"hour\": \"2-digit\", \"minute\": \"2-digit\" });\n\n\nlet path = flow.get(\"path_prefix\") + flow.get(\"printer_name\");\n\nlet filename = path + \"/current_print.3mf\";\nlet filename2 = path + \"/current_print.zip\";\n\nlet cmd = `mkdir -p ${path} && cp ${filename} ${filename2} && unzip -l ${filename2}`;\nmsg.command = cmd;\nmsg.reason = \"list\";\nnode.send(msg);\nnode.status({ fill: \"white\", shape: \"ring\", text: `Archive for ${flow.get(\"RET_\"+\"subtask\")} - ${dt}` });",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 2000,
        "wires": [
            [
                "98651775002a0136"
            ]
        ]
    },
    {
        "id": "98651775002a0136",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "10bacfd4fdd72e6f",
        "name": "",
        "property": "command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1270,
        "y": 2040,
        "wires": [
            [
                "6ac7fe27b0c38cdf"
            ]
        ]
    },
    {
        "id": "6ac7fe27b0c38cdf",
        "type": "exec",
        "z": "fbda6ab16491b918",
        "g": "10bacfd4fdd72e6f",
        "command": "",
        "addpay": "command",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "ZIP List",
        "x": 1280,
        "y": 2100,
        "wires": [
            [
                "546ac44138b327dc"
            ],
            [],
            []
        ]
    },
    {
        "id": "546ac44138b327dc",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "10bacfd4fdd72e6f",
        "name": "Files?",
        "func": "\nlet now = new Date();\nlet dt = now.toLocaleDateString(\"en-US\", { \"month\": \"short\", \"day\": \"numeric\", \"year\": \"numeric\", \"hour\": \"2-digit\", \"minute\": \"2-digit\" });\n\nif (msg.payload != undefined && msg.payload != \"\"){\n    let lines = msg.payload.split(\"\\n\");\n    let files = [];\n    for (var line of lines) {\n        if (line.includes(\"Metadata\") && (line.endsWith(\"gcode\") || line.endsWith(\"png\") || line.endsWith(\"config\") || line.endsWith(\"json\"))\n            && !line.includes(\"_small.png\") && !line.includes(\"Metadata/top_\") && !line.includes(\"Metadata/pick_\")) {\n            let x = line.split(\"Metadata/\");\n            let y = \"Metadata/\" + x[x.length -1];\n            files.push(y);\n        }\n    }\n    if (files.length > 0) {\n        msg.zip_filenames = files;\n        node.send(msg);\n        node.status({ fill: \"blue\", shape: \"ring\", text: \"Archive Found\" + ` - ${dt}` });\n        return\n    }\n}\n\nnode.status({ fill: \"red\", shape: \"ring\", text: \"Archive Error \" + ` - ${dt}` });",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 2100,
        "wires": [
            [
                "5355f563a36ad16c"
            ]
        ]
    },
    {
        "id": "5355f563a36ad16c",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "10bacfd4fdd72e6f",
        "name": "delay",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1410,
        "y": 2060,
        "wires": [
            [
                "5473649d0d4b8226"
            ]
        ]
    },
    {
        "id": "5473649d0d4b8226",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "10bacfd4fdd72e6f",
        "name": "Plate name?",
        "func": "if(msg.access_code != undefined) {\n    delete msg.access_code;\n}\nif (msg.printer_ip != undefined) {\n    delete msg.printer_ip;\n}\n\nlet current_platename = flow.get(\"current_platename\");\nif (msg.single_plate_name != undefined) {\n    current_platename = msg.single_plate_name;\n    flow.set(\"current_platename\", msg.single_plate_name);\n}\nif(current_platename == undefined || current_platename == null || current_platename == \"\" || !current_platename.includes(\"plate_\")) {\n    node.send([msg, null]);\n}\nelse {\n    msg.gcode_file = \"/data/Metadata/\"+current_platename;\n    node.send([null, msg]);\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 2060,
        "wires": [
            [
                "6ab24dd036f012f3"
            ],
            [
                "31fe7e40ca1fe0d2"
            ]
        ]
    },
    {
        "id": "6ab24dd036f012f3",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "10bacfd4fdd72e6f",
        "name": "delay",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1730,
        "y": 2000,
        "wires": [
            [
                "570cb26fb2fc76b1"
            ]
        ]
    },
    {
        "id": "31fe7e40ca1fe0d2",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "10bacfd4fdd72e6f",
        "name": "Get Plate",
        "func": "let plate_name = msg.gcode_file;\nplate_name = plate_name.replace(\"/data/Metadata/\",\"\")\nplate_name = plate_name.replace(\"Metadata/\", \"\")\nplate_name = plate_name.replace(\".gcode\", \"\")\nplate_name = plate_name.replace(\".3mf\", \"\");\nplate_name = plate_name.replace(\"Plate \", \"plate_\");\n\nlet match = plate_name.match(/_?(plate_[1-9][0-9]?[0-9]?)/);\n\nif(match != undefined && match.length > 1) {\n    plate_name = match[1];\n    if (plate_name.includes(\"plate_\")) {\n        node.send([null, {\"payload\":plate_name, \"topic\": \"plate_name\", \"sensor_type\": \"sensor\"}, null]);\n    }\n}\nelse if(!plate_name.includes(\"plate_\") ){//msg.from_ha != undefined && msg.from_ha) {\n    // invalid name from HA\n    // attempt extract print xml file and hope it has only one plate\n    //delete msg.from_ha;\n    //node.warn(\"Could not get plate information from HA. Attempting to parse from XML file\")\n    node.status({ fill: \"red\", shape: \"ring\", text: \"Invalid - \"+ plate_name + \". Trying backup...\" });\n    \n    flow.set(\"current_platename\", \"\");\n    msg.data_for = \"print\";\n    node.send([null, null, msg]);\n    return;////////////////////////////////////////////////??\n}\n\nlet plate_id = parseInt(plate_name.replace(\"plate_\", \"\"));\n\nmsg.plate_name = plate_name;\nmsg.plate_id = plate_id;\nflow.set(\"plate_id\", plate_id);\nif (plate_name.includes(\"plate_\")) {\n    flow.set(\"current_platename\", plate_name);\n}\nelse {\n    flow.set(\"current_platename\", \"\");\n}\n\n\nmsg.data_for = \"any\";\nnode.send([msg, null, null]) \nnode.status({ fill: \"blue\", shape: \"ring\", text: plate_name });\n\nif (!plate_name.includes(\"plate_\")) {\n    node.status({ fill: \"red\", shape: \"ring\", text: \"Invalid - \"+ plate_name });\n}",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 2100,
        "wires": [
            [
                "242f2bec903609c2"
            ],
            [
                "d0c8110b3e5249f4"
            ],
            [
                "242f2bec903609c2"
            ]
        ]
    },
    {
        "id": "570cb26fb2fc76b1",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "10bacfd4fdd72e6f",
        "name": "Plate Name",
        "func": "let now = new Date();\nlet dt = now.toLocaleDateString(\"en-US\", {\"month\": \"short\", \"day\": \"numeric\", \"year\": \"numeric\", \"hour\": \"2-digit\", \"minute\": \"2-digit\"});\n\nmsg.gcode_file = flow.get(\"RET_\"+\"plate_name\");\nnode.send(msg);\nnode.status({ fill: \"white\", shape: \"ring\", text: `${msg.gcode_file} - ${dt}` });",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 2040,
        "wires": [
            [
                "31fe7e40ca1fe0d2"
            ]
        ]
    },
    {
        "id": "d0c8110b3e5249f4",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "10bacfd4fdd72e6f",
        "name": "adv_mqtt-in",
        "mode": "link",
        "links": [
            "d64e04129b153b23"
        ],
        "x": 1865,
        "y": 2100,
        "wires": []
    },
    {
        "id": "242f2bec903609c2",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "10bacfd4fdd72e6f",
        "name": "zip extract files out",
        "mode": "link",
        "links": [],
        "x": 1835,
        "y": 2100,
        "wires": []
    },
    {
        "id": "cd21fb00d1a69ef7",
        "type": "group",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "name": "ZIP Extract and Parse",
        "style": {
            "label": true,
            "stroke": "#7fb7df"
        },
        "nodes": [
            "93d2a7632b0f6d50",
            "7763767593c91b02",
            "9bad8e057ee821f8",
            "5309948f7257a603",
            "cb0be7b293557c45",
            "14bf16d39c0cc296",
            "f8479c53a54a30e6",
            "114bd45d2f6a3eae",
            "3d06568f60ee15de",
            "47f2f3e7a840b868",
            "ab9d3fbde618bd0f",
            "1c9708508fb4061b",
            "a2efbc015a951f08",
            "8af8587f887b4c53",
            "b4dccf6d01ed92c4",
            "99abcec52237d2d2",
            "1b3a93f1f0dd0a50",
            "68843c7f7a8b38ea",
            "d0de2bfdbe4c20b5",
            "4ccfb3dfd3993e15",
            "ce55f73a8f638a6d",
            "603bbc81cb4c9ce3",
            "4cf88c06f97c30db",
            "3b59acc082a9bc99",
            "15e3ceb662c8eb6a",
            "f3b1eca3de35dadb",
            "5550a0cc1cb9c55c",
            "e5bde629696c68c3",
            "8493e41b640e5808",
            "369ed409e2bf2fa9",
            "5da9fdedef69e5b1",
            "f1eaddb698ae8e5c",
            "26dcf9ab879bc8c4",
            "bd42fe6c1ee04c6b",
            "6a711d90e2866589",
            "da318563af366402",
            "422a8525053c07c2",
            "882cd28a46933aba"
        ],
        "x": 614,
        "y": 2171.5,
        "w": 1292,
        "h": 309.5
    },
    {
        "id": "93d2a7632b0f6d50",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "Extract Preview Image",
        "func": "var f = null;\nif (msg.zip_filenames !== undefined && msg.zip_filenames.length > 0) {\n    for (var file of msg.zip_filenames) {\n        if (file == \"Metadata/plate_\"+msg.plate_id+\".png\") {\n            f = file;\n            break;\n        }\n    }\n}\n\nif (f !== null) {\n    let zipfile = flow.get(\"path_prefix\") + flow.get(\"printer_name\") + \"/current_print.zip\"; \n    msg.filename = flow.get(\"path_prefix\") + flow.get(\"printer_name\") + \"/preview.png\";\n    let cmd = `unzip -p \"${zipfile}\" \"${f}\" > \"${msg.filename}\"`\n    msg.command = cmd;\n    if(msg.req !== undefined) {\n        msg.statusCode = 200;\n    }\n    msg.extract_type = \"image\";\n    node.send(msg);\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 2260,
        "wires": [
            [
                "5da9fdedef69e5b1"
            ]
        ]
    },
    {
        "id": "7763767593c91b02",
        "type": "file",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "Write Image",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "base64",
        "x": 1130,
        "y": 2440,
        "wires": [
            [
                "3d06568f60ee15de"
            ]
        ],
        "info": "This is a backup approach which writes \r\nthe file locally into the NR instance.\r\n\r\n"
    },
    {
        "id": "9bad8e057ee821f8",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "Extract Print Data XML",
        "func": "var f = null;\nif (msg.zip_filenames !== undefined && msg.zip_filenames.length > 0) {\n    for (var file of msg.zip_filenames) {\n        if (file == \"Metadata/slice_info.config\") {\n            f = file;\n            break;\n        }\n    }\n}\n\nif (f !== null) {\n    let zipfile = flow.get(\"path_prefix\") + flow.get(\"printer_name\") + \"/current_print.zip\"; \n    msg.filename = flow.get(\"path_prefix\") + flow.get(\"printer_name\") + \"/slicer_info.xml\";\n    let cmd = `unzip -p \"${zipfile}\" \"${f}\" > \"${msg.filename}\"`\n    msg.command = cmd;\n    if(msg.req !== undefined) {\n        msg.statusCode = 200;\n    }\n    msg.extract_type = \"print\";\n    msg.plate_name_override = flow.get(\"current_platename\");\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 2300,
        "wires": [
            [
                "5da9fdedef69e5b1"
            ]
        ]
    },
    {
        "id": "5309948f7257a603",
        "type": "file in",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1400,
        "y": 2220,
        "wires": [
            [
                "cb0be7b293557c45"
            ]
        ]
    },
    {
        "id": "cb0be7b293557c45",
        "type": "xml",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "",
        "property": "payload",
        "attr": "property",
        "chr": "",
        "x": 1410,
        "y": 2260,
        "wires": [
            [
                "14bf16d39c0cc296"
            ]
        ]
    },
    {
        "id": "14bf16d39c0cc296",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "Extract Type And Sum Weights",
        "func": "var filaments = {};\nlet now = new Date();\nlet dt = now.toLocaleDateString(\"en-US\", { \"month\": \"short\", \"day\": \"numeric\", \"year\": \"numeric\", \"hour\": \"2-digit\", \"minute\": \"2-digit\" });\n\n\nif (msg.plate_name_override != undefined && msg.plate_name_override != \"\" && (flow.get(\"current_platename\") == undefined || !flow.get(\"current_platename\").includes(\"plate_\"))) {\n    flow.set(\"current_platename\", msg.plate_name_override);\n    delete msg.plate_name_override;\n}\n\nvar weight = 0.0;\nvar has_only_one_plate = false;\nvar current_plate_meta = undefined;\nif (msg.payload !== undefined && msg.payload.config != undefined\n    && msg.payload.config.plate != undefined) {\n    let plates = msg.payload.config.plate;\n    if(plates.length == 1) {\n        has_only_one_plate = true;\n    }\n    for (var plate of plates) {\n        for (var p of plate.metadata) {\n            if(p.property.key == \"index\" && \n                (parseInt(p.property.value) == msg.plate_id \n                || has_only_one_plate)) {\n                    current_plate_meta = plate.metadata;\n                    msg.plate_id = parseInt(p.property.value);\n                    if(has_only_one_plate && (flow.get(\"current_platename\") == undefined || flow.get(\"current_platename\") == \"\" || !flow.get(\"current_platename\").includes(\"plate_\"))) {\n                        flow.set(\"current_platename\", \"plate_\"+msg.plate_id + \".gcode\");\n                        msg.single_plate_name = \"plate_\" + msg.plate_id + \".gcode\";\n                        let path = flow.get(\"path_prefix\") + flow.get(\"printer_name\");\n                        \n                        msg.localFilename = path + \"/current_print.3mf\"\n                        node.send([msg, null]);\n                    }\n                    break;\n                }\n            //if (p.property.key == \"weight\") {\n            //    weight += parseFloat(p.property.value);\n            //}\n        }\n        for (var f of plate.filament) {\n            if(f.property.type != undefined && \n            !f.property.type.includes(\"Support\")\n                && f.property.type != \"PLA-S\"\n                && f.property.type != \"PA-S\"\n                ) {\n                if (filaments[f.property.type] == undefined) {\n                    filaments[f.property.type] = parseFloat(f.property.used_g);\n                }\n                else {\n                    filaments[f.property.type] = filaments[f.property.type] + parseFloat(f.property.used_g);\n                }\n            }\n        }\n    }\n}\n\nif(current_plate_meta != undefined) {\n    for (var p of current_plate_meta) {\n        if (p.property.key == \"weight\") {\n            weight += parseFloat(p.property.value);\n        }\n    }\n}\n\nmsg.payload = {};\nmsg.payload.weight = weight;\nmsg.payload.material = \"\";\nvar fil = Object.keys(filaments);\nvar max = 0;\nfor (var ff of fil) {\n    if (filaments[ff] >= max) {\n        max = filaments[ff];\n        msg.payload.material = ff;\n    }\n}\nif (max == 0) {\n    msg.payload.material = \"\";\n}\nnode.status({ fill: \"blue\", shape: \"ring\", text: msg.payload.weight + \"g of material, mostly or all \" + msg.payload.material + ` - ${dt}` });\nmsg.update_for = \"weights\";\nnode.send([null, msg]);",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 2260,
        "wires": [
            [
                "4cf88c06f97c30db"
            ],
            [
                "e5bde629696c68c3",
                "d0de2bfdbe4c20b5"
            ]
        ]
    },
    {
        "id": "f8479c53a54a30e6",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "Default Img Base64",
        "func": "var default_image = \"\";\n\nmsg.filename = flow.get(\"path_prefix\")+flow.get(\"printer_name\")+\"/preview.png\";\nmsg.payload = default_image;\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 2400,
        "wires": [
            [
                "7763767593c91b02"
            ]
        ]
    },
    {
        "id": "114bd45d2f6a3eae",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "Format Msg",
        "func": "msg.payload = msg.payload.toString(\"base64\");\nmsg.topic = \"print_preview\";\nmsg.machine_name = flow.get(\"printer_name\");\nmsg.model = flow.get(\"model\");\nmsg.machine_name = flow.get(\"model\") + \"_\" + flow.get(\"printer_name\");\nmsg.sensor_type = \"image\";\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 2440,
        "wires": [
            [
                "da318563af366402"
            ]
        ]
    },
    {
        "id": "3d06568f60ee15de",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "delay",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1290,
        "y": 2440,
        "wires": [
            [
                "47f2f3e7a840b868"
            ]
        ]
    },
    {
        "id": "47f2f3e7a840b868",
        "type": "file in",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "Get image",
        "filename": "filename",
        "filenameType": "msg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1430,
        "y": 2440,
        "wires": [
            [
                "114bd45d2f6a3eae"
            ]
        ]
    },
    {
        "id": "ab9d3fbde618bd0f",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "Extract Plate Json",
        "func": "var f = null;\nif (msg.zip_filenames !== undefined && msg.zip_filenames.length > 0) {\n    for (var file of msg.zip_filenames) {\n        if (file == \"Metadata/plate_\"+msg.plate_id+\".json\") {\n            f = file;\n            break;\n        }\n    }\n}\n\nif (f !== null) {\n    let zipfile = flow.get(\"path_prefix\") + flow.get(\"printer_name\") + \"/current_print.zip\"; \n    msg.filename = flow.get(\"path_prefix\") + flow.get(\"printer_name\") + \"/plate.json\";\n    let cmd = `unzip -p \"${zipfile}\" \"${f}\" > \"${msg.filename}\"`\n    msg.command = cmd;\n    if(msg.req !== undefined) {\n        msg.statusCode = 200;\n    }\n    msg.extract_type = \"plate\";\n    node.send(msg);\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 2380,
        "wires": [
            [
                "5da9fdedef69e5b1"
            ]
        ]
    },
    {
        "id": "1c9708508fb4061b",
        "type": "file in",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1400,
        "y": 2340,
        "wires": [
            [
                "a2efbc015a951f08"
            ]
        ]
    },
    {
        "id": "a2efbc015a951f08",
        "type": "json",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1270,
        "y": 2380,
        "wires": [
            [
                "8af8587f887b4c53"
            ]
        ]
    },
    {
        "id": "8af8587f887b4c53",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "Extract Plate Type",
        "func": "let now = new Date();\nlet dt = now.toLocaleDateString(\"en-US\", { \"month\": \"short\", \"day\": \"numeric\", \"year\": \"numeric\", \"hour\": \"2-digit\", \"minute\": \"2-digit\" });\n\nif (msg.payload != undefined && msg.payload.bed_type != undefined) {\n    msg.payload = msg.payload.bed_type;\n    msg.update_for = \"plate_type\";\n    node.send(msg);\n    node.status({ fill: \"blue\", shape: \"ring\", text: msg.payload + \", \"+msg.plate_name + ` - ${dt}` });\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 2380,
        "wires": [
            [
                "4ccfb3dfd3993e15",
                "e5bde629696c68c3"
            ]
        ]
    },
    {
        "id": "b4dccf6d01ed92c4",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "Set",
        "rules": [
            {
                "t": "set",
                "p": "xml_file",
                "pt": "flow",
                "to": "filename",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1270,
        "y": 2260,
        "wires": [
            [
                "5309948f7257a603"
            ]
        ]
    },
    {
        "id": "99abcec52237d2d2",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "Set",
        "rules": [
            {
                "t": "set",
                "p": "plate_file",
                "pt": "flow",
                "to": "filename",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1270,
        "y": 2340,
        "wires": [
            [
                "1c9708508fb4061b"
            ]
        ]
    },
    {
        "id": "1b3a93f1f0dd0a50",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "Extract Project Data",
        "func": "var f = null;\nif (msg.zip_filenames !== undefined && msg.zip_filenames.length > 0) {\n    for (var file of msg.zip_filenames) {\n        if (file == \"Metadata/project_settings.config\") {\n            f = file;\n            break;\n        }\n    }\n}\n\nif (f !== null) {\n    let zipfile = flow.get(\"path_prefix\") + flow.get(\"printer_name\") + \"/current_print.zip\"; \n    msg.filename = flow.get(\"path_prefix\") + flow.get(\"printer_name\") + \"/project_info.json\";\n    let cmd = `unzip -p \"${zipfile}\" \"${f}\" > \"${msg.filename}\"`\n    msg.command = cmd;\n    if(msg.req !== undefined) {\n        msg.statusCode = 200;\n    }\n    msg.extract_type = \"project\";\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 2220,
        "wires": [
            [
                "5da9fdedef69e5b1"
            ]
        ]
    },
    {
        "id": "68843c7f7a8b38ea",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "Set",
        "rules": [
            {
                "t": "set",
                "p": "project_file",
                "pt": "flow",
                "to": "filename",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1270,
        "y": 2220,
        "wires": [
            []
        ]
    },
    {
        "id": "d0de2bfdbe4c20b5",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "Type + Sum Weights Out",
        "mode": "link",
        "links": [
            "e81aee378a4539c5",
            "0f0b9aa41491e74a"
        ],
        "x": 1865,
        "y": 2300,
        "wires": []
    },
    {
        "id": "4ccfb3dfd3993e15",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "Plate Type Out",
        "mode": "link",
        "links": [
            "9a89138f9553f880",
            "2b5fbcfc32a16fa5"
        ],
        "x": 1865,
        "y": 2380,
        "wires": []
    },
    {
        "id": "ce55f73a8f638a6d",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "No FTP",
        "rules": [
            {
                "t": "set",
                "p": "has_ftp_complete",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 2440,
        "wires": [
            [
                "f8479c53a54a30e6"
            ]
        ]
    },
    {
        "id": "603bbc81cb4c9ce3",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "Has Not Retried",
        "property": "retried",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 740,
        "y": 2420,
        "wires": [
            [
                "f1eaddb698ae8e5c"
            ],
            [
                "ce55f73a8f638a6d"
            ]
        ]
    },
    {
        "id": "4cf88c06f97c30db",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "",
        "property": "try_extract_backup",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1570,
        "y": 2220,
        "wires": [
            [
                "3b59acc082a9bc99"
            ]
        ]
    },
    {
        "id": "3b59acc082a9bc99",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "Try Backup Once",
        "rules": [
            {
                "t": "set",
                "p": "try_extract_backup",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1730,
        "y": 2220,
        "wires": [
            [
                "6a711d90e2866589"
            ]
        ]
    },
    {
        "id": "15e3ceb662c8eb6a",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "Extract Gcode",
        "func": "var f = null;\nif (msg.zip_filenames !== undefined && msg.zip_filenames.length > 0) {\n    for (var file of msg.zip_filenames) {\n        if (file == \"Metadata/plate_\"+msg.plate_id+\".gcode\") {\n            f = file;\n            break;\n        }\n    }\n}\n\nif (f !== null) {\n    let zipfile = flow.get(\"path_prefix\") + flow.get(\"printer_name\") + \"/current_print.zip\"; \n    msg.filename = flow.get(\"path_prefix\") + flow.get(\"printer_name\") + \"/print.gcode\";\n    let cmd = `unzip -p \"${zipfile}\" \"${f}\" > \"${msg.filename}\"`\n    msg.command = cmd;\n    if(msg.req !== undefined) {\n        msg.statusCode = 200;\n    }\n    msg.extract_type = \"gcode\";\n    node.send(msg);\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 2340,
        "wires": [
            [
                "5da9fdedef69e5b1"
            ]
        ]
    },
    {
        "id": "f3b1eca3de35dadb",
        "type": "file in",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1280,
        "y": 2300,
        "wires": [
            [
                "5550a0cc1cb9c55c"
            ]
        ]
    },
    {
        "id": "5550a0cc1cb9c55c",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "Parse GCode",
        "func": "let setup_lines = msg.payload.split(\"\\n\").slice(50, 140);\nlet fila_order_line = \"\";\nlet fila_colour_line = \"\";\nlet fila_used_line = \"\";\nlet fila_cost_line = \"\";\nlet fila_profiles_line = \"\";\nlet fila_vendor_line = \"\";\nlet fila_costkg_line = \"\";\n\nlet now = new Date();\nlet dt = now.toLocaleDateString(\"en-US\", {\"month\": \"short\", \"day\": \"numeric\", \"year\": \"numeric\", \"hour\": \"2-digit\", \"minute\": \"2-digit\"});\n\nfor (var n of setup_lines) {\n    if (n.startsWith(\"; filament_type =\")) {\n        fila_order_line = n.replace(\"; filament_type =\", \"\");\n    }\n    else if (n.startsWith(\"; filament_colour =\")) {\n        fila_colour_line = n.replace(\"; filament_colour =\", \"\");\n    }\n    else if (n.startsWith(\"; filament_settings_id =\")) {\n        fila_profiles_line = n.replace(\"; filament_settings_id =\", \"\");\n    } \n    else if (n.startsWith(\"; filament_vendor =\")) {\n        fila_vendor_line = n.replace(\"; filament_vendor =\", \"\");\n    }\n    else if (n.startsWith(\"; filament_cost =\")) {\n        fila_costkg_line = n.replace(\"; filament_cost =\",\"\");\n    }\n    if (fila_order_line != \"\" && fila_colour_line != \"\" && fila_profiles_line != \"\" && fila_vendor_line != \"\"\n        && fila_costkg_line != \"\") {\n        break;\n    }\n}\n\n\nlet lines = msg.payload.split(\"\\n\").slice(-7);\nlet line = \"\";\nfor (var l of lines) {\n    if (l == \"\") {\n        continue;\n    }\n    if (l.startsWith(\"; filament cost =\")) {\n        line = l;\n        fila_cost_line = l.replace(\"; filament cost =\", \"\");\n    }\n    else if (l.startsWith(\"; filament used [g] =\")) {\n        fila_used_line = l.replace(\"; filament used [g] =\", \"\");\n    }\n    if (fila_cost_line != \"\" && fila_used_line != \"\") {\n        break;\n    }\n}\n\nlet data = []\n\nlet types = fila_order_line.split(\";\");\nlet col = fila_colour_line.split(\";\");\nlet used = fila_used_line.split(\",\");\nlet costs = fila_cost_line.split(\",\");\nlet profs = fila_profiles_line.split(\";\");\nlet ven = fila_vendor_line.split(\";\");\nlet costkg = fila_costkg_line.split(\",\");\n\nlet missingLines = false;\nif(fila_used_line == \"\" || fila_cost_line == \"\")  {\n    // did not find in gcode file, use fake numbers\n    used = [\"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\",\"0\",\"0\",\"0\",\"0\",\"0\", \"0\"];\n    costs = used;\n    missingLines = true; // we dont know if it's actually used in a print\n    // also for some reason, it may have arbitarily more filaments\n    // --- makerworld slicing is dumb\n}\n\nif(fila_order_line != \"\") {\n    for (let i = 0; i < types.length; i++) {\n        let u = \" 0 \";\n        if (used[i] != undefined) {\n            u = used[i];\n        } \n        let c = \" 0 \";\n        if (costs[i] != undefined) {\n            c = costs[i];\n        }\n        \n        let d = {\n            \"index\": i,\n            \"type\": types[i].trim(),\n            \"colour\": col[i].trim(),\n            \"used_g\": parseFloat(u.trim()),\n            \"used_cost\": parseFloat(c.trim()),\n            \"profile\": profs[i].replaceAll(\"\\\"\", \"\").replaceAll(\"'\", \"\").trim(),\n            \"vendor\": ven[i].replaceAll(\"'\", \"\").replaceAll('\"', \"\").trim(),\n            \"kg_cost\": parseFloat(costkg[i].trim())\n        }\n        d[\"used_in_print\"] = (d[\"used_g\"] > 0.00 && d[\"used_cost\"] > 0.00) || missingLines;\n        data.push(d);\n    }\n}\n\nlet match = [...line.matchAll(/([0-9]+.[0-9]+)/g)]\n\nif (match != undefined && match.length >= 1 && match[0].length > 0 && parseFloat(match[0][1]) != undefined) {\n    let x = 0;\n    for (var i = 0; i < match.length; i++) {\n\n        if (match[i].length > 0) {\n            x += parseFloat(match[i][1])\n        }\n    }\n    msg.cost = parseFloat(x);\n    msg.payoad = {};\n    msg.topic = \"material_used_cost\"\n    msg.update_for = \"mat_cost\";\n    node.send([msg, null]);\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"$\" + msg.cost + ` - ${dt}` });\n}\nelse {\n    node.status({ fill: \"blue\", shape: \"ring\", text: \"No cost found in gcode file\" + ` - ${dt}` });\n}\n\nif (flow.get(\"remove_unused_filaments\")) {\n    data = data.filter(val => val[\"used_in_print\"] != undefined && val[\"used_in_print\"]);\n}\n\nif(data != undefined && data.length != 0) {\n    node.send([null, {\"update_for\": \"gcode_data\", \"payload\": data}]);\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 2320,
        "wires": [
            [
                "e5bde629696c68c3",
                "d0de2bfdbe4c20b5"
            ],
            [
                "e5bde629696c68c3"
            ]
        ]
    },
    {
        "id": "e5bde629696c68c3",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "Update_For_Out",
        "mode": "link",
        "links": [
            "426f511209068038"
        ],
        "x": 1865,
        "y": 2340,
        "wires": []
    },
    {
        "id": "8493e41b640e5808",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "",
        "property": "extract_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "project",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "print",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "gcode",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "plate",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "image",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 1110,
        "y": 2320,
        "wires": [
            [
                "68843c7f7a8b38ea"
            ],
            [
                "b4dccf6d01ed92c4"
            ],
            [
                "f3b1eca3de35dadb"
            ],
            [
                "99abcec52237d2d2"
            ],
            [
                "3d06568f60ee15de"
            ]
        ]
    },
    {
        "id": "369ed409e2bf2fa9",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "delay",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1110,
        "y": 2260,
        "wires": [
            [
                "8493e41b640e5808"
            ]
        ]
    },
    {
        "id": "5da9fdedef69e5b1",
        "type": "exec",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "command": "",
        "addpay": "command",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "ZIP Extract",
        "x": 1090,
        "y": 2220,
        "wires": [
            [
                "369ed409e2bf2fa9"
            ],
            [],
            []
        ]
    },
    {
        "id": "f1eaddb698ae8e5c",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "ftps-list-trigger-in-out",
        "mode": "link",
        "links": [
            "6cb046069ee50afb"
        ],
        "x": 865,
        "y": 2420,
        "wires": []
    },
    {
        "id": "26dcf9ab879bc8c4",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "for?",
        "property": "data_for",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "any",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "print",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 2280,
        "wires": [
            [
                "882cd28a46933aba"
            ],
            [
                "9bad8e057ee821f8"
            ]
        ]
    },
    {
        "id": "bd42fe6c1ee04c6b",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "zip extract files in",
        "links": [],
        "x": 655,
        "y": 2240,
        "wires": [
            [
                "26dcf9ab879bc8c4"
            ]
        ]
    },
    {
        "id": "6a711d90e2866589",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "ftp or http done out",
        "mode": "link",
        "links": [
            "49710497528a73bd"
        ],
        "x": 1865,
        "y": 2260,
        "wires": []
    },
    {
        "id": "da318563af366402",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "adv_mqtt-in",
        "mode": "link",
        "links": [
            "d64e04129b153b23"
        ],
        "x": 1865,
        "y": 2440,
        "wires": []
    },
    {
        "id": "422a8525053c07c2",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "name": "ftp default retry in",
        "links": [
            "cbb6daf92dfb3396"
        ],
        "x": 655,
        "y": 2340,
        "wires": [
            [
                "603bbc81cb4c9ce3"
            ]
        ]
    },
    {
        "id": "882cd28a46933aba",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "cd21fb00d1a69ef7",
        "x": 720,
        "y": 2220,
        "wires": [
            [
                "93d2a7632b0f6d50",
                "9bad8e057ee821f8",
                "ab9d3fbde618bd0f",
                "1b3a93f1f0dd0a50",
                "15e3ceb662c8eb6a"
            ]
        ]
    },
    {
        "id": "bb8a1edfc2371d2d",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "615e0a4a63e8487d",
        "x": 1880,
        "y": 1840,
        "wires": [
            [
                "7ba43cad29afac9c"
            ]
        ]
    },
    {
        "id": "f8f24fbbe7cdd785",
        "type": "group",
        "z": "fbda6ab16491b918",
        "g": "20b7b2baaa0fdddd",
        "name": "Advanced Flow Settings",
        "style": {
            "label": true
        },
        "nodes": [
            "03910fde1164bdc3",
            "7f8794fea9a6cecb",
            "7e397b8a77767024",
            "e006c3ea171dd5fc",
            "b38456f4aaccb5b7"
        ],
        "x": 1954,
        "y": 1719,
        "w": 472,
        "h": 162
    },
    {
        "id": "03910fde1164bdc3",
        "type": "inject",
        "z": "fbda6ab16491b918",
        "g": "f8f24fbbe7cdd785",
        "name": "StartupSet",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.01",
        "topic": "",
        "x": 2070,
        "y": 1760,
        "wires": [
            [
                "7f8794fea9a6cecb",
                "7e397b8a77767024"
            ]
        ]
    },
    {
        "id": "7f8794fea9a6cecb",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "f8f24fbbe7cdd785",
        "name": "Set Flow Properties",
        "rules": [
            {
                "t": "set",
                "p": "has_adv_flow",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "energy_rate_sensor",
                "pt": "flow",
                "to": "sensor.{HA_ELECTRIC_RATE_COST}",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "power_plug_meter_sensor",
                "pt": "flow",
                "to": "sensor.{HA_PRINTER_METER_PLUG_TOTAL_KWH}",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "path_prefix",
                "pt": "flow",
                "to": "/data/fetched/",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "remove_unused_filaments",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "printer_ha_device_name",
                "pt": "flow",
                "to": "{HA_PRINTER_ENTITY_NAME}",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2090,
        "y": 1800,
        "wires": [
            [
                "b38456f4aaccb5b7"
            ]
        ]
    },
    {
        "id": "7e397b8a77767024",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "f8f24fbbe7cdd785",
        "name": "delay",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2230,
        "y": 1760,
        "wires": [
            [
                "e006c3ea171dd5fc"
            ]
        ]
    },
    {
        "id": "e006c3ea171dd5fc",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "f8f24fbbe7cdd785",
        "name": "Check Values Error",
        "func": "function testValue(val) {\n    return (val == undefined || val == \"\" || val.startsWith(\"{\"));\n}\n\nif (!flow.get(\"has_basic_flow\")) {\n    node.error(\"Advanced Flow cannot be used without the Basic Flow group in the same flow.\");\n    return;\n}\nif (testValue(flow.get(\"printer_ip\")) || testValue(flow.get(\"printer_real_ip\"))) {\n    node.error(\"Printer IP is not set in flow properties\");\n}\nif (testValue(flow.get(\"access_code\"))) {\n    node.error(\"Printer LAN Access Code is not set in flow properties\")\n}\nif (testValue(flow.get(\"model\"))) {\n    node.error(\"Printer model is not set in flow properties\");\n}\nif (testValue(flow.get(\"printer_name\"))) {\n    node.error(\"Printer name is not set in flow properties\");\n}\nif (testValue(flow.get(\"printer_serial\"))) {\n    node.error(\"Printer serialnumber is not set in flow properties\");\n}\n\nif (testValue(flow.get(\"root_topic\"))) {\n    node.warn(\"Root Topic is not set, defaulting to homeassistant\");\n    flow.set(\"root_topic\", \"homeassistant\");\n}\n\nif (!String(flow.get(\"printer_ha_device_name\")).toLowerCase().startsWith(String(flow.get(\"model\")).toLowerCase())) {\n    node.warn(\"[WARN] [Advanced Flow] Your HA Printer Device Name may be incorrect! Double check the guide on how to get the right value. It should start with the model of your printer, for example: x1c_<printer_name>\")\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 1800,
        "wires": [
            []
        ]
    },
    {
        "id": "b38456f4aaccb5b7",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "f8f24fbbe7cdd785",
        "name": "Set Additional",
        "func": "if (flow.get(\"printer_ha_device_name\") != undefined){\n    let x = flow.get(\"printer_ha_device_name\")\n    x = x.toLowerCase()\n    x = x.replaceAll(\"-\", \"_\");\n    flow.set(\"printer_ha_device_name\", x);\n}\n\nlet ignored_base = [\"auto_cali_for_user_param\", \"filament_unload\", \"filament_load\",\"auto_cali_for_user\", \"ams_unload\", \"ams_load\", \"extrusion_cali\",\n                    \"abs_flowcalib_cali\", \"auto_filament_cali\"];\nlet ignored = [];\nfor (var i of ignored_base) {\n    ignored.push(i);\n    ignored.push(i+\".gcode\")\n}\nflow.set(\"ignored_printfiles\", ignored);\n\nflow.set(\"advanced_flow_version\", \"2.1.3\");",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2100,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "e5f12bb804fc0374",
        "type": "group",
        "z": "fbda6ab16491b918",
        "g": "20b7b2baaa0fdddd",
        "name": "Postgres",
        "style": {
            "stroke": "#001f60",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "a3e765e96362759b",
            "1536199568f3f2d7"
        ],
        "x": 48,
        "y": 2533,
        "w": 2424,
        "h": 954
    },
    {
        "id": "a3e765e96362759b",
        "type": "group",
        "z": "fbda6ab16491b918",
        "g": "e5f12bb804fc0374",
        "name": "Postgres DB",
        "style": {
            "stroke": "#001f60",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "c207be711ef10b6a",
            "8bf5c9135058acb6",
            "bc135fef68caf1ed",
            "dcf293279321a598",
            "417afcee7a04a0a2",
            "7f6eec43ae3d2fa0",
            "9f785ff8ae78f4c8",
            "a59ef513683810a9",
            "57ed2f101a692dae",
            "b62ebcf18556c189",
            "10eb08b1a1de7acb",
            "061ba64419d1fe72",
            "68f63aed66cbd5e3",
            "6a4ba58e99355e4c",
            "c5c99a5cfe9da632",
            "1707d16455cba415",
            "c7c9f6fcbdd71a9f",
            "fa51361c222215dd",
            "e733d198e61a5062",
            "d46519a504a1341d",
            "b6fef40e301e1d12",
            "42e55fc5c9123c99",
            "1d6f980a4979a67a",
            "296c0a8fc5707ef3",
            "89b6de093608e1bd",
            "92b2983e6e80385e",
            "3bea4a461a0c7c4b",
            "0ed5db3a40ab601d",
            "1c8bfea602263ae7",
            "a3e69a85d5a875b8",
            "7479721db2f16939",
            "11d0416b41dbf117",
            "29ce3287b0fc9101",
            "b292c53d06fe5323",
            "76b73ce6ce99d69d",
            "239b69ba6de0f3b0",
            "38891e797d89fde0",
            "8aaf33109eab123b",
            "1927a157e503a89a",
            "f292ef02b868a96d",
            "2e90a12c29779bff",
            "13ab87bca0a9499a",
            "f2fd88c2be22e11f",
            "3d26204dd2cb5b43",
            "53d8b5de5daaa9ba",
            "7cbdaf040db972c0",
            "d342f643c08ee9d3",
            "1f420b4921e3d087",
            "33269b09bb9a4a3b",
            "bd69f6023cb00184",
            "fb700d6d896b4e38",
            "87659026e1b64e10",
            "27e8750d79dc7117",
            "de0f8d6c3213410d",
            "51c6377e70811e9a",
            "7b11af61e6e0ef10",
            "eeba54db5300affd",
            "83e2f72cc122faf3",
            "20e12e2dbc0511d2",
            "aedffc8f39c5e784",
            "6488fbbd9a16fced",
            "5fba0cd4a415a1a0",
            "81669dbc1cb1994d",
            "f6ec9c1c878be81a",
            "3b1d3fc339195087",
            "835d262eba54ae5c",
            "c97ff23076ed10b4",
            "82e802f48daa83da",
            "3d9b17f1d8d8058f",
            "ccef33154dde5e17",
            "f83cc5013554e075",
            "c40cba2075d93e84",
            "3d20c32e447aefca",
            "85bdccd86c38d0e0",
            "1ec91432ced6f4f0",
            "231456032b28ba12",
            "d7dea15d1c35da3f",
            "43c56dfada7aeada",
            "11f9cdb5d2ee29b1",
            "c304cc5c892d73bb",
            "6943ae17c18c6084",
            "37aa1c47b14b9c0c",
            "634b2847eea9e4c1",
            "426f511209068038",
            "877e0a49ee35b01b",
            "bdd3b357333ecccb",
            "840551d3791478d9",
            "fb4417c1c1663037",
            "0bf4156fbf9943b1",
            "432f0dd8fcdc8358",
            "7f29777d2e10448a",
            "adea5317e157380b",
            "c34504c0437d948b",
            "7601c6459218c91a",
            "6715f9a179dc6151",
            "da9b07585f729c89",
            "7528cf90e65b64b2",
            "d2d26eb313e9f45f",
            "f436594fa28f7864",
            "0c8657af20f117ae",
            "3eac6b751d4e8365",
            "94d6b55f603d73c4",
            "b790b08e7727c55b",
            "c30c2bb43770649b",
            "10407d83408bc1bf",
            "d549297664c2cb31",
            "a5fe627a447cbafc",
            "b5769d3b9aecfdaa",
            "602d705feca68105",
            "727765126773d2e1",
            "3dfa97bf422f9202",
            "095875e32232a439",
            "541fa2dc1982de8a",
            "6ab0a0bf24afb073",
            "7cd87a8c5f0531db",
            "d66673d11ba1d499",
            "4af701019725fb0e"
        ],
        "x": 74,
        "y": 2559,
        "w": 1692,
        "h": 902
    },
    {
        "id": "c207be711ef10b6a",
        "type": "postgrestor",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Initialize",
        "query": "ALTER TABLE IF EXISTS prints ADD COLUMN IF NOT EXISTS material varchar(10);\nALTER TABLE IF EXISTS prints ADD COLUMN IF NOT EXISTS plate_type varchar(15);\nALTER TABLE IF EXISTS prints ADD COLUMN IF NOT EXISTS filament_data jsonb default '[]';\nALTER TABLE IF EXISTS prints ADD COLUMN IF NOT EXISTS progress_done numeric default 100;\nALTER TABLE IF EXISTS prints ADD COLUMN IF NOT EXISTS plate_id varchar(25) default 'unknown';\n\nCREATE TABLE IF NOT EXISTS prints (\n    id SERIAL,\n    start_epoch numeric PRIMARY KEY,\n    printer varchar(25) NOT NULL,\n    printer_serial varchar(20) NOT NULL,\n    name varchar(75) NOT NULL,\n    start_time timestamp DEFAULT (now() at time zone 'utc'),\n    end_time timestamp,\n    initial_kwh numeric DEFAULT 0.0,\n    final_kwh numeric DEFAULT 0.0,\n    kwh numeric GENERATED ALWAYS AS\n  \t\t(\n        case WHEN status = 'RUNNING' THEN 0.0\n            ELSE final_kwh - initial_kwh\n            end\n      ) STORED,\n    status varchar(10),\n    electric_rate numeric NOT NULL,\n    electric_cost numeric GENERATED ALWAYS AS ( \n        case WHEN status = 'RUNNING' THEN 0.0\n            ELSE ((electric_rate / 100) * (final_kwh - initial_kwh))\n            end\n      ) STORED,\n    material_used numeric default 0.0,\n    material_type varchar(10) default 'filament',\n    material_price numeric default 0.0,\n    material_cost numeric GENERATED ALWAYS AS (\n        material_used * (material_price / 1000)\n    ) STORED,\n    material_description varchar(50),\n    material varchar(10),\n    plate_type varchar(15),\n    filament_data jsonb default '[]',\n    progress_done numeric default 100,\n    plate_id varchar(25) default 'unknown'\n);\n\n\n--ALTER TABLE prints DROP COLUMN IF EXISTS material_price;\n--ALTER TABLE prints DROP COLUMN IF EXISTS material_cost;\nALTER TABLE prints ADD COLUMN IF NOT EXISTS material_used_cost numeric default 0.0;\n",
        "postgresDB": "79ce3199b8eeaa1c",
        "output": true,
        "outputs": 1,
        "x": 540,
        "y": 2680,
        "wires": [
            [
                "3bea4a461a0c7c4b"
            ]
        ]
    },
    {
        "id": "8bf5c9135058acb6",
        "type": "api-current-state",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Energy Rate",
        "server": "ed9339d3bdf92870",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is_not",
        "entity_id": "x",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "values.electric_rate",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1490,
        "y": 2760,
        "wires": [
            [
                "7cbdaf040db972c0"
            ]
        ]
    },
    {
        "id": "bc135fef68caf1ed",
        "type": "api-current-state",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Initial Kwh",
        "server": "ed9339d3bdf92870",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is_not",
        "entity_id": "x",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "values.initial_kwh",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1490,
        "y": 2840,
        "wires": [
            [
                "37aa1c47b14b9c0c"
            ]
        ]
    },
    {
        "id": "dcf293279321a598",
        "type": "postgrestor",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Insert Initial",
        "query": "INSERT INTO prints (\n    start_epoch,\n    printer,\n    printer_serial,\n    name,\n    initial_kwh,\n    status,\n    electric_rate,\n    progress_done\n) SELECT \n    '{{msg.values.start_epoch}}',\n    '{{msg.values.printer}}',\n    '{{msg.values.printer_serial}}',\n    '{{msg.values.name}}',\n    '{{msg.values.initial_kwh}}',\n    '{{msg.values.status}}',\n    '{{msg.values.electric_rate}}',\n    0\n WHERE NOT EXISTS (select 1 from prints where start_epoch = '{{msg.values.start_epoch}}' and printer = '{{msg.values.printer}}');",
        "postgresDB": "79ce3199b8eeaa1c",
        "output": true,
        "outputs": 1,
        "x": 1570,
        "y": 2920,
        "wires": [
            []
        ]
    },
    {
        "id": "417afcee7a04a0a2",
        "type": "api-current-state",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Final Kwh",
        "server": "ed9339d3bdf92870",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is_not",
        "entity_id": "x",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "values.final_kwh",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 300,
        "y": 2960,
        "wires": [
            [
                "6943ae17c18c6084"
            ]
        ]
    },
    {
        "id": "7f6eec43ae3d2fa0",
        "type": "postgrestor",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Insert Update",
        "query": "UPDATE prints SET\n    status = '{{msg.values.status}}',\n    final_kwh = '{{msg.values.final_kwh}}',\n    end_time = (now() at time zone 'utc'),\n    progress_done = CASE WHEN '{{msg.values.status}}' = 'FINISH' THEN 100 ELSE prints.progress_done END\nWHERE \n    start_epoch = '{{msg.values.start_epoch}}';",
        "postgresDB": "79ce3199b8eeaa1c",
        "output": true,
        "outputs": 1,
        "x": 600,
        "y": 2940,
        "wires": [
            [
                "f292ef02b868a96d"
            ]
        ]
    },
    {
        "id": "9f785ff8ae78f4c8",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "x": 440,
        "y": 2680,
        "wires": [
            [
                "c207be711ef10b6a"
            ]
        ]
    },
    {
        "id": "a59ef513683810a9",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "x": 400,
        "y": 2780,
        "wires": [
            [
                "c7c9f6fcbdd71a9f",
                "f6ec9c1c878be81a"
            ]
        ]
    },
    {
        "id": "57ed2f101a692dae",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 860,
        "y": 2640,
        "wires": [
            [
                "fb700d6d896b4e38"
            ]
        ]
    },
    {
        "id": "b62ebcf18556c189",
        "type": "postgrestor",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Insert Energy Table",
        "query": "CREATE TABLE IF NOT EXISTS energy_reading (\n    id SERIAL,\n    printer varchar(25) PRIMARY KEY,\n    read_time timestamp DEFAULT (now() at time zone 'utc'),\n    kwh numeric NOT NULL,\n    electric_rate numeric NOT NULL,\n    electric_cost numeric GENERATED ALWAYS AS ( \n        case WHEN kwh = 0.0 THEN 0.0\n            ELSE ((electric_rate / 100) * (kwh))\n            end\n      ) STORED\n);\nCOMMIT;\n\nINSERT INTO energy_reading (printer, kwh, electric_rate, read_time) VALUES (\n    '{{msg.payload.printer}}',\n    '{{msg.payload.kwh}}',\n    '{{msg.payload.electric_rate}}',\n    (now() at time zone 'utc')\n)\nON CONFLICT ON CONSTRAINT energy_reading_pkey\nDO UPDATE \n     SET kwh = '{{msg.payload.kwh}}',\n     electric_rate = '{{msg.payload.electric_rate}}',\n     read_time = (now() at time zone 'utc')\n     WHERE energy_reading.printer = '{{msg.payload.printer}}'; \n;",
        "postgresDB": "79ce3199b8eeaa1c",
        "output": true,
        "outputs": 1,
        "x": 770,
        "y": 3180,
        "wires": [
            []
        ]
    },
    {
        "id": "10eb08b1a1de7acb",
        "type": "inject",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "",
        "props": [
            {
                "p": "payload.printer",
                "v": "printer_name",
                "vt": "flow"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 3100,
        "wires": [
            [
                "53d8b5de5daaa9ba"
            ]
        ]
    },
    {
        "id": "061ba64419d1fe72",
        "type": "rbe",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "",
        "func": "deadbandEq",
        "gap": "0.001",
        "start": "",
        "inout": "in",
        "septopics": false,
        "property": "payload.kwh",
        "topi": "topic",
        "x": 440,
        "y": 3140,
        "wires": [
            [
                "c40cba2075d93e84"
            ]
        ]
    },
    {
        "id": "68f63aed66cbd5e3",
        "type": "api-current-state",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Energy Rate",
        "server": "ed9339d3bdf92870",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is_not",
        "entity_id": "x",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload.electric_rate",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 750,
        "y": 3120,
        "wires": [
            [
                "b62ebcf18556c189"
            ]
        ]
    },
    {
        "id": "6a4ba58e99355e4c",
        "type": "api-current-state",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Kwh",
        "server": "ed9339d3bdf92870",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is_not",
        "entity_id": "x",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload.kwh",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 530,
        "y": 3080,
        "wires": [
            [
                "061ba64419d1fe72"
            ]
        ]
    },
    {
        "id": "c5c99a5cfe9da632",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "RUN / PAUSE / OTHER",
        "property": "values.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "RUNNING",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PAUSE",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 230,
        "y": 2920,
        "wires": [
            [
                "1707d16455cba415"
            ],
            [
                "1707d16455cba415"
            ],
            [
                "82e802f48daa83da"
            ]
        ]
    },
    {
        "id": "1707d16455cba415",
        "type": "postgrestor",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Insert Update",
        "query": "UPDATE prints SET\n    status = '{{msg.values.status}}'\nWHERE \n    start_epoch = '{{msg.values.start_epoch}}';",
        "postgresDB": "79ce3199b8eeaa1c",
        "output": true,
        "outputs": 1,
        "x": 500,
        "y": 2900,
        "wires": [
            []
        ]
    },
    {
        "id": "c7c9f6fcbdd71a9f",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "If Failed",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "FAILED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FINISH",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 480,
        "y": 2780,
        "wires": [
            [
                "51c6377e70811e9a"
            ],
            []
        ]
    },
    {
        "id": "fa51361c222215dd",
        "type": "postgrestor",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Insert Update",
        "query": "UPDATE prints SET\n    material_used = '{{msg.used}}' * ('{{msg.progress}}' / 100.0),\n    material_used_cost = '{{msg.cost}}' * ('{{msg.progress}}' / 100.0),\n    progress_done = {{msg.progress}}\n    \nWHERE \n    start_epoch = '{{msg.start_epoch}}';",
        "postgresDB": "79ce3199b8eeaa1c",
        "output": true,
        "outputs": 1,
        "x": 700,
        "y": 2840,
        "wires": [
            [
                "f292ef02b868a96d"
            ]
        ]
    },
    {
        "id": "e733d198e61a5062",
        "type": "postgrestor",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Get Material Used",
        "query": "SELECT material_used, material_used_cost FROM prints\nWHERE \n    start_epoch = '{{msg.start_epoch}}';",
        "postgresDB": "79ce3199b8eeaa1c",
        "output": true,
        "outputs": 1,
        "x": 690,
        "y": 2800,
        "wires": [
            [
                "d46519a504a1341d"
            ]
        ]
    },
    {
        "id": "d46519a504a1341d",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Parse Amt",
        "func": "msg.used = parseFloat(msg.payload.rows[0].material_used);\nmsg.cost = parseFloat(msg.payload.rows[0].material_used_cost)\n\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 2800,
        "wires": [
            [
                "fa51361c222215dd"
            ]
        ]
    },
    {
        "id": "b6fef40e301e1d12",
        "type": "postgrestor",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "PRE REV 36 SELECT",
        "query": "select column_name, generation_expression\nfrom INFORMATION_SCHEMA.COLUMNS where table_name = 'prints' and generation_expression is not null\nand column_name in ('kwh', 'electric_cost');",
        "postgresDB": "79ce3199b8eeaa1c",
        "output": true,
        "outputs": 1,
        "x": 1080,
        "y": 3160,
        "wires": [
            [
                "296c0a8fc5707ef3",
                "11d0416b41dbf117"
            ]
        ]
    },
    {
        "id": "42e55fc5c9123c99",
        "type": "postgrestor",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "REV 36 UPDATE - electric_cost",
        "query": "\nALTER TABLE IF EXISTS prints DROP COLUMN electric_cost;\nALTER TABLE IF EXISTS prints ADD COLUMN electric_cost numeric GENERATED ALWAYS AS ( \n        case WHEN status = 'RUNNING' THEN 0.0\n            ELSE ((electric_rate / 100) * (final_kwh - initial_kwh))\n            end\n      ) STORED;",
        "postgresDB": "79ce3199b8eeaa1c",
        "output": true,
        "outputs": 1,
        "x": 1270,
        "y": 3120,
        "wires": [
            []
        ]
    },
    {
        "id": "1d6f980a4979a67a",
        "type": "postgrestor",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "REV 36 UPDATE - kwh",
        "query": "\n\nALTER TABLE IF EXISTS prints DROP COLUMN kwh;\nALTER TABLE IF EXISTS prints ADD COLUMN kwh numeric GENERATED ALWAYS AS\n  \t\t(\n        case WHEN status = 'RUNNING' THEN 0.0\n            ELSE final_kwh - initial_kwh\n            end\n      ) STORED;\n",
        "postgresDB": "79ce3199b8eeaa1c",
        "output": true,
        "outputs": 1,
        "x": 1250,
        "y": 3080,
        "wires": [
            []
        ]
    },
    {
        "id": "296c0a8fc5707ef3",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Row Needs Update?",
        "func": "let found = false;\nif(msg.payload != undefined && msg.payload.rows != undefined\n    && msg.payload.rows.length > 0) {\n    \n    for (var row of msg.payload.rows) {\n        if(!String(row.generation_expression).includes(\"RUNNING\")) {\n            node.send({\"column\": row.column_name});\n            found = true;\n        }\n    }\n}\nif(!found) {\n    node.send({\"column\": \"none\"});\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 3160,
        "wires": [
            [
                "7479721db2f16939"
            ]
        ]
    },
    {
        "id": "89b6de093608e1bd",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "",
        "property": "column",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "kwh",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "electric_cost",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1070,
        "y": 3080,
        "wires": [
            [
                "1d6f980a4979a67a"
            ],
            [
                "42e55fc5c9123c99"
            ]
        ]
    },
    {
        "id": "92b2983e6e80385e",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Link - Rev 36 DB Update",
        "links": [],
        "x": 935,
        "y": 3160,
        "wires": [
            [
                "b6fef40e301e1d12"
            ]
        ]
    },
    {
        "id": "3bea4a461a0c7c4b",
        "type": "link call",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "DB Update Rev 36",
        "links": [
            "92b2983e6e80385e"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 710,
        "y": 2680,
        "wires": [
            [
                "57ed2f101a692dae"
            ]
        ]
    },
    {
        "id": "0ed5db3a40ab601d",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1620,
        "y": 3180,
        "wires": [
            [
                "1c8bfea602263ae7"
            ]
        ]
    },
    {
        "id": "1c8bfea602263ae7",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "link out 1",
        "mode": "return",
        "links": [],
        "x": 1725,
        "y": 3180,
        "wires": []
    },
    {
        "id": "a3e69a85d5a875b8",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "",
        "pauseType": "random",
        "timeout": "3",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "50",
        "randomLast": "300",
        "randomUnits": "milliseconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1060,
        "y": 3120,
        "wires": [
            [
                "89b6de093608e1bd"
            ]
        ]
    },
    {
        "id": "7479721db2f16939",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "",
        "property": "column",
        "propertyType": "msg",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "eq",
                "v": "none",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1470,
        "y": 3160,
        "wires": [
            [
                "a3e69a85d5a875b8"
            ],
            []
        ]
    },
    {
        "id": "11d0416b41dbf117",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "x": 980,
        "y": 3180,
        "wires": [
            [
                "0ed5db3a40ab601d"
            ]
        ]
    },
    {
        "id": "29ce3287b0fc9101",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Force start epoch",
        "func": "if (msg == undefined ) {\n    msg = {\n        \"values\": {}\n    };\n}\nmsg['start_epoch'] = Math.round(Date.now() / 1000);\nmsg[\"values\"] = {};\nmsg.values['start_epoch'] = msg['start_epoch'];\nflow.set(\"print_start_epoch\", msg.start_epoch);\nmsg.payload = {};\nvar printer_name = flow.get(\"printer_name\")\nmsg.machine_name = flow.get(\"model\") + \"_\" + printer_name;\n//msg.payload['entityId'] = \"sensor.\" + flow.get(\"printer_ha_device_name\") + \"_machine_name\";\n//msg.payload['entity_id'] = msg.payload.entityId;\nnode.send(msg);\nnode.status({ fill: \"white\", shape: \"ring\", text: \"Forced \" + msg.values.start_epoch });",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 2760,
        "wires": [
            [
                "8aaf33109eab123b",
                "76b73ce6ce99d69d"
            ]
        ]
    },
    {
        "id": "b292c53d06fe5323",
        "type": "mqtt out",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "MQTT Out",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "489094618c340eef",
        "x": 1650,
        "y": 3000,
        "wires": []
    },
    {
        "id": "76b73ce6ce99d69d",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Set Topic",
        "func": "msg.topic = \"print_start_epoch\";\nmsg.model = flow.get(\"model\");\nvar printer_name = flow.get(\"printer_name\");\nmsg.machine_name = msg.model + \"_\" + printer_name;\nmsg.payload = msg.start_epoch;\nif(msg.values != undefined) {\n    delete msg.values;\n}\nnode.send([msg, null]);\n\nflow.set(\"print_start_epoch\", msg.payload);\n\nmsg.topic = \"print_start_time\";\nmsg.payload = Math.round(Date.now());\nif (msg.values != undefined) {\n    delete msg.values;\n}\nif (msg.start_epoch != 0 && msg.start_epoch != \"0\"){//} || !msg.model.startsWith(\"X1\")) {\n    flow.set(msg.machine_name+\"_forced_startepoch\", true);\n}\nelse {\n    flow.set(msg.machine_name + \"_forced_startepoch\", false);\n}\nif (!msg.model.startsWith(\"X1\") && flow.get(msg.machine_name + \"_forced_startepoch\")) {\n    node.send([null, msg]);\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 2880,
        "wires": [
            [
                "1ec91432ced6f4f0"
            ],
            [
                "1ec91432ced6f4f0"
            ]
        ]
    },
    {
        "id": "239b69ba6de0f3b0",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Printer Config",
        "func": "let data = {};\nlet payload = {};\nlet device = {};\nlet root_topic = flow.get(\"root_topic\");\nif(msg.payload == undefined && !msg.topic.includes(\"reset\")) {\n    return;\n}\nlet type = \"sensor\";\nif (msg.topic.match(/time/)) {\n    msg.icon = \"mdi:clock\";\n    if(msg.topic.includes(\"_start_time\")){\n        if(msg.payload != undefined && msg.payload != \"N/A\") {\n            msg.device_class = \"timestamp\";\n        }\n        msg.icon = \"mdi:clock-start\";\n    } \n    else if (msg.topic.includes(\"_end_time\")) {\n        if(msg.payload != undefined && msg.payload != \"N/A\") {\n            msg.device_class = \"timestamp\";\n        }\n        msg.icon = \"mdi:clock-end\";\n    }\n}\npayload.availability_topic = root_topic + \"/sensor/\" + msg.machine_name + \"/status/state\";\n\nif (msg.topic == \"active_print_time\") {\n    msg.icon = \"mdi:clock\";\n    msg.unit_of_measurement = \"h\";\n    msg.device_class = \"duration\";\n    \n    msg.state_class = \"measurement\";\n    msg.entity_category = \"diagnostic\";\n    delete payload.availability_topic;\n}\nelse if (msg.topic == \"filament_printed\") {\n    msg.icon = \"mdi:weight-kilogram\";\n    msg.unit_of_measurement = \"kg\";\n    msg.device_class = \"weight\";\n    \n    msg.state_class = \"measurement\";\n    msg.entity_category = \"diagnostic\";\n    delete payload.availability_topic;\n}\n\nfunction getFriendlyName(str) {\n    var i, word = str.split('_');\n    for (i = 0; i < word.length; i++) {\n        word[i] = word[i].charAt(0).toUpperCase() + word[i].slice(1);\n    }\n    return word.join(' ');\n}\n\n\nlet base_topic = root_topic +\"/\"+ type + \"/\" + msg.machine_name + \"/\" + msg.topic;\ndata.topic = base_topic + \"/config\";\npayload.name = getFriendlyName(msg.topic);\n\ndevice.identifiers = [];\ndevice.identifiers[0] = { \"bambu_lab\": msg.machine_name, \"type\": \"printer\", \"serial\": flow.get(\"printer_serial\") , \"model\": flow.get(\"model\")};\ndevice.identifiers[1] = msg.machine_name;\ndevice.identifiers[2] = flow.get(\"printer_serial\");\ndevice.model = flow.get(\"model\");\ndevice.identifiers[0] = JSON.stringify(device.identifiers[0]);\ndevice.manufacturer = \"Bambu Labs\";\ndevice.name = msg.machine_name;\n\nif( msg.icon != undefined) {\n    payload.icon = msg.icon\n}\n\npayload.device = device;\npayload.unique_id = msg.machine_name + \"_\" + msg.topic;\npayload.object_id = payload.unique_id;\npayload.has_entity_name = false;\n\nif (msg.device_class != undefined)\n    payload.device_class = msg.device_class;\n\nif (msg.unit_of_measurement != undefined)\n    payload.unit_of_measurement = msg.unit_of_measurement;\n\npayload.state_topic = base_topic + \"/state\";\npayload.json_attributes_topic = base_topic + \"/attr\";\nif (msg.topic != \"active_print_time\" && msg.topic != \"filament_printed\")\n    payload.availability_topic = root_topic + \"/sensor/\"+msg.machine_name+\"/status/state\";\n\nif (msg.icon != undefined)\n    payload.icon = msg.icon;\nif (msg.entity_category != undefined)\n    payload.entity_category = msg.entity_category\n\ndata.payload = payload;\n\ndata.qos = 1;\ndata.retain = true;\nif(data.topic.startsWith(root_topic)) {\n    node.send(data);\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 2980,
        "wires": [
            [
                "2e90a12c29779bff"
            ]
        ]
    },
    {
        "id": "38891e797d89fde0",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Printer State",
        "func": "// Filter UoM from payload\nif (msg.payload == undefined) {\n    return;\n}\nif (msg.topic == \"plate_name\" && msg.payload != \"\") {\n    let match = msg.payload.match(/_?(plate_[1-9][0-9]?[0-9]?)/);\n    if (match != undefined && match.length > 1) {\n        msg.payload = match[1];\n    }\n}\nif (msg.topic.endsWith(\"_start_time\") || msg.topic.endsWith(\"_end_time\")) {\n    if (typeof msg.payload != typeof \"\") {\n        let d = new Date(msg.payload);\n        msg.payload = d.toISOString();\n    }\n}\n\nlet old_topic = msg.topic;\nmsg.topic = flow.get(\"root_topic\") +\"/sensor/\" + msg.machine_name + \"/\" + msg.topic + \"/state\";\nnode.send(msg);\n\nlet retained = flow.get(\"retained_mqtt\");\nfor (var r of retained) {\n    if (msg.topic.endsWith(r)) {\n        msg.retain = true;\n        msg.qos = 2;\n        break;\n    }\n}\n\nif (old_topic == \"active_print_time\") {\n    msg.topic = flow.get(\"root_topic\") + \"/sensor/\" + msg.machine_name + \"/\" + old_topic + \"/attr\";\n    msg.payload = {\"Note:\": \"Only since adv-flow with DB was set up, and not including idle times\",\n                };\n    if (msg.data != undefined) {\n        for (var key of Object.keys(msg.data)) {\n            msg.payload[key] = msg.data[key];\n        }\n    }\n    node.send(msg);\n}\nelse if (old_topic == \"filament_printed\"){\n    msg.topic = flow.get(\"root_topic\") + \"/sensor/\" + msg.machine_name + \"/\" + old_topic + \"/attr\";\n    msg.payload = {\"Note:\": \"Only since adv-flow with DB was set up. Only a rough estimate considering cancelled/failed prints\",\n                };\n    if (msg.data != undefined) {\n        for (var key of Object.keys(msg.data)) {\n            msg.payload[key] = msg.data[key];\n        }\n    }\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 3020,
        "wires": [
            [
                "3dfa97bf422f9202"
            ]
        ]
    },
    {
        "id": "8aaf33109eab123b",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "3s",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1210,
        "y": 2760,
        "wires": [
            [
                "27e8750d79dc7117"
            ]
        ]
    },
    {
        "id": "1927a157e503a89a",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "x": 1040,
        "y": 2960,
        "wires": [
            [
                "239b69ba6de0f3b0",
                "38891e797d89fde0"
            ]
        ]
    },
    {
        "id": "f292ef02b868a96d",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "If Start Forced Clear",
        "func": "msg.model = flow.get(\"model\");\nvar printer_name = flow.get(\"printer_name\")\nmsg.machine_name = msg.model + \"_\" + printer_name;\nif(flow.get(msg.machine_name + \"_forced_startepoch\") == true) {\n    msg.start_epoch = 0;\n    msg.payload = {};\n    /*msg.payload.entityId = \"sensor.\" + flow.get(\"printer_ha_device_name\") + \"_machine_name\";\n    msg.payload.entity_id = msg.payload.entityId;*/\n    node.send(msg);\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 2880,
        "wires": [
            [
                "76b73ce6ce99d69d"
            ]
        ]
    },
    {
        "id": "2e90a12c29779bff",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "x": 1420,
        "y": 3000,
        "wires": [
            [
                "d66673d11ba1d499"
            ]
        ]
    },
    {
        "id": "13ab87bca0a9499a",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "",
        "pauseType": "delay",
        "timeout": "60",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1180,
        "y": 2600,
        "wires": [
            [
                "87659026e1b64e10"
            ]
        ]
    },
    {
        "id": "f2fd88c2be22e11f",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "",
        "property": "has_basic_flow",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 2800,
        "wires": [
            [
                "a59ef513683810a9"
            ]
        ]
    },
    {
        "id": "3d26204dd2cb5b43",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "",
        "property": "has_basic_flow",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 2840,
        "wires": [
            [
                "f6ec9c1c878be81a"
            ]
        ]
    },
    {
        "id": "53d8b5de5daaa9ba",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "",
        "property": "has_basic_flow",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 290,
        "y": 3100,
        "wires": [
            [
                "f83cc5013554e075"
            ]
        ]
    },
    {
        "id": "7cbdaf040db972c0",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "values.printer",
                "pt": "msg",
                "to": "printer_name",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "values.printer_serial",
                "pt": "msg",
                "to": "printer_serial",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1380,
        "y": 2800,
        "wires": [
            [
                "de0f8d6c3213410d"
            ]
        ]
    },
    {
        "id": "d342f643c08ee9d3",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 680,
        "y": 2640,
        "wires": [
            [
                "9f785ff8ae78f4c8"
            ]
        ]
    },
    {
        "id": "1f420b4921e3d087",
        "type": "inject",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 3140,
        "wires": [
            [
                "33269b09bb9a4a3b"
            ]
        ]
    },
    {
        "id": "33269b09bb9a4a3b",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "has_postgres_flow",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 3180,
        "wires": [
            []
        ]
    },
    {
        "id": "bd69f6023cb00184",
        "type": "inject",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Force Init",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 800,
        "y": 2600,
        "wires": [
            [
                "d342f643c08ee9d3"
            ]
        ]
    },
    {
        "id": "fb700d6d896b4e38",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Start Epoch",
        "func": "let now = new Date();\nlet dt = now.toLocaleDateString(\"en-US\", {\"month\": \"short\", \"day\": \"numeric\", \"year\": \"numeric\", \"hour\": \"2-digit\", \"minute\": \"2-digit\"});\n\nlet epoch = flow.get(\"RET_\"+\"print_start_epoch\");\nif (epoch != undefined && !isNaN(parseInt(epoch))) {\n    epoch = parseInt(epoch);\n}\nelse {\n    epoch = 0;\n}\nif (msg['values'] == undefined) {\n    msg['values'] = {};\n}\nmsg['values']['start_epoch'] = epoch;\nif (epoch == 0) {\n    node.send([null, msg]);\n}\nelse {\n    node.send([msg, null]);\n}\n\nnode.status({ fill: \"white\", shape: \"ring\", text: `${epoch} - ${dt}` });",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 2680,
        "wires": [
            [
                "3d20c32e447aefca"
            ],
            [
                "29ce3287b0fc9101"
            ]
        ]
    },
    {
        "id": "87659026e1b64e10",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "EId + Process Updates",
        "func": "let doNanCheckWeight = false;\nif (msg.update_for == undefined) {\n    return;\n}\nelse if (msg.update_for == \"mat_cost\") {\n    if (msg.cost == undefined) {\n        msg.cost = msg.payload;\n    }\n}\nelse if (msg.update_for == \"weights\") {\n    if (msg.payload.weight != undefined) {\n        msg.weight = msg.payload.weight;\n    }\n    if (msg.payload.material != undefined) {\n        msg.material = msg.payload.material;\n    }\n    doNanCheckWeight = true;\n}\nelse if (msg.update_for == \"plate_type\") {\n    if (msg.plate == undefined) {\n        msg.plate = msg.payload;\n    }\n}\nelse if (msg.update_for == \"gcode_data\"){\n    if(msg.gcode_data == undefined) {\n        msg.gcode_data = msg.payload;\n    }\n}\n\nmsg.payload = {};\nmsg.payload.entityId = \"sensor.\" + flow.get(\"printer_ha_device_name\") + \"_print_start_epoch\";\nmsg.payload.entity_id = msg.payload.entityId;\nif (doNanCheckWeight) {\n    if (!isNaN(msg.weight)) {\n        node.send(msg);\n    }\n}\nelse {\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 2600,
        "wires": [
            [
                "4af701019725fb0e"
            ]
        ]
    },
    {
        "id": "27e8750d79dc7117",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Print Name",
        "func": "let now = new Date();\nlet dt = now.toLocaleDateString(\"en-US\", {\"month\": \"short\", \"day\": \"numeric\", \"year\": \"numeric\", \"hour\": \"2-digit\", \"minute\": \"2-digit\"});\n\nif (msg['values'] == undefined) {\n    msg['values'] = {};\n}\nmsg['values']['name'] = flow.get(\"RET_\"+\"subtask\");\nnode.send(msg);\nnode.status({ fill: \"white\", shape: \"ring\", text: `${msg.values.name} - ${dt}` });",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 2720,
        "wires": [
            [
                "3d9b17f1d8d8058f"
            ]
        ]
    },
    {
        "id": "de0f8d6c3213410d",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Print Status",
        "func": "flow.set(\"print_start_epoch\", msg.values.start_epoch);\n\nlet now = new Date();\nlet dt = now.toLocaleDateString(\"en-US\", {\"month\": \"short\", \"day\": \"numeric\", \"year\": \"numeric\", \"hour\": \"2-digit\", \"minute\": \"2-digit\"});\n\nif (msg['values'] == undefined) {\n    msg['values'] = {};\n}\nmsg['values']['status'] = flow.get(\"RET_\"+\"print_status\");\nnode.send(msg);\nnode.status({ fill: \"white\", shape: \"ring\", text: `${msg.values.status} - ${dt}` });",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 2800,
        "wires": [
            [
                "c97ff23076ed10b4"
            ]
        ]
    },
    {
        "id": "51c6377e70811e9a",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "progress %",
        "func": "msg.progress = parseInt(flow.get(\"print_progress_pct\"));\nnode.status({ fill: \"blue\", shape: \"ring\", text: msg.progress });\nnode.send(msg);\nflow.set(\"print_progress_pct\", 0);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 2740,
        "wires": [
            [
                "7b11af61e6e0ef10"
            ]
        ]
    },
    {
        "id": "7b11af61e6e0ef10",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Start Epoch",
        "func": "let now = new Date();\nlet dt = now.toLocaleDateString(\"en-US\", {\"month\": \"short\", \"day\": \"numeric\", \"year\": \"numeric\", \"hour\": \"2-digit\", \"minute\": \"2-digit\"});\n\nlet epoch = flow.get(\"RET_\"+\"print_start_epoch\");\nif (epoch != undefined && !isNaN(parseInt(epoch))) {\n    epoch = parseInt(epoch);\n}\nelse {\n    epoch = 0;\n}\nif (msg['values'] == undefined) {\n    msg['values'] = {};\n}\nmsg['start_epoch'] = epoch;\nnode.status({ fill: \"white\", shape: \"ring\", text: `${epoch} - ${dt}` });\nif (flow.get(\"ignored_printfiles\").includes(flow.get(\"RET_subtask\"))) {\n    node.send([null, null, msg]);\n    return;\n}\nif (epoch == 0) {\n    node.send([null, msg, null]);\n}\nelse {\n    node.send([msg, null, null]);\n}\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 2740,
        "wires": [
            [
                "e733d198e61a5062"
            ],
            [],
            [
                "f292ef02b868a96d"
            ]
        ]
    },
    {
        "id": "eeba54db5300affd",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Sub",
        "func": "let config = {\n    \"action\": \"subscribe\",\n    \"topic\": {\n        \"topic\": flow.get(\"root_topic\") + \"/sensor/\" + flow.get(\"HA_DEVICE\") + \"/print_status/state\",\n        \"qos\": 2\n    }\n}\n\nnode.send(config);\nnode.status({ fill: \"white\", shape: \"ring\", text: \"Init\" });\nflow.set(\"has_db_flow\", true);\n\nvar model = flow.get(\"model\");\nvar printer_name = flow.get(\"printer_name\")\nvar machine_name = model + \"_\" + printer_name;\n//flow.set(machine_name + \"_forced_startepoch\", false);\n//flow.set(\"print_start_epoch\", 0);\n//flow.set(\"print_start_epoch\", undefined);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 2600,
        "wires": [
            [
                "83e2f72cc122faf3"
            ]
        ]
    },
    {
        "id": "83e2f72cc122faf3",
        "type": "mqtt in",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "MQTT In",
        "topic": "",
        "qos": "2",
        "datatype": "utf8",
        "broker": "489094618c340eef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 440,
        "y": 2600,
        "wires": [
            [
                "ccef33154dde5e17"
            ]
        ]
    },
    {
        "id": "20e12e2dbc0511d2",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "EId",
        "func": "msg.payload = {};\nmsg.payload.entityId = \"sensor.\" + flow.get(\"printer_ha_device_name\") + \"_print_status\";\nmsg.payload.entity_id = msg.payload.entityId;\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 2640,
        "wires": [
            [
                "aedffc8f39c5e784"
            ]
        ]
    },
    {
        "id": "aedffc8f39c5e784",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 2640,
        "wires": [
            [
                "6488fbbd9a16fced"
            ]
        ]
    },
    {
        "id": "6488fbbd9a16fced",
        "type": "api-get-history",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "",
        "server": "ed9339d3bdf92870",
        "version": 1,
        "startDate": "",
        "endDate": "",
        "entityId": "",
        "entityIdType": "equals",
        "useRelativeTime": true,
        "relativeTime": "60s",
        "flatten": true,
        "outputType": "array",
        "outputLocationType": "msg",
        "outputLocation": "payload",
        "x": 430,
        "y": 2640,
        "wires": [
            [
                "5fba0cd4a415a1a0"
            ]
        ]
    },
    {
        "id": "5fba0cd4a415a1a0",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Get Latest & Previous",
        "func": "if (msg.payload != undefined && msg.payload.length != undefined && msg.payload.length > 0) {\n    let li = msg.payload;\n    let first_state = \"\";\n    let newmsg = {};\n    li.sort((x, y) => {\n        return new Date(x.last_updated) < new Date(y.last_updated) ? 1 : -1\n    })\n    let states_only = [];\n    for (var event of li) {\n        if(event.state == \"PREPARE\") {\n            continue;\n        }\n        if(first_state == \"\") {\n            first_state == event.state;\n            states_only.push(event.state);\n        }\n        else if(first_state != event.state) {\n            states_only.push(event.state);\n        }\n        \n    }\n    newmsg.current_state = states_only[0];\n    newmsg.previous_state = states_only[0];\n    if(states_only.length > 1) {\n        newmsg.previous_state = states_only[1];\n    }\n    \n    node.send(newmsg);\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 2680,
        "wires": [
            [
                "81669dbc1cb1994d"
            ]
        ]
    },
    {
        "id": "81669dbc1cb1994d",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Start / End or Pause / Resume",
        "func": "let entityId = \"sensor.\" + flow.get(\"HA_DEVICE_LOWER\") + \"_machine_name\";\nlet machine_name = flow.get(\"model\") + \"_\" + flow.get(\"printer_name\");\nlet now = new Date();\nlet dt = now.toLocaleDateString(\"en-US\", {\"month\": \"short\", \"day\": \"numeric\", \"year\": \"numeric\", \"hour\": \"2-digit\", \"minute\": \"2-digit\"});\n\nif (msg.previous_state != undefined && msg.current_state != undefined\n    && msg.previous_state != msg.current_state) {\n    msg.payload = msg.current_state;\n    if(msg.previous_state == \"PAUSE\" && msg.current_state == \"RUNNING\") {\n        node.send([null, null, msg, null]);\n        node.status({ fill: \"blue\", shape: \"ring\", text: `Print Resumed - ${dt}` });\n    }\n    else {\n\n        if(msg.previous_state.toLowerCase() != \"unknown\"\n        && msg.previous_state.toLowerCase() != \"unavailable\"\n        && msg.previous_state != \"OFFLINE\" && msg.current_state != \"OFFLINE\"\n        && msg.current_state.toLowerCase() != \"unknown\"\n        && msg.current_state.toLowerCase() != \"unavailable\")\n        {\n            if (msg.previous_state != \"PAUSE\" && msg.current_state == \"PAUSE\"){\n                // paused\n                node.send([null, msg, null, null]);\n                node.status({ fill: \"blue\", shape: \"ring\", text: `Print Paused - ${dt}` });\n            }\n            else if (msg.previous_state != \"FAILED\" && msg.current_state == \"FAILED\") {\n                // failed or cancelled\n                node.send([null, msg, null, {\"machine_name\": machine_name, \"start_epoch\": 0, \"payload\": {\"entityId\": entityId, \"entity_id\": entityId}}]);\n                node.status({ fill: \"blue\", shape: \"ring\", text: `Print Cancelled or Failed - ${dt}` });\n            }\n            else if ( (msg.previous_state == \"RUNNING\" || msg.previous_state == \"FINISH\" || msg.previous_state == \"FAILED\") && msg.current_state == \"IDLE\") {\n                // ended and is idle\n                msg.payload = \"FAILED\";\n                node.send([null, msg, null, {\"machine_name\": machine_name,  \"start_epoch\": 0, \"payload\": { \"entityId\": entityId, \"entity_id\": entityId } }]);\n                node.status({ fill: \"blue\", shape: \"ring\", text: `Print Ended - ${dt}` });\n            }\n            else if (msg.previous_state != \"FINISH\" && msg.current_state == \"FINISH\") {\n                // finished\n                node.send([null, msg, null, {\"machine_name\": machine_name,  \"start_epoch\": 0, \"payload\": { \"entityId\": entityId, \"entity_id\": entityId } }]);\n                node.status({ fill: \"blue\", shape: \"ring\", text: `Print Completed - ${dt}` });\n            }\n            else if (msg.current_state == \"RUNNING\"){\n                // starts\n                node.send([msg, null, null, null]);\n                flow.set(\"print_progress_pct\", 0)\n                node.status({ fill: \"blue\", shape: \"ring\", text: `Print Started - ${dt}` });\n            }\n        }\n    }\n}\nelse {\n    node.status({ fill: \"white\", shape: \"ring\", text: \"Unhandled: \" + msg.previous_state +\" -> \"+ msg.current_state });\n    if (msg.current_state == \"FINISH\" || msg.current_state == \"IDLE\" || msg.current_state == \"FAILED\") {\n        node.send([null, null, null, { \"machine_name\": machine_name, \"start_epoch\": 0, \"payload\": { \"entityId\": entityId, \"entity_id\": entityId } }]);\n    }\n}\nif(msg.current_state == \"OFFLINE\" && msg.previous_state != \"OFFLINE\") {\n    node.status({ fill: \"white\", shape: \"ring\", text: \"Offline\"});\n}\nelse if(msg.current_state == \"IDLE\" && msg.previous_state == \"OFFLINE\") {\n    node.status({ fill: \"white\", shape: \"ring\", text: \"Online\" });\n}\nelse if (msg.current_state != \"IDLE\" && msg.previous_state == \"OFFLINE\" && msg.current_state != \"OFFLINE\") {\n    node.status({ fill: \"white\", shape: \"ring\", text: \"Recovered from Offline Status\" });\n}",
        "outputs": 4,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 2740,
        "wires": [
            [
                "d342f643c08ee9d3"
            ],
            [
                "f2fd88c2be22e11f"
            ],
            [
                "3d26204dd2cb5b43"
            ],
            [
                "c304cc5c892d73bb"
            ]
        ]
    },
    {
        "id": "f6ec9c1c878be81a",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Print Name",
        "func": "let device = flow.get(\"HA_DEVICE\");\nif (msg.payload == undefined) {\n    msg.payload = {};\n}\nif (msg['values'] == undefined) {\n    msg['values'] = {};\n}\n\nmsg.values['printer'] = device;\n\nlet now = new Date();\nlet dt = now.toLocaleDateString(\"en-US\", {\"month\": \"short\", \"day\": \"numeric\", \"year\": \"numeric\", \"hour\": \"2-digit\", \"minute\": \"2-digit\"});\n\nmsg['values']['name'] = flow.get(\"RET_\"+\"subtask\");\nnode.send(msg);\nnode.status({ fill: \"white\", shape: \"ring\", text: `${msg.values.name} - ${dt}` });",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 2820,
        "wires": [
            [
                "3b1d3fc339195087"
            ]
        ]
    },
    {
        "id": "3b1d3fc339195087",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Start Epoch",
        "func": "let now = new Date();\nlet dt = now.toLocaleDateString(\"en-US\", {\"month\": \"short\", \"day\": \"numeric\", \"year\": \"numeric\", \"hour\": \"2-digit\", \"minute\": \"2-digit\"});\n\nlet epoch = flow.get(\"RET_\"+\"print_start_epoch\");\nif (epoch != undefined && !isNaN(parseInt(epoch))) {\n    epoch = parseInt(epoch);\n}\nelse {\n    epoch = 0;\n}\nif (msg['values'] == undefined) {\n    msg['values'] = {};\n}\nmsg['values']['start_epoch']= epoch;\nif (epoch == 0) {\n    node.send([null, msg]);\n}\nelse {\n    node.send([msg, null]);\n}\n\nnode.status({ fill: \"white\", shape: \"ring\", text: `${epoch} - ${dt}` });",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 2820,
        "wires": [
            [
                "835d262eba54ae5c"
            ],
            []
        ]
    },
    {
        "id": "835d262eba54ae5c",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Print Status",
        "func": "flow.set(\"print_start_epoch\", msg.values.start_epoch);\n\nlet now = new Date();\nlet dt = now.toLocaleDateString(\"en-US\", {\"month\": \"short\", \"day\": \"numeric\", \"year\": \"numeric\", \"hour\": \"2-digit\", \"minute\": \"2-digit\"});\n\nif (msg['values'] == undefined) {\n    msg['values'] = {};\n}\nmsg['values']['status'] = flow.get(\"RET_\"+\"print_status\");\nif (msg.payload == undefined) {\n    msg.payload = {};\n}\nnode.send(msg);\nnode.status({ fill: \"white\", shape: \"ring\", text: `${msg.values.status} - ${dt}` });",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 2860,
        "wires": [
            [
                "c5c99a5cfe9da632"
            ]
        ]
    },
    {
        "id": "c97ff23076ed10b4",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "EId",
        "rules": [
            {
                "t": "set",
                "p": "payload.entity_id",
                "pt": "msg",
                "to": "power_plug_meter_sensor",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "payload.entityId",
                "pt": "msg",
                "to": "power_plug_meter_sensor",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1350,
        "y": 2840,
        "wires": [
            [
                "bc135fef68caf1ed"
            ]
        ]
    },
    {
        "id": "82e802f48daa83da",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "EId",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "payload.entity_id",
                "pt": "msg",
                "to": "power_plug_meter_sensor",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "payload.entityId",
                "pt": "msg",
                "to": "power_plug_meter_sensor",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 170,
        "y": 2960,
        "wires": [
            [
                "417afcee7a04a0a2"
            ]
        ]
    },
    {
        "id": "3d9b17f1d8d8058f",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "EId",
        "rules": [
            {
                "t": "set",
                "p": "payload.entity_id",
                "pt": "msg",
                "to": "energy_rate_sensor",
                "tot": "flow"
            },
            {
                "t": "set",
                "p": "payload.entityId",
                "pt": "msg",
                "to": "energy_rate_sensor",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1350,
        "y": 2760,
        "wires": [
            [
                "8bf5c9135058acb6"
            ]
        ]
    },
    {
        "id": "ccef33154dde5e17",
        "type": "rbe",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 570,
        "y": 2600,
        "wires": [
            [
                "20e12e2dbc0511d2"
            ]
        ]
    },
    {
        "id": "f83cc5013554e075",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "EId",
        "func": "let name = flow.get(\"power_plug_meter_sensor\");\nif(name == undefined || name == \"\") {\n    return;\n}\nmsg.payload.entityId = flow.get(\"power_plug_meter_sensor\");\nmsg.payload.entity_id = msg.payload.entityId;\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 3080,
        "wires": [
            [
                "6a4ba58e99355e4c"
            ]
        ]
    },
    {
        "id": "c40cba2075d93e84",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "EId",
        "func": "let name = flow.get(\"energy_rate_sensor\");\nif(name == undefined || name == \"\") {\n    return;\n}\nmsg.payload.entityId = flow.get(\"energy_rate_sensor\");\nmsg.payload.entity_id = msg.payload.entityId;\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 3140,
        "wires": [
            [
                "68f63aed66cbd5e3"
            ]
        ]
    },
    {
        "id": "3d20c32e447aefca",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "NaN Check",
        "func": "if (msg.error != undefined || msg.values.start_epoch == undefined || isNaN(msg.values.start_epoch) || msg.values.start_epoch == 0) {\n    node.send([null, msg]);\n}\nelse {\n    node.send([msg, null]);\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 2680,
        "wires": [
            [
                "27e8750d79dc7117"
            ],
            [
                "29ce3287b0fc9101"
            ]
        ]
    },
    {
        "id": "85bdccd86c38d0e0",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Check not unavailable",
        "property": "values.name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "unavailable",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1600,
        "y": 2880,
        "wires": [
            [
                "dcf293279321a598"
            ]
        ]
    },
    {
        "id": "1ec91432ced6f4f0",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "x": 1280,
        "y": 2940,
        "wires": [
            [
                "1927a157e503a89a"
            ]
        ]
    },
    {
        "id": "231456032b28ba12",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "From Flow",
        "rules": [
            {
                "t": "set",
                "p": "start_epoch",
                "pt": "msg",
                "to": "print_start_epoch",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1330,
        "y": 2660,
        "wires": [
            [
                "d7dea15d1c35da3f"
            ]
        ]
    },
    {
        "id": "d7dea15d1c35da3f",
        "type": "junction",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "x": 1440,
        "y": 2660,
        "wires": [
            [
                "43c56dfada7aeada"
            ]
        ]
    },
    {
        "id": "43c56dfada7aeada",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "",
        "property": "start_epoch",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1530,
        "y": 2660,
        "wires": [
            [
                "da9b07585f729c89"
            ],
            [
                "13ab87bca0a9499a",
                "29ce3287b0fc9101"
            ]
        ]
    },
    {
        "id": "11f9cdb5d2ee29b1",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1040,
        "y": 2800,
        "wires": [
            [
                "76b73ce6ce99d69d"
            ]
        ]
    },
    {
        "id": "c304cc5c892d73bb",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Is P1",
        "property": "model",
        "propertyType": "flow",
        "rules": [
            {
                "t": "cont",
                "v": "P1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 470,
        "y": 2720,
        "wires": [
            [
                "11f9cdb5d2ee29b1"
            ]
        ]
    },
    {
        "id": "6943ae17c18c6084",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "If IDLE",
        "func": "if (msg.values.status == \"IDLE\")  {\n    msg.values.status = \"FAILED\";\n}\nif(msg.values.status == \"PREPARE\") {\n    return;\n}\n\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2940,
        "wires": [
            [
                "7f6eec43ae3d2fa0"
            ]
        ]
    },
    {
        "id": "37aa1c47b14b9c0c",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Prepare = Running",
        "func": "if (msg.values.status != undefined && (msg.values.status==\"PREPARE\" || msg.values.status == \"SLICING\")){\n    msg.values.status = \"RUNNING\";\n}\n\nnode.send(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 2880,
        "wires": [
            [
                "85bdccd86c38d0e0"
            ]
        ]
    },
    {
        "id": "634b2847eea9e4c1",
        "type": "inject",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Init",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 190,
        "y": 2600,
        "wires": [
            [
                "eeba54db5300affd"
            ]
        ]
    },
    {
        "id": "426f511209068038",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Update_For_In",
        "links": [
            "e5bde629696c68c3",
            "79460dfc84945051"
        ],
        "x": 1075,
        "y": 2600,
        "wires": [
            [
                "13ab87bca0a9499a"
            ]
        ]
    },
    {
        "id": "877e0a49ee35b01b",
        "type": "inject",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Update Material Used Costs [READ NOTES 1]",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 530,
        "y": 3260,
        "wires": [
            [
                "840551d3791478d9"
            ]
        ]
    },
    {
        "id": "bdd3b357333ecccb",
        "type": "comment",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "NOTES 1",
        "info": "Pressing this button will auto update\nall prints in the database.\n\nA new column was introduced in 2.0.6\nfor material_used_cost,\nparsed from the gcode file\n\nSince all previous prints will\nhave it at 0, you can optionally choose\nto press this inject node to forcefully\nset the cost of each based on their\nmaterial used, and an AVERAGE cost for\nthe filament type\n\nPLEASE SET the average costs per filament\nmaterial type in the \"COSTS\" node\n\nthis will permanently update all where\nthe material used cost is 0.0\n\n\nUnfortunately, this list is limited to\nwhatever ends up in the database from\nBambu's filament settings. So nothing for\nPLA+ or such.\n\n----\nEXAMPLE SCENARIO BELOW PLEASE READ\n----\nFor an example of calculating averages,\nlet's say I printed 500g (0.5kg) \nof PLA, 1kg of polymaker CosPLA,\nand 3.2kg of PLA+ and\nthat is all in the database as \"PLA\",\ntotalling 4.7kg\n\nIf my normal PLA costs $28.00 per KG,\nCosPLA costs $33.00 per KG,\nand PLA $30 per KG,\n\nin total I have 4.7kg of PLA in the DB\nbut the cost per kg varies\n\nTo calculate the average per,\nbefore adding:\n\n[variant cost]: ( [amount of variant in kg] / [total weight of material in db in kg] ) * [cost per kg of variant]\n[total = sum of all variant costs]\n\nPLA: (0.5 / 4.7) * 28 = 2.97\ncosPLA: (1 / 4.7) * 33 = 7.02\nPLA+: (3.2 / 4.7) * 30 = 20.43\n\nAdd them together and my average\ncost for PLA printed in the past was\n$30.42\n\nSo for the COSTS node to the right,\nfor PLA I would put in\n\n30.42\n\n*Alternatively* if you know you spent $28\nper kg of PLA, and rarely deviate, you can\njust put 28.00\n\n\n====\nWhen you first import this, all values are 0\n for a predefined list of materials \n this way if you run it, nothing changes\n\nnot all materials may be in the list. If yours isn't\nthen add it as msg.[name] and set the type to a number,\nthen insert the value.\n\nmaterials that will work are ones that you can set from\nwithin bambu studio as a filament type.\n\nTHIS WILL BE A ROUGH CALCULATION\nand not 100% perfect, but is better than having all 0's\n\n\n=============\n\nIf you regularly print files from Makerworld, you will need to run this often\nas makerworld gcode files *do not* contain cost information",
        "x": 260,
        "y": 3260,
        "wires": []
    },
    {
        "id": "840551d3791478d9",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "COSTS",
        "rules": [
            {
                "t": "set",
                "p": "PLA",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "ABS",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "PETG",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "ASA",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "PLA-CF",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "PA-CF",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "PETG-CF",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "PET-CF",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "TPU",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "PA",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "PC",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "PVA",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "HIPS",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "PLA-AERO",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 3260,
        "wires": [
            [
                "fb4417c1c1663037"
            ]
        ]
    },
    {
        "id": "fb4417c1c1663037",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Org",
        "func": "let data = {}\nfor (var key of Object.keys(msg)) {\n    if(key != \"_msgid\") {\n        data[key] = parseFloat(msg[key]);\n    }\n}\n\nfor (var key of Object.keys(data)) {\n    if (data[key] > 0) {\n        node.send({\"material\": key, \"avg\": data[key]});\n    }\n}\n    \n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 3260,
        "wires": [
            [
                "0bf4156fbf9943b1"
            ]
        ]
    },
    {
        "id": "0bf4156fbf9943b1",
        "type": "postgrestor",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Insert Update",
        "query": "UPDATE prints SET\n    material_used_cost = ((material_used * '{{msg.avg}}') / 1000.0)\nWHERE \n    material_used_cost = 0\n    AND material = '{{msg.material}}' and material_type = 'filament';",
        "postgresDB": "79ce3199b8eeaa1c",
        "output": true,
        "outputs": 1,
        "x": 1080,
        "y": 3260,
        "wires": [
            []
        ]
    },
    {
        "id": "432f0dd8fcdc8358",
        "type": "rbe",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 550,
        "y": 3040,
        "wires": [
            [
                "7f29777d2e10448a"
            ]
        ]
    },
    {
        "id": "7f29777d2e10448a",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 670,
        "y": 3040,
        "wires": [
            [
                "adea5317e157380b"
            ]
        ]
    },
    {
        "id": "adea5317e157380b",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Store Print Progress",
        "func": "flow.set(\"print_progress_pct\", msg.payload);\nnode.status({ fill: \"blue\", shape: \"ring\", text: `${msg.payload}%` });",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 3060,
        "wires": [
            []
        ]
    },
    {
        "id": "c34504c0437d948b",
        "type": "inject",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Init",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 170,
        "y": 3040,
        "wires": [
            [
                "7601c6459218c91a"
            ]
        ]
    },
    {
        "id": "7601c6459218c91a",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Sub",
        "func": "let config = {\n    \"action\": \"subscribe\",\n    \"topic\": {\n        \"topic\": flow.get(\"root_topic\") + \"/sensor/\" + flow.get(\"HA_DEVICE\") + \"/print_progress/state\",\n        \"qos\": 2\n    }\n}\n\nflow.set(\"print_progress_pct\", 0)\nnode.send(config);\nnode.status({ fill: \"white\", shape: \"ring\", text: \"Init\" });",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 3040,
        "wires": [
            [
                "6715f9a179dc6151"
            ]
        ]
    },
    {
        "id": "6715f9a179dc6151",
        "type": "mqtt in",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "MQTT In",
        "topic": "",
        "qos": "2",
        "datatype": "utf8",
        "broker": "489094618c340eef",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 420,
        "y": 3040,
        "wires": [
            [
                "432f0dd8fcdc8358"
            ]
        ]
    },
    {
        "id": "da9b07585f729c89",
        "type": "link out",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Update_Row_Out",
        "mode": "link",
        "links": [
            "4221ae3622740ea9"
        ],
        "x": 1685,
        "y": 2660,
        "wires": []
    },
    {
        "id": "7528cf90e65b64b2",
        "type": "comment",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "NOTES 2",
        "info": "Running this will update all previous prints prior to 2.0.7\n\nRUN THIS ONCE AFTER UPDATING TO 2.0.7\nBUT MAKE SURE TO RUN \"Update Material Used Costs\" FIRST\nIF UPDATING FROM AN OLDER VERSION THAN 2.0.6\n\n--------------------------------------------------------------------\n\nWhat this does is fill in data for the filament_data column where it previously is empty.\n\nThis new column is directly taken from the gcode of each print to be accurate,\nHOWEVER for this retroactive updating, it will do it based off of the saved data.\n\nThis means for all that are manually updated like this, they will only have:\n1 filament\ncolour: black\nprofile: Manual\nand a special \"manual_set\":true value in the single filament.\n\nThe purposes of this column is to allow advanced parsing of costs / material usage.\n\nHowever, when this is pulled manually via this, it is already using values based on what exists.\nThis means for failed prints it is already modified based on print progress.\n\nFOR ALL THAT ARE ADDED THROUGH NORMAL PRINTING\nthey will not auto update based on print progress if failed.\n\nHence, a new column, \"progress_done\" is created so you can use it to calculate advanced metrics.\nI already take care of this calc in the grafana dashboards. By default, progress_done is set to 100\nthis way old data works.",
        "x": 260,
        "y": 3300,
        "wires": []
    },
    {
        "id": "d2d26eb313e9f45f",
        "type": "inject",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Update Filament Data [READ NOTES 2]",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "x": 520,
        "y": 3300,
        "wires": [
            [
                "10407d83408bc1bf"
            ]
        ]
    },
    {
        "id": "f436594fa28f7864",
        "type": "postgrestor",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "U1",
        "query": "UPDATE prints SET\n    filament_data = $1::jsonb\nWHERE filament_data = '[]' and material_type = 'filament' and material is not null;\n",
        "postgresDB": "79ce3199b8eeaa1c",
        "output": true,
        "outputs": 1,
        "x": 1170,
        "y": 3300,
        "wires": [
            [
                "0c8657af20f117ae"
            ]
        ]
    },
    {
        "id": "0c8657af20f117ae",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "del",
        "rules": [
            {
                "t": "delete",
                "p": "params",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1290,
        "y": 3300,
        "wires": [
            [
                "3eac6b751d4e8365"
            ]
        ]
    },
    {
        "id": "3eac6b751d4e8365",
        "type": "postgrestor",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "U2",
        "query": "UPDATE prints SET\n filament_data = jsonb_set(filament_data, '{0, type}', to_json(material)::JSONB, true)\nWHERE filament_data @> '[{\"manual_set\":true}]' and material_type = 'filament' and material is not null;",
        "postgresDB": "79ce3199b8eeaa1c",
        "output": true,
        "outputs": 1,
        "x": 1410,
        "y": 3300,
        "wires": [
            [
                "94d6b55f603d73c4"
            ]
        ]
    },
    {
        "id": "94d6b55f603d73c4",
        "type": "postgrestor",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "U3",
        "query": "UPDATE prints SET\n filament_data = jsonb_set(filament_data, '{0, used_g}', to_json(material_used)::JSONB, true)\nWHERE filament_data @> '[{\"manual_set\":true}]' and material_type = 'filament';",
        "postgresDB": "79ce3199b8eeaa1c",
        "output": true,
        "outputs": 1,
        "x": 1530,
        "y": 3300,
        "wires": [
            [
                "b790b08e7727c55b"
            ]
        ]
    },
    {
        "id": "b790b08e7727c55b",
        "type": "postgrestor",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "U4",
        "query": "UPDATE prints SET\n filament_data = jsonb_set(filament_data, '{0, used_cost}', to_json(material_used_cost)::JSONB, true)\nWHERE filament_data @> '[{\"manual_set\":true}]' and material_type = 'filament';",
        "postgresDB": "79ce3199b8eeaa1c",
        "output": true,
        "outputs": 1,
        "x": 1650,
        "y": 3300,
        "wires": [
            []
        ]
    },
    {
        "id": "c30c2bb43770649b",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Check",
        "property": "payload.rows[0].count",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 930,
        "y": 3300,
        "wires": [
            [
                "d549297664c2cb31"
            ]
        ]
    },
    {
        "id": "10407d83408bc1bf",
        "type": "postgrestor",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Count",
        "query": "SELECT count(*) FROM prints\nWHERE filament_data = '[]' and material_type = 'filament' and material is not null;\n",
        "postgresDB": "79ce3199b8eeaa1c",
        "output": true,
        "outputs": 1,
        "x": 810,
        "y": 3300,
        "wires": [
            [
                "c30c2bb43770649b"
            ]
        ]
    },
    {
        "id": "d549297664c2cb31",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Set",
        "rules": [
            {
                "t": "set",
                "p": "params",
                "pt": "msg",
                "to": "[\"[{\\\"manual_set\\\": true, \\\"used_in_print\\\":true, \\\"profile\\\":\\\"Manual\\\", \\\"colour\\\":\\\"#000000\\\",\\\"index\\\":0}]\"]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1050,
        "y": 3300,
        "wires": [
            [
                "f436594fa28f7864"
            ]
        ]
    },
    {
        "id": "a5fe627a447cbafc",
        "type": "inject",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Poll Print Data",
        "props": [
            {
                "p": "printer_serial",
                "v": "printer_serial",
                "vt": "flow"
            }
        ],
        "repeat": "1200",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 360,
        "y": 3360,
        "wires": [
            [
                "b5769d3b9aecfdaa",
                "095875e32232a439"
            ]
        ]
    },
    {
        "id": "b5769d3b9aecfdaa",
        "type": "postgrestor",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Get Printing Time",
        "query": "select \n      sum(case when prints.status = 'RUNNING' or prints.status = 'PAUSED' \n      then EXTRACT(EPOCH FROM ((now() at time zone 'utc') - start_time)) \n      else EXTRACT(EPOCH FROM (end_time - start_time))end), material\nfrom prints \nwhere printer_serial = '{{msg.printer_serial}}' and material is not null group by material;",
        "postgresDB": "79ce3199b8eeaa1c",
        "output": true,
        "outputs": 1,
        "x": 570,
        "y": 3360,
        "wires": [
            [
                "602d705feca68105"
            ]
        ]
    },
    {
        "id": "602d705feca68105",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Get Print Time",
        "func": "if (msg.payload != undefined && msg.payload.rows != undefined \n    && msg.payload.rows.length > 0) {\n    let minutes = 0;\n    let data = {};\n    for (var filament of msg.payload.rows) {\n        if (filament['sum'] == undefined) {\n            filament['sum'] = 0;\n        }\n        data[filament[\"material\"]] = (Math.round((filament.sum / 3600) * 100) / 100).toString() + \" h\"\n        minutes += filament.sum\n    }\n    minutes = (Math.round((minutes / 60) * 100) / 100)\n    let hours = Math.round((minutes / 60) * 100) / 100; // yes again\n    msg.payload = hours;\n    msg.data = data;\n    msg.topic = \"active_print_time\"\n    msg.machine_name = flow.get(\"HA_DEVICE\");\n    node.send(msg);\n    node.status({ fill: \"blue\", shape: \"ring\", text: `${hours} h` });\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 3360,
        "wires": [
            [
                "727765126773d2e1"
            ]
        ]
    },
    {
        "id": "727765126773d2e1",
        "type": "rbe",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "",
        "func": "deadbandEq",
        "gap": "0.01",
        "start": "",
        "inout": "in",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 940,
        "y": 3360,
        "wires": [
            [
                "1927a157e503a89a"
            ]
        ]
    },
    {
        "id": "3dfa97bf422f9202",
        "type": "delay",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1310,
        "y": 3020,
        "wires": [
            [
                "2e90a12c29779bff"
            ]
        ]
    },
    {
        "id": "095875e32232a439",
        "type": "postgrestor",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Get Printing Amount",
        "query": "select \n      sum( CASE WHEN (b->>'used_g')::float = 0.0 and material_used > 0 and most_mat is not null and most_mat = (b->>'type')::text THEN material_used  ELSE ( (b->>'used_g')::float * (progress_done / 100) ) END),\n        (CASE when material_type = 'resin' then 'ml' else 'g' end) as \"material_unit\", (b->>'type')::text as material\n      from (\n            SELECT JSONB_ARRAY_ELEMENTS(filament_data) as b, material_type, progress_done, material as most_mat, material_used\n            from prints \n            where jsonb_array_length(filament_data) != 0 \n            and printer_serial = '{{msg.printer_serial}}' and material is not null\n      ) as foo \n      group by material, material_type",
        "postgresDB": "79ce3199b8eeaa1c",
        "output": true,
        "outputs": 1,
        "x": 580,
        "y": 3420,
        "wires": [
            [
                "541fa2dc1982de8a"
            ]
        ]
    },
    {
        "id": "541fa2dc1982de8a",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Get Amounts",
        "func": "if (msg.payload != undefined && msg.payload.rows != undefined \n    && msg.payload.rows.length > 0) {\n    let total = 0;\n    let data = {};\n    for (var filament of msg.payload.rows) {\n        \n        if (filament[\"material_unit\"] == \"g\" && filament[\"sum\"] > 0 && filament[\"material\"] != undefined && filament[\"material\"] != \"\"){\n            total += filament[\"sum\"];\n            data[filament[\"material\"]] = (Math.round((filament[\"sum\"] / 1000) * 100) / 100).toString() + \" kg\";\n        }\n    }\n    total = (Math.round((total) * 100) / 100);\n    let kg_total = (Math.round((total / 1000) * 100) / 100);\n    msg.payload = kg_total;\n    msg.topic = \"filament_printed\"\n    msg.machine_name = flow.get(\"HA_DEVICE\");\n    msg.data = data;\n    node.send(msg);\n    node.status({ fill: \"blue\", shape: \"ring\", text: `${kg_total} kg` });\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 3420,
        "wires": [
            [
                "727765126773d2e1"
            ]
        ]
    },
    {
        "id": "6ab0a0bf24afb073",
        "type": "change",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Reset",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1110,
        "y": 3420,
        "wires": [
            [
                "727765126773d2e1"
            ]
        ]
    },
    {
        "id": "7cd87a8c5f0531db",
        "type": "inject",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Reset Filter",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 970,
        "y": 3420,
        "wires": [
            [
                "6ab0a0bf24afb073"
            ]
        ]
    },
    {
        "id": "d66673d11ba1d499",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "undefined",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1490,
        "y": 3000,
        "wires": [
            [],
            [
                "b292c53d06fe5323"
            ]
        ]
    },
    {
        "id": "4af701019725fb0e",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "a3e765e96362759b",
        "name": "Start Epoch",
        "func": "let now = new Date();\nlet dt = now.toLocaleDateString(\"en-US\", {\"month\": \"short\", \"day\": \"numeric\", \"year\": \"numeric\", \"hour\": \"2-digit\", \"minute\": \"2-digit\"});\n\nlet epoch = flow.get(\"RET_\"+\"print_start_epoch\");\nif (epoch != undefined && !isNaN(parseInt(epoch))) {\n    epoch = parseInt(epoch);\n}\nelse {\n    epoch = 0;\n}\nmsg['start_epoch'] = epoch;\nif (epoch == 0) {\n    node.send([null, msg]);\n}\nelse {\n    node.send([msg, null]);\n}\n\nnode.status({ fill: \"white\", shape: \"ring\", text: `${epoch} - ${dt}` });",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 2600,
        "wires": [
            [
                "d7dea15d1c35da3f"
            ],
            [
                "231456032b28ba12"
            ]
        ]
    },
    {
        "id": "79ce3199b8eeaa1c",
        "type": "postgresDB",
        "name": "3DPrint DB (PG13)",
        "host": "{POSTGRES_DB_HOST}",
        "hostFieldType": "str",
        "port": "{POSTGRES_DB_PORT}",
        "portFieldType": "num",
        "database": "{POSTGRES_DB_DBNAME}",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "max": "10",
        "maxFieldType": "num",
        "min": "1",
        "minFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "{POSTGRES_DB_USER}",
        "userFieldType": "str",
        "password": "{POSTGRES_DB_PASSWORD}",
        "passwordFieldType": "str"
    },
    {
        "id": "1536199568f3f2d7",
        "type": "group",
        "z": "fbda6ab16491b918",
        "g": "e5f12bb804fc0374",
        "name": "Postgres DB Row Updater",
        "style": {
            "stroke": "#001f60",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "c07ce3f59a10aac7",
            "94f08b2a34e68dd4",
            "4d4e6202ea8e0feb",
            "47be921cd284ce4d",
            "4221ae3622740ea9",
            "3088613307143de9",
            "88adc4ef65388bc4"
        ],
        "x": 1784,
        "y": 2559,
        "w": 662,
        "h": 202
    },
    {
        "id": "c07ce3f59a10aac7",
        "type": "postgrestor",
        "z": "fbda6ab16491b918",
        "g": "1536199568f3f2d7",
        "name": "Insert Update (Weights)",
        "query": "UPDATE prints SET\n    material_used = '{{msg.weight}}',\n    material = '{{msg.material}}'\nWHERE \n    start_epoch = '{{msg.start_epoch}}';",
        "postgresDB": "79ce3199b8eeaa1c",
        "output": true,
        "outputs": 1,
        "x": 2130,
        "y": 2680,
        "wires": [
            []
        ]
    },
    {
        "id": "94f08b2a34e68dd4",
        "type": "postgrestor",
        "z": "fbda6ab16491b918",
        "g": "1536199568f3f2d7",
        "name": "Insert Update (Plate)",
        "query": "UPDATE prints SET\n    plate_type = '{{msg.plate}}',\n    plate_id = '{{msg.plate_name}}'\nWHERE \n    start_epoch = '{{msg.start_epoch}}';",
        "postgresDB": "79ce3199b8eeaa1c",
        "output": true,
        "outputs": 1,
        "x": 2120,
        "y": 2640,
        "wires": [
            []
        ]
    },
    {
        "id": "4d4e6202ea8e0feb",
        "type": "postgrestor",
        "z": "fbda6ab16491b918",
        "g": "1536199568f3f2d7",
        "name": "Insert Update (Mat Cost)",
        "query": "UPDATE prints SET\n    material_used_cost = '{{msg.cost}}'\nWHERE \n    start_epoch = '{{msg.start_epoch}}';",
        "postgresDB": "79ce3199b8eeaa1c",
        "output": true,
        "outputs": 1,
        "x": 2130,
        "y": 2600,
        "wires": [
            []
        ]
    },
    {
        "id": "47be921cd284ce4d",
        "type": "switch",
        "z": "fbda6ab16491b918",
        "g": "1536199568f3f2d7",
        "name": "Which Insert",
        "property": "update_for",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "mat_cost",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "plate_type",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "weights",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "gcode_data",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 1930,
        "y": 2660,
        "wires": [
            [
                "4d4e6202ea8e0feb"
            ],
            [
                "94f08b2a34e68dd4"
            ],
            [
                "c07ce3f59a10aac7"
            ],
            [
                "88adc4ef65388bc4"
            ]
        ]
    },
    {
        "id": "4221ae3622740ea9",
        "type": "link in",
        "z": "fbda6ab16491b918",
        "g": "1536199568f3f2d7",
        "name": "Update Row In",
        "links": [
            "da9b07585f729c89"
        ],
        "x": 1825,
        "y": 2660,
        "wires": [
            [
                "47be921cd284ce4d"
            ]
        ]
    },
    {
        "id": "3088613307143de9",
        "type": "postgrestor",
        "z": "fbda6ab16491b918",
        "g": "1536199568f3f2d7",
        "name": "Insert Update (Filament Data)",
        "query": "UPDATE prints SET\n    filament_data = $1::jsonb\nWHERE \n    start_epoch = '{{msg.start_epoch}}';",
        "postgresDB": "79ce3199b8eeaa1c",
        "output": true,
        "outputs": 1,
        "x": 2290,
        "y": 2720,
        "wires": [
            []
        ]
    },
    {
        "id": "88adc4ef65388bc4",
        "type": "function",
        "z": "fbda6ab16491b918",
        "g": "1536199568f3f2d7",
        "name": "Convert",
        "func": "msg.params = [JSON.stringify(msg.gcode_data)];\nnode.send(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 2720,
        "wires": [
            [
                "3088613307143de9"
            ]
        ]
    }
]